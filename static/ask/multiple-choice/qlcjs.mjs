/* https://github.com/teemulehtinen/qlcjs

MIT License

Copyright (c) 2022 Teemu Lehtinen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var dist$8 = {};

var tokenizer = {};

var utils$1 = {};

var unicode$2 = {};

Object.defineProperty(unicode$2, "__esModule", {
  value: true
});
// Generated by scripts/generate-unicode-data.js

unicode$2.whitespaceArray = [5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279];
unicode$2.whitespaceBool = [false, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

unicode$2.idStartLargeRegex = /^[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]$/;
unicode$2.idStartBool = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false];

unicode$2.idContinueLargeRegex = /^[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]$/;
unicode$2.idContinueBool = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false];

Object.defineProperty(utils$1, "__esModule", {
  value: true
});
utils$1.isStrictModeReservedWord = isStrictModeReservedWord;
utils$1.isWhiteSpace = isWhiteSpace;
utils$1.isLineTerminator = isLineTerminator;
utils$1.isIdentifierStart = isIdentifierStart$1;
utils$1.isIdentifierPart = isIdentifierPart$1;
utils$1.isDecimalDigit = isDecimalDigit;
utils$1.getHexValue = getHexValue;

var _unicode$2 = unicode$2;

var strictReservedWords = ['null', 'true', 'false', 'implements', 'interface', 'package', 'private', 'protected', 'public', 'static', 'let', 'if', 'in', 'do', 'var', 'for', 'new', 'try', 'this', 'else', 'case', 'void', 'with', 'enum', 'while', 'break', 'catch', 'throw', 'const', 'yield', 'class', 'super', 'return', 'typeof', 'delete', 'switch', 'export', 'import', 'default', 'finally', 'extends', 'function', 'continue', 'debugger', 'instanceof']; /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * Copyright 2017 Shape Security, Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * Licensed under the Apache License, Version 2.0 (the "License")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *     http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    */

function isStrictModeReservedWord(id) {
  return strictReservedWords.indexOf(id) !== -1;
}

function isWhiteSpace(ch) {
  return ch < 128 ? _unicode$2.whitespaceBool[ch] : ch === 0xA0 || ch > 0x167F && _unicode$2.whitespaceArray.indexOf(ch) !== -1;
}

function isLineTerminator(ch) {
  return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
}

function isIdentifierStart$1(ch) {
  return ch < 128 ? _unicode$2.idStartBool[ch] : _unicode$2.idStartLargeRegex.test(String.fromCodePoint(ch));
}

function isIdentifierPart$1(ch) {
  return ch < 128 ? _unicode$2.idContinueBool[ch] : _unicode$2.idContinueLargeRegex.test(String.fromCodePoint(ch));
}

function isDecimalDigit(ch) {
  return ch >= 48 && ch <= 57;
}

function getHexValue(rune) {
  if (rune >= '0' && rune <= '9') {
    return rune.charCodeAt(0) - 48;
  }
  if (rune >= 'a' && rune <= 'f') {
    return rune.charCodeAt(0) - 87;
  }
  if (rune >= 'A' && rune <= 'F') {
    return rune.charCodeAt(0) - 55;
  }
  return -1;
}

var errors = {};

Object.defineProperty(errors, "__esModule", {
  value: true
});
/**
 * Copyright 2014 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

errors.ErrorMessages = {
  UNEXPECTED_TOKEN: function UNEXPECTED_TOKEN(id) {
    return 'Unexpected token ' + JSON.stringify(id);
  },
  UNEXPECTED_ILLEGAL_TOKEN: function UNEXPECTED_ILLEGAL_TOKEN(id) {
    return 'Unexpected ' + JSON.stringify(id);
  },

  UNEXPECTED_ESCAPED_KEYWORD: 'Unexpected escaped keyword',
  UNEXPECTED_NUMBER: 'Unexpected number',
  UNEXPECTED_STRING: 'Unexpected string',
  UNEXPECTED_IDENTIFIER: 'Unexpected identifier',
  UNEXPECTED_RESERVED_WORD: 'Unexpected reserved word',
  UNEXPECTED_TEMPLATE: 'Unexpected template',
  UNEXPECTED_EOS: 'Unexpected end of input',
  UNEXPECTED_LINE_TERMINATOR: 'Unexpected line terminator',
  UNEXPECTED_COMMA_AFTER_REST: 'Unexpected comma after rest',
  UNEXPECTED_REST_PARAMETERS_INITIALIZATION: 'Rest parameter may not have a default initializer',
  NEWLINE_AFTER_THROW: 'Illegal newline after throw',
  UNTERMINATED_REGEXP: 'Invalid regular expression: missing /',
  INVALID_LAST_REST_PARAMETER: 'Rest parameter must be last formal parameter',
  INVALID_REST_PARAMETERS_INITIALIZATION: 'Rest parameter may not have a default initializer',
  INVALID_REGEXP_FLAGS: 'Invalid regular expression flags',
  INVALID_REGEX: 'Invalid regular expression',
  INVALID_LHS_IN_ASSIGNMENT: 'Invalid left-hand side in assignment',
  INVALID_LHS_IN_BINDING: 'Invalid left-hand side in binding', // todo collapse messages?
  INVALID_LHS_IN_FOR_IN: 'Invalid left-hand side in for-in',
  INVALID_LHS_IN_FOR_OF: 'Invalid left-hand side in for-of',
  INVALID_LHS_IN_FOR_AWAIT: 'Invalid left-hand side in for-await',
  INVALID_UPDATE_OPERAND: 'Increment/decrement target must be an identifier or member expression',
  INVALID_EXPONENTIATION_LHS: 'Unary expressions as the left operand of an exponentation expression ' + 'must be disambiguated with parentheses',
  MULTIPLE_DEFAULTS_IN_SWITCH: 'More than one default clause in switch statement',
  NO_CATCH_OR_FINALLY: 'Missing catch or finally after try',
  ILLEGAL_RETURN: 'Illegal return statement',
  ILLEGAL_ARROW_FUNCTION_PARAMS: 'Illegal arrow function parameter list',
  INVALID_ASYNC_PARAMS: 'Async function parameters must not contain await expressions',
  INVALID_VAR_INIT_FOR_IN: 'Invalid variable declaration in for-in statement',
  INVALID_VAR_INIT_FOR_OF: 'Invalid variable declaration in for-of statement',
  INVALID_VAR_INIT_FOR_AWAIT: 'Invalid variable declaration in for-await statement',
  UNINITIALIZED_BINDINGPATTERN_IN_FOR_INIT: 'Binding pattern appears without initializer in for statement init',
  ILLEGAL_PROPERTY: 'Illegal property initializer',
  INVALID_ID_BINDING_STRICT_MODE: function INVALID_ID_BINDING_STRICT_MODE(id) {
    return 'The identifier ' + JSON.stringify(id) + ' must not be in binding position in strict mode';
  },
  INVALID_ID_IN_LABEL_STRICT_MODE: function INVALID_ID_IN_LABEL_STRICT_MODE(id) {
    return 'The identifier ' + JSON.stringify(id) + ' must not be in label position in strict mode';
  },
  INVALID_ID_IN_EXPRESSION_STRICT_MODE: function INVALID_ID_IN_EXPRESSION_STRICT_MODE(id) {
    return 'The identifier ' + JSON.stringify(id) + ' must not be in expression position in strict mode';
  },

  INVALID_CALL_TO_SUPER: 'Calls to super must be in the "constructor" method of a class expression ' + 'or class declaration that has a superclass',
  INVALID_DELETE_STRICT_MODE: 'Identifier expressions must not be deleted in strict mode',
  DUPLICATE_BINDING: function DUPLICATE_BINDING(id) {
    return 'Duplicate binding ' + JSON.stringify(id);
  },
  ILLEGAL_ID_IN_LEXICAL_DECLARATION: function ILLEGAL_ID_IN_LEXICAL_DECLARATION(id) {
    return 'Lexical declarations must not have a binding named ' + JSON.stringify(id);
  },

  UNITIALIZED_CONST: 'Constant lexical declarations must have an initialiser',
  ILLEGAL_LABEL_IN_BODY: function ILLEGAL_LABEL_IN_BODY(stmt) {
    return 'The body of a ' + stmt + ' statement must not be a labeled function declaration';
  },

  ILLEGEAL_LABEL_IN_IF: 'The consequent of an if statement must not be a labeled function declaration',
  ILLEGAL_LABEL_IN_ELSE: 'The alternate of an if statement must not be a labeled function declaration',
  ILLEGAL_CONTINUE_WITHOUT_ITERATION_WITH_ID: function ILLEGAL_CONTINUE_WITHOUT_ITERATION_WITH_ID(id) {
    return 'Continue statement must be nested within an iteration statement with label ' + JSON.stringify(id);
  },

  ILLEGAL_CONTINUE_WITHOUT_ITERATION: 'Continue statement must be nested within an iteration statement',
  ILLEGAL_BREAK_WITHOUT_ITERATION_OR_SWITCH: 'Break statement must be nested within an iteration statement or a switch statement',
  ILLEGAL_WITH_STRICT_MODE: 'Strict mode code must not include a with statement',
  ILLEGAL_ACCESS_SUPER_MEMBER: 'Member access on super must be in a method',
  ILLEGAL_SUPER_CALL: 'Calls to super must be in the "constructor" method of a class expression or class declaration that has a superclass',
  DUPLICATE_LABEL_DECLARATION: function DUPLICATE_LABEL_DECLARATION(label) {
    return 'Label ' + JSON.stringify(label) + ' has already been declared';
  },
  ILLEGAL_BREAK_WITHIN_LABEL: function ILLEGAL_BREAK_WITHIN_LABEL(label) {
    return 'Break statement must be nested within a statement with label ' + JSON.stringify(label);
  },
  ILLEGAL_YIELD_EXPRESSIONS: function ILLEGAL_YIELD_EXPRESSIONS(paramType) {
    return paramType + ' parameters must not contain yield expressions';
  },

  ILLEGAL_YIELD_IDENTIFIER: '"yield" may not be used as an identifier in this context',
  ILLEGAL_AWAIT_IDENTIFIER: '"await" may not be used as an identifier in this context',
  DUPLICATE_CONSTRUCTOR: 'Duplicate constructor method in class',
  ILLEGAL_CONSTRUCTORS: 'Constructors cannot be async, generators, getters or setters',
  ILLEGAL_STATIC_CLASS_NAME: 'Static class methods cannot be named "prototype"',
  NEW_TARGET_ERROR: 'new.target must be within function (but not arrow expression) code',
  DUPLICATE_EXPORT: function DUPLICATE_EXPORT(id) {
    return 'Duplicate export ' + JSON.stringify(id);
  },
  UNDECLARED_BINDING: function UNDECLARED_BINDING(id) {
    return 'Exported binding ' + JSON.stringify(id) + ' is not declared';
  },

  DUPLICATE_PROPTO_PROP: 'Duplicate __proto__ property in object literal not allowed',
  ILLEGAL_LABEL_FUNC_DECLARATION: 'Labeled FunctionDeclarations are disallowed in strict mode',
  ILLEGAL_FUNC_DECL_IF: 'FunctionDeclarations in IfStatements are disallowed in strict mode',
  ILLEGAL_USE_STRICT: 'Functions with non-simple parameter lists may not contain a "use strict" directive',
  ILLEGAL_EXPORTED_NAME: 'Names of variables used in an export specifier from the current module must be identifiers',
  NO_OCTALS_IN_TEMPLATES: 'Template literals may not contain octal escape sequences',
  NO_AWAIT_IN_ASYNC_PARAMS: 'Async arrow parameters may not contain "await"'
};

Object.defineProperty(tokenizer, "__esModule", {
  value: true
});
tokenizer.JsError = tokenizer.TokenType = tokenizer.TokenClass = undefined;

var _slicedToArray$1 = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass$e = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils$1 = utils$1;

var _errors$2 = errors;

function _classCallCheck$i(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$8(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$8(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2014 Shape Security, Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var TokenClass = tokenizer.TokenClass = {
  Eof: { name: '<End>' },
  Ident: { name: 'Identifier', isIdentifierName: true },
  Keyword: { name: 'Keyword', isIdentifierName: true },
  NumericLiteral: { name: 'Numeric' },
  TemplateElement: { name: 'Template' },
  Punctuator: { name: 'Punctuator' },
  StringLiteral: { name: 'String' },
  RegularExpression: { name: 'RegularExpression' },
  Illegal: { name: 'Illegal' }
};

var TokenType = tokenizer.TokenType = {
  EOS: { klass: TokenClass.Eof, name: 'EOS' },
  LPAREN: { klass: TokenClass.Punctuator, name: '(' },
  RPAREN: { klass: TokenClass.Punctuator, name: ')' },
  LBRACK: { klass: TokenClass.Punctuator, name: '[' },
  RBRACK: { klass: TokenClass.Punctuator, name: ']' },
  LBRACE: { klass: TokenClass.Punctuator, name: '{' },
  RBRACE: { klass: TokenClass.Punctuator, name: '}' },
  COLON: { klass: TokenClass.Punctuator, name: ':' },
  SEMICOLON: { klass: TokenClass.Punctuator, name: ';' },
  PERIOD: { klass: TokenClass.Punctuator, name: '.' },
  ELLIPSIS: { klass: TokenClass.Punctuator, name: '...' },
  ARROW: { klass: TokenClass.Punctuator, name: '=>' },
  CONDITIONAL: { klass: TokenClass.Punctuator, name: '?' },
  INC: { klass: TokenClass.Punctuator, name: '++' },
  DEC: { klass: TokenClass.Punctuator, name: '--' },
  ASSIGN: { klass: TokenClass.Punctuator, name: '=' },
  ASSIGN_BIT_OR: { klass: TokenClass.Punctuator, name: '|=' },
  ASSIGN_BIT_XOR: { klass: TokenClass.Punctuator, name: '^=' },
  ASSIGN_BIT_AND: { klass: TokenClass.Punctuator, name: '&=' },
  ASSIGN_SHL: { klass: TokenClass.Punctuator, name: '<<=' },
  ASSIGN_SHR: { klass: TokenClass.Punctuator, name: '>>=' },
  ASSIGN_SHR_UNSIGNED: { klass: TokenClass.Punctuator, name: '>>>=' },
  ASSIGN_ADD: { klass: TokenClass.Punctuator, name: '+=' },
  ASSIGN_SUB: { klass: TokenClass.Punctuator, name: '-=' },
  ASSIGN_MUL: { klass: TokenClass.Punctuator, name: '*=' },
  ASSIGN_DIV: { klass: TokenClass.Punctuator, name: '/=' },
  ASSIGN_MOD: { klass: TokenClass.Punctuator, name: '%=' },
  ASSIGN_EXP: { klass: TokenClass.Punctuator, name: '**=' },
  COMMA: { klass: TokenClass.Punctuator, name: ',' },
  OR: { klass: TokenClass.Punctuator, name: '||' },
  AND: { klass: TokenClass.Punctuator, name: '&&' },
  BIT_OR: { klass: TokenClass.Punctuator, name: '|' },
  BIT_XOR: { klass: TokenClass.Punctuator, name: '^' },
  BIT_AND: { klass: TokenClass.Punctuator, name: '&' },
  SHL: { klass: TokenClass.Punctuator, name: '<<' },
  SHR: { klass: TokenClass.Punctuator, name: '>>' },
  SHR_UNSIGNED: { klass: TokenClass.Punctuator, name: '>>>' },
  ADD: { klass: TokenClass.Punctuator, name: '+' },
  SUB: { klass: TokenClass.Punctuator, name: '-' },
  MUL: { klass: TokenClass.Punctuator, name: '*' },
  DIV: { klass: TokenClass.Punctuator, name: '/' },
  MOD: { klass: TokenClass.Punctuator, name: '%' },
  EXP: { klass: TokenClass.Punctuator, name: '**' },
  EQ: { klass: TokenClass.Punctuator, name: '==' },
  NE: { klass: TokenClass.Punctuator, name: '!=' },
  EQ_STRICT: { klass: TokenClass.Punctuator, name: '===' },
  NE_STRICT: { klass: TokenClass.Punctuator, name: '!==' },
  LT: { klass: TokenClass.Punctuator, name: '<' },
  GT: { klass: TokenClass.Punctuator, name: '>' },
  LTE: { klass: TokenClass.Punctuator, name: '<=' },
  GTE: { klass: TokenClass.Punctuator, name: '>=' },
  INSTANCEOF: { klass: TokenClass.Keyword, name: 'instanceof' },
  IN: { klass: TokenClass.Keyword, name: 'in' },
  NOT: { klass: TokenClass.Punctuator, name: '!' },
  BIT_NOT: { klass: TokenClass.Punctuator, name: '~' },
  ASYNC: { klass: TokenClass.Keyword, name: 'async' },
  AWAIT: { klass: TokenClass.Keyword, name: 'await' },
  ENUM: { klass: TokenClass.Keyword, name: 'enum' },
  DELETE: { klass: TokenClass.Keyword, name: 'delete' },
  TYPEOF: { klass: TokenClass.Keyword, name: 'typeof' },
  VOID: { klass: TokenClass.Keyword, name: 'void' },
  BREAK: { klass: TokenClass.Keyword, name: 'break' },
  CASE: { klass: TokenClass.Keyword, name: 'case' },
  CATCH: { klass: TokenClass.Keyword, name: 'catch' },
  CLASS: { klass: TokenClass.Keyword, name: 'class' },
  CONTINUE: { klass: TokenClass.Keyword, name: 'continue' },
  DEBUGGER: { klass: TokenClass.Keyword, name: 'debugger' },
  DEFAULT: { klass: TokenClass.Keyword, name: 'default' },
  DO: { klass: TokenClass.Keyword, name: 'do' },
  ELSE: { klass: TokenClass.Keyword, name: 'else' },
  EXPORT: { klass: TokenClass.Keyword, name: 'export' },
  EXTENDS: { klass: TokenClass.Keyword, name: 'extends' },
  FINALLY: { klass: TokenClass.Keyword, name: 'finally' },
  FOR: { klass: TokenClass.Keyword, name: 'for' },
  FUNCTION: { klass: TokenClass.Keyword, name: 'function' },
  IF: { klass: TokenClass.Keyword, name: 'if' },
  IMPORT: { klass: TokenClass.Keyword, name: 'import' },
  LET: { klass: TokenClass.Keyword, name: 'let' },
  NEW: { klass: TokenClass.Keyword, name: 'new' },
  RETURN: { klass: TokenClass.Keyword, name: 'return' },
  SUPER: { klass: TokenClass.Keyword, name: 'super' },
  SWITCH: { klass: TokenClass.Keyword, name: 'switch' },
  THIS: { klass: TokenClass.Keyword, name: 'this' },
  THROW: { klass: TokenClass.Keyword, name: 'throw' },
  TRY: { klass: TokenClass.Keyword, name: 'try' },
  VAR: { klass: TokenClass.Keyword, name: 'var' },
  WHILE: { klass: TokenClass.Keyword, name: 'while' },
  WITH: { klass: TokenClass.Keyword, name: 'with' },
  NULL: { klass: TokenClass.Keyword, name: 'null' },
  TRUE: { klass: TokenClass.Keyword, name: 'true' },
  FALSE: { klass: TokenClass.Keyword, name: 'false' },
  YIELD: { klass: TokenClass.Keyword, name: 'yield' },
  NUMBER: { klass: TokenClass.NumericLiteral, name: '' },
  STRING: { klass: TokenClass.StringLiteral, name: '' },
  REGEXP: { klass: TokenClass.RegularExpression, name: '' },
  IDENTIFIER: { klass: TokenClass.Ident, name: '' },
  CONST: { klass: TokenClass.Keyword, name: 'const' },
  TEMPLATE: { klass: TokenClass.TemplateElement, name: '' },
  ESCAPED_KEYWORD: { klass: TokenClass.Keyword, name: '' },
  ILLEGAL: { klass: TokenClass.Illegal, name: '' }
};

var TT = TokenType;
var I = TT.ILLEGAL;
var F = false;
var T = true;

var ONE_CHAR_PUNCTUATOR = [I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, TT.NOT, I, I, I, TT.MOD, TT.BIT_AND, I, TT.LPAREN, TT.RPAREN, TT.MUL, TT.ADD, TT.COMMA, TT.SUB, TT.PERIOD, TT.DIV, I, I, I, I, I, I, I, I, I, I, TT.COLON, TT.SEMICOLON, TT.LT, TT.ASSIGN, TT.GT, TT.CONDITIONAL, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, TT.LBRACK, I, TT.RBRACK, TT.BIT_XOR, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, TT.LBRACE, TT.BIT_OR, TT.RBRACE, TT.BIT_NOT];

var PUNCTUATOR_START = [F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, T, F, F, F, T, T, F, T, T, T, T, T, T, F, T, F, F, F, F, F, F, F, F, F, F, T, T, T, T, T, T, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, T, F, T, T, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, T, T, T, T, F];

var JsError = tokenizer.JsError = function (_Error) {
  _inherits$8(JsError, _Error);

  function JsError(index, line, column, msg) {
    _classCallCheck$i(this, JsError);

    var _this = _possibleConstructorReturn$8(this, (JsError.__proto__ || Object.getPrototypeOf(JsError)).call(this, msg));

    _this.index = index;
    // Safari defines these properties as non-writable and non-configurable on Error objects
    try {
      _this.line = line;
      _this.column = column;
    } catch (e) {}
    // define these as well so Safari still has access to this info
    _this.parseErrorLine = line;
    _this.parseErrorColumn = column;
    _this.description = msg;
    _this.message = '[' + line + ':' + column + ']: ' + msg;
    return _this;
  }

  return JsError;
}(Error);

function fromCodePoint(cp) {
  if (cp <= 0xFFFF) return String.fromCharCode(cp);
  var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);
  var cu2 = String.fromCharCode((cp - 0x10000) % 0x400 + 0xDC00);
  return cu1 + cu2;
}

function decodeUtf16(lead, trail) {
  return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
}

var Tokenizer = function () {
  function Tokenizer(source) {
    _classCallCheck$i(this, Tokenizer);

    this.source = source;
    this.index = 0;
    this.line = 0;
    this.lineStart = 0;
    this.startIndex = 0;
    this.startLine = 0;
    this.startLineStart = 0;
    this.lastIndex = 0;
    this.lastLine = 0;
    this.lastLineStart = 0;
    this.hasLineTerminatorBeforeNext = false;
    this.tokenIndex = 0;
  }

  _createClass$e(Tokenizer, [{
    key: 'saveLexerState',
    value: function saveLexerState() {
      return {
        source: this.source,
        index: this.index,
        line: this.line,
        lineStart: this.lineStart,
        startIndex: this.startIndex,
        startLine: this.startLine,
        startLineStart: this.startLineStart,
        lastIndex: this.lastIndex,
        lastLine: this.lastLine,
        lastLineStart: this.lastLineStart,
        lookahead: this.lookahead,
        hasLineTerminatorBeforeNext: this.hasLineTerminatorBeforeNext,
        tokenIndex: this.tokenIndex
      };
    }
  }, {
    key: 'restoreLexerState',
    value: function restoreLexerState(state) {
      this.source = state.source;
      this.index = state.index;
      this.line = state.line;
      this.lineStart = state.lineStart;
      this.startIndex = state.startIndex;
      this.startLine = state.startLine;
      this.startLineStart = state.startLineStart;
      this.lastIndex = state.lastIndex;
      this.lastLine = state.lastLine;
      this.lastLineStart = state.lastLineStart;
      this.lookahead = state.lookahead;
      this.hasLineTerminatorBeforeNext = state.hasLineTerminatorBeforeNext;
      this.tokenIndex = state.tokenIndex;
    }
  }, {
    key: 'createILLEGAL',
    value: function createILLEGAL() {
      this.startIndex = this.index;
      this.startLine = this.line;
      this.startLineStart = this.lineStart;
      return this.index < this.source.length ? this.createError(_errors$2.ErrorMessages.UNEXPECTED_ILLEGAL_TOKEN, this.source.charAt(this.index)) : this.createError(_errors$2.ErrorMessages.UNEXPECTED_EOS);
    }
  }, {
    key: 'createUnexpected',
    value: function createUnexpected(token) {
      switch (token.type.klass) {
        case TokenClass.Eof:
          return this.createError(_errors$2.ErrorMessages.UNEXPECTED_EOS);
        case TokenClass.Ident:
          return this.createError(_errors$2.ErrorMessages.UNEXPECTED_IDENTIFIER);
        case TokenClass.Keyword:
          if (token.type === TokenType.ESCAPED_KEYWORD) {
            return this.createError(_errors$2.ErrorMessages.UNEXPECTED_ESCAPED_KEYWORD);
          }
          return this.createError(_errors$2.ErrorMessages.UNEXPECTED_TOKEN, token.slice.text);
        case TokenClass.NumericLiteral:
          return this.createError(_errors$2.ErrorMessages.UNEXPECTED_NUMBER);
        case TokenClass.TemplateElement:
          return this.createError(_errors$2.ErrorMessages.UNEXPECTED_TEMPLATE);
        case TokenClass.Punctuator:
          return this.createError(_errors$2.ErrorMessages.UNEXPECTED_TOKEN, token.type.name);
        case TokenClass.StringLiteral:
          return this.createError(_errors$2.ErrorMessages.UNEXPECTED_STRING);
        // the other token classes are RegularExpression and Illegal, but they cannot reach here
      }
      // istanbul ignore next
      throw new Error('Unreachable: unexpected token of class ' + token.type.klass);
    }
  }, {
    key: 'createError',
    value: function createError(message) {
      var msg = void 0;
      if (typeof message === 'function') {
        for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          params[_key - 1] = arguments[_key];
        }

        msg = message.apply(undefined, params);
      } else {
        msg = message;
      }
      return new JsError(this.startIndex, this.startLine + 1, this.startIndex - this.startLineStart + 1, msg);
    }
  }, {
    key: 'createErrorWithLocation',
    value: function createErrorWithLocation(location, message) {
      var _arguments = arguments;

      /* istanbul ignore next */
      var msg = message.replace(/\{(\d+)\}/g, function (_, n) {
        return JSON.stringify(_arguments[+n + 2]);
      });
      if (location.slice && location.slice.startLocation) {
        location = location.slice.startLocation;
      }
      return new JsError(location.offset, location.line, location.column + 1, msg);
    }
  }, {
    key: 'getKeyword',
    value: function getKeyword(id) {
      if (id.length === 1 || id.length > 10) {
        return TokenType.IDENTIFIER;
      }

      /* istanbul ignore next */
      switch (id.length) {
        case 2:
          switch (id.charAt(0)) {
            case 'i':
              switch (id.charAt(1)) {
                case 'f':
                  return TokenType.IF;
                case 'n':
                  return TokenType.IN;
              }
              break;
            case 'd':
              if (id.charAt(1) === 'o') {
                return TokenType.DO;
              }
              break;
          }
          break;
        case 3:
          switch (id.charAt(0)) {
            case 'v':
              if (Tokenizer.cse2(id, 'a', 'r')) {
                return TokenType.VAR;
              }
              break;
            case 'f':
              if (Tokenizer.cse2(id, 'o', 'r')) {
                return TokenType.FOR;
              }
              break;
            case 'n':
              if (Tokenizer.cse2(id, 'e', 'w')) {
                return TokenType.NEW;
              }
              break;
            case 't':
              if (Tokenizer.cse2(id, 'r', 'y')) {
                return TokenType.TRY;
              }
              break;
            case 'l':
              if (Tokenizer.cse2(id, 'e', 't')) {
                return TokenType.LET;
              }
              break;
          }
          break;
        case 4:
          switch (id.charAt(0)) {
            case 't':
              if (Tokenizer.cse3(id, 'h', 'i', 's')) {
                return TokenType.THIS;
              } else if (Tokenizer.cse3(id, 'r', 'u', 'e')) {
                return TokenType.TRUE;
              }
              break;
            case 'n':
              if (Tokenizer.cse3(id, 'u', 'l', 'l')) {
                return TokenType.NULL;
              }
              break;
            case 'e':
              if (Tokenizer.cse3(id, 'l', 's', 'e')) {
                return TokenType.ELSE;
              } else if (Tokenizer.cse3(id, 'n', 'u', 'm')) {
                return TokenType.ENUM;
              }
              break;
            case 'c':
              if (Tokenizer.cse3(id, 'a', 's', 'e')) {
                return TokenType.CASE;
              }
              break;
            case 'v':
              if (Tokenizer.cse3(id, 'o', 'i', 'd')) {
                return TokenType.VOID;
              }
              break;
            case 'w':
              if (Tokenizer.cse3(id, 'i', 't', 'h')) {
                return TokenType.WITH;
              }
              break;
          }
          break;
        case 5:
          switch (id.charAt(0)) {
            case 'a':
              if (Tokenizer.cse4(id, 's', 'y', 'n', 'c')) {
                return TokenType.ASYNC;
              }
              if (Tokenizer.cse4(id, 'w', 'a', 'i', 't')) {
                return TokenType.AWAIT;
              }
              break;
            case 'w':
              if (Tokenizer.cse4(id, 'h', 'i', 'l', 'e')) {
                return TokenType.WHILE;
              }
              break;
            case 'b':
              if (Tokenizer.cse4(id, 'r', 'e', 'a', 'k')) {
                return TokenType.BREAK;
              }
              break;
            case 'f':
              if (Tokenizer.cse4(id, 'a', 'l', 's', 'e')) {
                return TokenType.FALSE;
              }
              break;
            case 'c':
              if (Tokenizer.cse4(id, 'a', 't', 'c', 'h')) {
                return TokenType.CATCH;
              } else if (Tokenizer.cse4(id, 'o', 'n', 's', 't')) {
                return TokenType.CONST;
              } else if (Tokenizer.cse4(id, 'l', 'a', 's', 's')) {
                return TokenType.CLASS;
              }
              break;
            case 't':
              if (Tokenizer.cse4(id, 'h', 'r', 'o', 'w')) {
                return TokenType.THROW;
              }
              break;
            case 'y':
              if (Tokenizer.cse4(id, 'i', 'e', 'l', 'd')) {
                return TokenType.YIELD;
              }
              break;
            case 's':
              if (Tokenizer.cse4(id, 'u', 'p', 'e', 'r')) {
                return TokenType.SUPER;
              }
              break;
          }
          break;
        case 6:
          switch (id.charAt(0)) {
            case 'r':
              if (Tokenizer.cse5(id, 'e', 't', 'u', 'r', 'n')) {
                return TokenType.RETURN;
              }
              break;
            case 't':
              if (Tokenizer.cse5(id, 'y', 'p', 'e', 'o', 'f')) {
                return TokenType.TYPEOF;
              }
              break;
            case 'd':
              if (Tokenizer.cse5(id, 'e', 'l', 'e', 't', 'e')) {
                return TokenType.DELETE;
              }
              break;
            case 's':
              if (Tokenizer.cse5(id, 'w', 'i', 't', 'c', 'h')) {
                return TokenType.SWITCH;
              }
              break;
            case 'e':
              if (Tokenizer.cse5(id, 'x', 'p', 'o', 'r', 't')) {
                return TokenType.EXPORT;
              }
              break;
            case 'i':
              if (Tokenizer.cse5(id, 'm', 'p', 'o', 'r', 't')) {
                return TokenType.IMPORT;
              }
              break;
          }
          break;
        case 7:
          switch (id.charAt(0)) {
            case 'd':
              if (Tokenizer.cse6(id, 'e', 'f', 'a', 'u', 'l', 't')) {
                return TokenType.DEFAULT;
              }
              break;
            case 'f':
              if (Tokenizer.cse6(id, 'i', 'n', 'a', 'l', 'l', 'y')) {
                return TokenType.FINALLY;
              }
              break;
            case 'e':
              if (Tokenizer.cse6(id, 'x', 't', 'e', 'n', 'd', 's')) {
                return TokenType.EXTENDS;
              }
              break;
          }
          break;
        case 8:
          switch (id.charAt(0)) {
            case 'f':
              if (Tokenizer.cse7(id, 'u', 'n', 'c', 't', 'i', 'o', 'n')) {
                return TokenType.FUNCTION;
              }
              break;
            case 'c':
              if (Tokenizer.cse7(id, 'o', 'n', 't', 'i', 'n', 'u', 'e')) {
                return TokenType.CONTINUE;
              }
              break;
            case 'd':
              if (Tokenizer.cse7(id, 'e', 'b', 'u', 'g', 'g', 'e', 'r')) {
                return TokenType.DEBUGGER;
              }
              break;
          }
          break;
        case 10:
          if (id === 'instanceof') {
            return TokenType.INSTANCEOF;
          }
          break;
      }
      return TokenType.IDENTIFIER;
    }
  }, {
    key: 'skipSingleLineComment',
    value: function skipSingleLineComment(offset) {
      this.index += offset;
      while (this.index < this.source.length) {
        /**
         * @type {Number}
         */
        var chCode = this.source.charCodeAt(this.index);
        this.index++;
        if ((0, _utils$1.isLineTerminator)(chCode)) {
          this.hasLineTerminatorBeforeNext = true;
          if (chCode === 0xD /* "\r" */ && this.source.charCodeAt(this.index) === 0xA /* "\n" */) {
              this.index++;
            }
          this.lineStart = this.index;
          this.line++;
          return;
        }
      }
    }
  }, {
    key: 'skipMultiLineComment',
    value: function skipMultiLineComment() {
      this.index += 2;
      var length = this.source.length;
      var isLineStart = false;
      while (this.index < length) {
        var chCode = this.source.charCodeAt(this.index);
        if (chCode < 0x80) {
          switch (chCode) {
            case 42:
              // "*"
              // Block comment ends with "*/".
              if (this.source.charAt(this.index + 1) === '/') {
                this.index = this.index + 2;
                return isLineStart;
              }
              this.index++;
              break;
            case 10:
              // "\n"
              isLineStart = true;
              this.hasLineTerminatorBeforeNext = true;
              this.index++;
              this.lineStart = this.index;
              this.line++;
              break;
            case 13:
              // "\r":
              isLineStart = true;
              this.hasLineTerminatorBeforeNext = true;
              if (this.source.charAt(this.index + 1) === '\n') {
                this.index++;
              }
              this.index++;
              this.lineStart = this.index;
              this.line++;
              break;
            default:
              this.index++;
          }
        } else if (chCode === 0x2028 || chCode === 0x2029) {
          isLineStart = true;
          this.hasLineTerminatorBeforeNext = true;
          this.index++;
          this.lineStart = this.index;
          this.line++;
        } else {
          this.index++;
        }
      }
      throw this.createILLEGAL();
    }
  }, {
    key: 'skipComment',
    value: function skipComment() {
      this.hasLineTerminatorBeforeNext = false;

      var isLineStart = this.index === 0;
      var length = this.source.length;

      while (this.index < length) {
        var chCode = this.source.charCodeAt(this.index);
        if ((0, _utils$1.isWhiteSpace)(chCode)) {
          this.index++;
        } else if ((0, _utils$1.isLineTerminator)(chCode)) {
          this.hasLineTerminatorBeforeNext = true;
          this.index++;
          if (chCode === 13 /* "\r" */ && this.source.charAt(this.index) === '\n') {
            this.index++;
          }
          this.lineStart = this.index;
          this.line++;
          isLineStart = true;
        } else if (chCode === 47 /* "/" */) {
            if (this.index + 1 >= length) {
              break;
            }
            chCode = this.source.charCodeAt(this.index + 1);
            if (chCode === 47 /* "/" */) {
                this.skipSingleLineComment(2);
                isLineStart = true;
              } else if (chCode === 42 /* "*" */) {
                isLineStart = this.skipMultiLineComment() || isLineStart;
              } else {
              break;
            }
          } else if (!this.moduleIsTheGoalSymbol && isLineStart && chCode === 45 /* "-" */) {
            if (this.index + 2 >= length) {
              break;
            }
            // U+003E is ">"
            if (this.source.charAt(this.index + 1) === '-' && this.source.charAt(this.index + 2) === '>') {
              // "-->" is a single-line comment
              this.skipSingleLineComment(3);
            } else {
              break;
            }
          } else if (!this.moduleIsTheGoalSymbol && chCode === 60 /* "<" */) {
            if (this.source.slice(this.index + 1, this.index + 4) === '!--') {
              this.skipSingleLineComment(4);
              isLineStart = true;
            } else {
              break;
            }
          } else {
          break;
        }
      }
    }
  }, {
    key: 'scanHexEscape2',
    value: function scanHexEscape2() {
      if (this.index + 2 > this.source.length) {
        return -1;
      }
      var r1 = (0, _utils$1.getHexValue)(this.source.charAt(this.index));
      if (r1 === -1) {
        return -1;
      }
      var r2 = (0, _utils$1.getHexValue)(this.source.charAt(this.index + 1));
      if (r2 === -1) {
        return -1;
      }
      this.index += 2;
      return r1 << 4 | r2;
    }
  }, {
    key: 'scanUnicode',
    value: function scanUnicode() {
      if (this.source.charAt(this.index) === '{') {
        // \u{HexDigits}
        var i = this.index + 1;
        var hexDigits = 0,
            ch = void 0;
        while (i < this.source.length) {
          ch = this.source.charAt(i);
          var hex = (0, _utils$1.getHexValue)(ch);
          if (hex === -1) {
            break;
          }
          hexDigits = hexDigits << 4 | hex;
          if (hexDigits > 0x10FFFF) {
            throw this.createILLEGAL();
          }
          i++;
        }
        if (ch !== '}') {
          throw this.createILLEGAL();
        }
        if (i === this.index + 1) {
          ++this.index; // This is so that the error is 'Unexpected "}"' instead of 'Unexpected "{"'.
          throw this.createILLEGAL();
        }
        this.index = i + 1;
        return hexDigits;
      }
      // \uHex4Digits
      if (this.index + 4 > this.source.length) {
        return -1;
      }
      var r1 = (0, _utils$1.getHexValue)(this.source.charAt(this.index));
      if (r1 === -1) {
        return -1;
      }
      var r2 = (0, _utils$1.getHexValue)(this.source.charAt(this.index + 1));
      if (r2 === -1) {
        return -1;
      }
      var r3 = (0, _utils$1.getHexValue)(this.source.charAt(this.index + 2));
      if (r3 === -1) {
        return -1;
      }
      var r4 = (0, _utils$1.getHexValue)(this.source.charAt(this.index + 3));
      if (r4 === -1) {
        return -1;
      }
      this.index += 4;
      return r1 << 12 | r2 << 8 | r3 << 4 | r4;
    }
  }, {
    key: 'getEscapedIdentifier',
    value: function getEscapedIdentifier() {
      var id = '';
      var check = _utils$1.isIdentifierStart;

      while (this.index < this.source.length) {
        var ch = this.source.charAt(this.index);
        var code = ch.charCodeAt(0);
        var start = this.index;
        ++this.index;
        if (ch === '\\') {
          if (this.index >= this.source.length) {
            throw this.createILLEGAL();
          }
          if (this.source.charAt(this.index) !== 'u') {
            throw this.createILLEGAL();
          }
          ++this.index;
          code = this.scanUnicode();
          if (code < 0) {
            throw this.createILLEGAL();
          }
          ch = fromCodePoint(code);
        } else if (code >= 0xD800 && code <= 0xDBFF) {
          if (this.index >= this.source.length) {
            throw this.createILLEGAL();
          }
          var lowSurrogateCode = this.source.charCodeAt(this.index);
          ++this.index;
          if (!(lowSurrogateCode >= 0xDC00 && lowSurrogateCode <= 0xDFFF)) {
            throw this.createILLEGAL();
          }
          code = decodeUtf16(code, lowSurrogateCode);
          ch = fromCodePoint(code);
        }
        if (!check(code)) {
          if (id.length < 1) {
            throw this.createILLEGAL();
          }
          this.index = start;
          return id;
        }
        check = _utils$1.isIdentifierPart;
        id += ch;
      }
      return id;
    }
  }, {
    key: 'getIdentifier',
    value: function getIdentifier() {
      var start = this.index;
      var l = this.source.length;
      var i = this.index;
      var check = _utils$1.isIdentifierStart;
      while (i < l) {
        var ch = this.source.charAt(i);
        var code = ch.charCodeAt(0);
        if (ch === '\\' || code >= 0xD800 && code <= 0xDBFF) {
          // Go back and try the hard one.
          this.index = start;
          return this.getEscapedIdentifier();
        }
        if (!check(code)) {
          this.index = i;
          return this.source.slice(start, i);
        }
        ++i;
        check = _utils$1.isIdentifierPart;
      }
      this.index = i;
      return this.source.slice(start, i);
    }
  }, {
    key: 'scanIdentifier',
    value: function scanIdentifier() {
      var startLocation = this.getLocation();
      var start = this.index;

      // Backslash (U+005C) starts an escaped character.
      var id = this.source.charAt(this.index) === '\\' ? this.getEscapedIdentifier() : this.getIdentifier();

      var slice = this.getSlice(start, startLocation);
      slice.text = id;
      var hasEscape = this.index - start !== id.length;

      var type = this.getKeyword(id);
      if (hasEscape && type !== TokenType.IDENTIFIER) {
        type = TokenType.ESCAPED_KEYWORD;
      }
      return { type: type, value: id, slice: slice, escaped: hasEscape };
    }
  }, {
    key: 'getLocation',
    value: function getLocation() {
      return {
        line: this.startLine + 1,
        column: this.startIndex - this.startLineStart,
        offset: this.startIndex
      };
    }
  }, {
    key: 'getLastTokenEndLocation',
    value: function getLastTokenEndLocation() {
      return {
        line: this.lastLine + 1,
        column: this.lastIndex - this.lastLineStart,
        offset: this.lastIndex
      };
    }
  }, {
    key: 'getSlice',
    value: function getSlice(start, startLocation) {
      return { text: this.source.slice(start, this.index), start: start, startLocation: startLocation, end: this.index };
    }
  }, {
    key: 'scanPunctuatorHelper',
    value: function scanPunctuatorHelper() {
      var ch1 = this.source.charAt(this.index);

      switch (ch1) {
        // Check for most common single-character punctuators.
        case '.':
          {
            var ch2 = this.source.charAt(this.index + 1);
            if (ch2 !== '.') return TokenType.PERIOD;
            var ch3 = this.source.charAt(this.index + 2);
            if (ch3 !== '.') return TokenType.PERIOD;
            return TokenType.ELLIPSIS;
          }
        case '(':
          return TokenType.LPAREN;
        case ')':
        case ';':
        case ',':
          return ONE_CHAR_PUNCTUATOR[ch1.charCodeAt(0)];
        case '{':
          return TokenType.LBRACE;
        case '}':
        case '[':
        case ']':
        case ':':
        case '?':
        case '~':
          return ONE_CHAR_PUNCTUATOR[ch1.charCodeAt(0)];
        default:
          // "=" (U+003D) marks an assignment or comparison operator.
          if (this.index + 1 < this.source.length && this.source.charAt(this.index + 1) === '=') {
            switch (ch1) {
              case '=':
                if (this.index + 2 < this.source.length && this.source.charAt(this.index + 2) === '=') {
                  return TokenType.EQ_STRICT;
                }
                return TokenType.EQ;
              case '!':
                if (this.index + 2 < this.source.length && this.source.charAt(this.index + 2) === '=') {
                  return TokenType.NE_STRICT;
                }
                return TokenType.NE;
              case '|':
                return TokenType.ASSIGN_BIT_OR;
              case '+':
                return TokenType.ASSIGN_ADD;
              case '-':
                return TokenType.ASSIGN_SUB;
              case '*':
                return TokenType.ASSIGN_MUL;
              case '<':
                return TokenType.LTE;
              case '>':
                return TokenType.GTE;
              case '/':
                return TokenType.ASSIGN_DIV;
              case '%':
                return TokenType.ASSIGN_MOD;
              case '^':
                return TokenType.ASSIGN_BIT_XOR;
              case '&':
                return TokenType.ASSIGN_BIT_AND;
            }
          }
      }

      if (this.index + 1 < this.source.length) {
        var _ch = this.source.charAt(this.index + 1);
        if (ch1 === _ch) {
          if (this.index + 2 < this.source.length) {
            var _ch2 = this.source.charAt(this.index + 2);
            if (ch1 === '>' && _ch2 === '>') {
              // 4-character punctuator: >>>=
              if (this.index + 3 < this.source.length && this.source.charAt(this.index + 3) === '=') {
                return TokenType.ASSIGN_SHR_UNSIGNED;
              }
              return TokenType.SHR_UNSIGNED;
            }

            if (ch1 === '<' && _ch2 === '=') {
              return TokenType.ASSIGN_SHL;
            }

            if (ch1 === '>' && _ch2 === '=') {
              return TokenType.ASSIGN_SHR;
            }

            if (ch1 === '*' && _ch2 === '=') {
              return TokenType.ASSIGN_EXP;
            }
          }
          // Other 2-character punctuators: ++ -- << >> && ||
          switch (ch1) {
            case '*':
              return TokenType.EXP;
            case '+':
              return TokenType.INC;
            case '-':
              return TokenType.DEC;
            case '<':
              return TokenType.SHL;
            case '>':
              return TokenType.SHR;
            case '&':
              return TokenType.AND;
            case '|':
              return TokenType.OR;
          }
        } else if (ch1 === '=' && _ch === '>') {
          return TokenType.ARROW;
        }
      }

      return ONE_CHAR_PUNCTUATOR[ch1.charCodeAt(0)];
    }

    // 7.7 Punctuators

  }, {
    key: 'scanPunctuator',
    value: function scanPunctuator() {
      var startLocation = this.getLocation();
      var start = this.index;
      var subType = this.scanPunctuatorHelper();
      this.index += subType.name.length;
      return { type: subType, value: subType.name, slice: this.getSlice(start, startLocation) };
    }
  }, {
    key: 'scanHexLiteral',
    value: function scanHexLiteral(start, startLocation) {
      var i = this.index;
      while (i < this.source.length) {
        var ch = this.source.charAt(i);
        var hex = (0, _utils$1.getHexValue)(ch);
        if (hex === -1) {
          break;
        }
        i++;
      }

      if (this.index === i) {
        throw this.createILLEGAL();
      }

      if (i < this.source.length && (0, _utils$1.isIdentifierStart)(this.source.charCodeAt(i))) {
        throw this.createILLEGAL();
      }

      this.index = i;

      var slice = this.getSlice(start, startLocation);
      return { type: TokenType.NUMBER, value: parseInt(slice.text.substr(2), 16), slice: slice };
    }
  }, {
    key: 'scanBinaryLiteral',
    value: function scanBinaryLiteral(start, startLocation) {
      var offset = this.index - start;

      while (this.index < this.source.length) {
        var ch = this.source.charAt(this.index);
        if (ch !== '0' && ch !== '1') {
          break;
        }
        this.index++;
      }

      if (this.index - start <= offset) {
        throw this.createILLEGAL();
      }

      if (this.index < this.source.length && ((0, _utils$1.isIdentifierStart)(this.source.charCodeAt(this.index)) || (0, _utils$1.isDecimalDigit)(this.source.charCodeAt(this.index)))) {
        throw this.createILLEGAL();
      }

      return {
        type: TokenType.NUMBER,
        value: parseInt(this.getSlice(start, startLocation).text.substr(offset), 2),
        slice: this.getSlice(start, startLocation),
        octal: false,
        noctal: false
      };
    }
  }, {
    key: 'scanOctalLiteral',
    value: function scanOctalLiteral(start, startLocation) {
      while (this.index < this.source.length) {
        var ch = this.source.charAt(this.index);
        if (ch >= '0' && ch <= '7') {
          this.index++;
        } else if ((0, _utils$1.isIdentifierPart)(ch.charCodeAt(0))) {
          throw this.createILLEGAL();
        } else {
          break;
        }
      }

      if (this.index - start === 2) {
        throw this.createILLEGAL();
      }

      return {
        type: TokenType.NUMBER,
        value: parseInt(this.getSlice(start, startLocation).text.substr(2), 8),
        slice: this.getSlice(start, startLocation),
        octal: false,
        noctal: false
      };
    }
  }, {
    key: 'scanLegacyOctalLiteral',
    value: function scanLegacyOctalLiteral(start, startLocation) {
      var isOctal = true;

      while (this.index < this.source.length) {
        var ch = this.source.charAt(this.index);
        if (ch >= '0' && ch <= '7') {
          this.index++;
        } else if (ch === '8' || ch === '9') {
          isOctal = false;
          this.index++;
        } else if ((0, _utils$1.isIdentifierPart)(ch.charCodeAt(0))) {
          throw this.createILLEGAL();
        } else {
          break;
        }
      }

      var slice = this.getSlice(start, startLocation);
      if (!isOctal) {
        this.eatDecimalLiteralSuffix();
        return {
          type: TokenType.NUMBER,
          slice: slice,
          value: +slice.text,
          octal: true,
          noctal: !isOctal
        };
      }

      return {
        type: TokenType.NUMBER,
        slice: slice,
        value: parseInt(slice.text.substr(1), 8),
        octal: true,
        noctal: !isOctal
      };
    }
  }, {
    key: 'scanNumericLiteral',
    value: function scanNumericLiteral() {
      var ch = this.source.charAt(this.index);
      // assert(ch === "." || "0" <= ch && ch <= "9")
      var startLocation = this.getLocation();
      var start = this.index;

      if (ch === '0') {
        this.index++;
        if (this.index < this.source.length) {
          ch = this.source.charAt(this.index);
          if (ch === 'x' || ch === 'X') {
            this.index++;
            return this.scanHexLiteral(start, startLocation);
          } else if (ch === 'b' || ch === 'B') {
            this.index++;
            return this.scanBinaryLiteral(start, startLocation);
          } else if (ch === 'o' || ch === 'O') {
            this.index++;
            return this.scanOctalLiteral(start, startLocation);
          } else if (ch >= '0' && ch <= '9') {
            return this.scanLegacyOctalLiteral(start, startLocation);
          }
        } else {
          var _slice = this.getSlice(start, startLocation);
          return {
            type: TokenType.NUMBER,
            value: +_slice.text,
            slice: _slice,
            octal: false,
            noctal: false
          };
        }
      } else if (ch !== '.') {
        // Must be "1".."9"
        ch = this.source.charAt(this.index);
        while (ch >= '0' && ch <= '9') {
          this.index++;
          if (this.index === this.source.length) {
            var _slice2 = this.getSlice(start, startLocation);
            return {
              type: TokenType.NUMBER,
              value: +_slice2.text,
              slice: _slice2,
              octal: false,
              noctal: false
            };
          }
          ch = this.source.charAt(this.index);
        }
      }

      this.eatDecimalLiteralSuffix();

      if (this.index !== this.source.length && (0, _utils$1.isIdentifierStart)(this.source.charCodeAt(this.index))) {
        throw this.createILLEGAL();
      }

      var slice = this.getSlice(start, startLocation);
      return {
        type: TokenType.NUMBER,
        value: +slice.text,
        slice: slice,
        octal: false,
        noctal: false
      };
    }
  }, {
    key: 'eatDecimalLiteralSuffix',
    value: function eatDecimalLiteralSuffix() {
      var ch = this.source.charAt(this.index);
      if (ch === '.') {
        this.index++;
        if (this.index === this.source.length) {
          return;
        }

        ch = this.source.charAt(this.index);
        while (ch >= '0' && ch <= '9') {
          this.index++;
          if (this.index === this.source.length) {
            return;
          }
          ch = this.source.charAt(this.index);
        }
      }

      // EOF not reached here
      if (ch === 'e' || ch === 'E') {
        this.index++;
        if (this.index === this.source.length) {
          throw this.createILLEGAL();
        }

        ch = this.source.charAt(this.index);
        if (ch === '+' || ch === '-') {
          this.index++;
          if (this.index === this.source.length) {
            throw this.createILLEGAL();
          }
          ch = this.source.charAt(this.index);
        }

        if (ch >= '0' && ch <= '9') {
          while (ch >= '0' && ch <= '9') {
            this.index++;
            if (this.index === this.source.length) {
              break;
            }
            ch = this.source.charAt(this.index);
          }
        } else {
          throw this.createILLEGAL();
        }
      }
    }
  }, {
    key: 'scanStringEscape',
    value: function scanStringEscape(str, octal) {
      this.index++;
      if (this.index === this.source.length) {
        throw this.createILLEGAL();
      }
      var ch = this.source.charAt(this.index);
      if ((0, _utils$1.isLineTerminator)(ch.charCodeAt(0))) {
        this.index++;
        if (ch === '\r' && this.source.charAt(this.index) === '\n') {
          this.index++;
        }
        this.lineStart = this.index;
        this.line++;
      } else {
        switch (ch) {
          case 'n':
            str += '\n';
            this.index++;
            break;
          case 'r':
            str += '\r';
            this.index++;
            break;
          case 't':
            str += '\t';
            this.index++;
            break;
          case 'u':
          case 'x':
            {
              var unescaped = void 0;
              this.index++;
              if (this.index >= this.source.length) {
                throw this.createILLEGAL();
              }
              unescaped = ch === 'u' ? this.scanUnicode() : this.scanHexEscape2();
              if (unescaped < 0) {
                throw this.createILLEGAL();
              }
              str += fromCodePoint(unescaped);
              break;
            }
          case 'b':
            str += '\b';
            this.index++;
            break;
          case 'f':
            str += '\f';
            this.index++;
            break;
          case 'v':
            str += '\x0B';
            this.index++;
            break;
          default:
            if (ch >= '0' && ch <= '7') {
              var octalStart = this.index;
              var octLen = 1;
              // 3 digits are only allowed when string starts
              // with 0, 1, 2, 3
              if (ch >= '0' && ch <= '3') {
                octLen = 0;
              }
              var code = 0;
              while (octLen < 3 && ch >= '0' && ch <= '7') {
                this.index++;
                if (octLen > 0 || ch !== '0') {
                  octal = this.source.slice(octalStart, this.index);
                }
                code *= 8;
                code += ch - '0';
                octLen++;
                if (this.index === this.source.length) {
                  throw this.createILLEGAL();
                }
                ch = this.source.charAt(this.index);
              }
              if (code === 0 && octLen === 1 && (ch === '8' || ch === '9')) {
                octal = this.source.slice(octalStart, this.index + 1);
              }
              str += String.fromCharCode(code);
            } else if (ch === '8' || ch === '9') {
              throw this.createILLEGAL();
            } else {
              str += ch;
              this.index++;
            }
        }
      }
      return [str, octal];
    }
    // 7.8.4 String Literals

  }, {
    key: 'scanStringLiteral',
    value: function scanStringLiteral() {
      var str = '';

      var quote = this.source.charAt(this.index);
      //  assert((quote === "\"" || quote === """), "String literal must starts with a quote")

      var startLocation = this.getLocation();
      var start = this.index;
      this.index++;

      var octal = null;
      while (this.index < this.source.length) {
        var ch = this.source.charAt(this.index);
        if (ch === quote) {
          this.index++;
          return { type: TokenType.STRING, slice: this.getSlice(start, startLocation), str: str, octal: octal };
        } else if (ch === '\\') {
          var _scanStringEscape = this.scanStringEscape(str, octal);

          var _scanStringEscape2 = _slicedToArray$1(_scanStringEscape, 2);

          str = _scanStringEscape2[0];
          octal = _scanStringEscape2[1];
        } else if ((0, _utils$1.isLineTerminator)(ch.charCodeAt(0))) {
          throw this.createILLEGAL();
        } else {
          str += ch;
          this.index++;
        }
      }

      throw this.createILLEGAL();
    }
  }, {
    key: 'scanTemplateElement',
    value: function scanTemplateElement() {
      var startLocation = this.getLocation();
      var start = this.index;
      this.index++;
      while (this.index < this.source.length) {
        var ch = this.source.charCodeAt(this.index);
        switch (ch) {
          case 0x60:
            {
              // `
              this.index++;
              return { type: TokenType.TEMPLATE, tail: true, slice: this.getSlice(start, startLocation) };
            }
          case 0x24:
            {
              // $
              if (this.source.charCodeAt(this.index + 1) === 0x7B) {
                // {
                this.index += 2;
                return { type: TokenType.TEMPLATE, tail: false, slice: this.getSlice(start, startLocation) };
              }
              this.index++;
              break;
            }
          case 0x5C:
            {
              // \\
              var octal = this.scanStringEscape('', null)[1];
              if (octal != null) {
                throw this.createError(_errors$2.ErrorMessages.NO_OCTALS_IN_TEMPLATES);
              }
              break;
            }
          case 0x0D:
            {
              // \r
              this.line++;
              this.index++;
              if (this.index < this.source.length && this.source.charAt(this.index) === '\n') {
                this.index++;
              }
              this.lineStart = this.index;
              break;
            }
          case 0x0A: // \r
          case 0x2028:
          case 0x2029:
            {
              this.line++;
              this.index++;
              this.lineStart = this.index;
              break;
            }
          default:
            this.index++;
        }
      }

      throw this.createILLEGAL();
    }
  }, {
    key: 'scanRegExp',
    value: function scanRegExp(str) {
      var startLocation = this.getLocation();
      var start = this.index;

      var terminated = false;
      var classMarker = false;
      while (this.index < this.source.length) {
        var ch = this.source.charAt(this.index);
        if (ch === '\\') {
          str += ch;
          this.index++;
          ch = this.source.charAt(this.index);
          // ECMA-262 7.8.5
          if ((0, _utils$1.isLineTerminator)(ch.charCodeAt(0))) {
            throw this.createError(_errors$2.ErrorMessages.UNTERMINATED_REGEXP);
          }
          str += ch;
          this.index++;
        } else if ((0, _utils$1.isLineTerminator)(ch.charCodeAt(0))) {
          throw this.createError(_errors$2.ErrorMessages.UNTERMINATED_REGEXP);
        } else {
          if (classMarker) {
            if (ch === ']') {
              classMarker = false;
            }
          } else if (ch === '/') {
            terminated = true;
            str += ch;
            this.index++;
            break;
          } else if (ch === '[') {
            classMarker = true;
          }
          str += ch;
          this.index++;
        }
      }

      if (!terminated) {
        throw this.createError(_errors$2.ErrorMessages.UNTERMINATED_REGEXP);
      }

      while (this.index < this.source.length) {
        var _ch3 = this.source.charAt(this.index);
        if (_ch3 === '\\') {
          throw this.createError(_errors$2.ErrorMessages.INVALID_REGEXP_FLAGS);
        }
        if (!(0, _utils$1.isIdentifierPart)(_ch3.charCodeAt(0))) {
          break;
        }
        this.index++;
        str += _ch3;
      }
      return { type: TokenType.REGEXP, value: str, slice: this.getSlice(start, startLocation) };
    }
  }, {
    key: 'advance',
    value: function advance() {
      var startLocation = this.getLocation();

      this.lastIndex = this.index;
      this.lastLine = this.line;
      this.lastLineStart = this.lineStart;

      this.skipComment();

      this.startIndex = this.index;
      this.startLine = this.line;
      this.startLineStart = this.lineStart;

      if (this.lastIndex === 0) {
        this.lastIndex = this.index;
        this.lastLine = this.line;
        this.lastLineStart = this.lineStart;
      }

      if (this.index >= this.source.length) {
        return { type: TokenType.EOS, slice: this.getSlice(this.index, startLocation) };
      }

      var charCode = this.source.charCodeAt(this.index);

      if (charCode < 0x80) {
        if (PUNCTUATOR_START[charCode]) {
          return this.scanPunctuator();
        }

        if ((0, _utils$1.isIdentifierStart)(charCode) || charCode === 0x5C /* backslash (\) */) {
            return this.scanIdentifier();
          }

        // Dot (.) U+002E can also start a floating-point number, hence the need
        // to check the next character.
        if (charCode === 0x2E) {
          if (this.index + 1 < this.source.length && (0, _utils$1.isDecimalDigit)(this.source.charCodeAt(this.index + 1))) {
            return this.scanNumericLiteral();
          }
          return this.scanPunctuator();
        }

        // String literal starts with single quote (U+0027) or double quote (U+0022).
        if (charCode === 0x27 || charCode === 0x22) {
          return this.scanStringLiteral();
        }

        // Template literal starts with back quote (U+0060)
        if (charCode === 0x60) {
          return this.scanTemplateElement();
        }

        if (charCode /* "0" */ >= 0x30 && charCode <= 0x39 /* "9" */) {
            return this.scanNumericLiteral();
          }

        // Slash (/) U+002F can also start a regex.
        throw this.createILLEGAL();
      } else {
        if ((0, _utils$1.isIdentifierStart)(charCode) || charCode >= 0xD800 && charCode <= 0xDBFF) {
          return this.scanIdentifier();
        }

        throw this.createILLEGAL();
      }
    }
  }, {
    key: 'eof',
    value: function eof() {
      return this.lookahead.type === TokenType.EOS;
    }
  }, {
    key: 'lex',
    value: function lex() {
      var prevToken = this.lookahead;
      this.lookahead = this.advance();
      this.tokenIndex++;
      return prevToken;
    }
  }], [{
    key: 'cse2',
    value: function cse2(id, ch1, ch2) {
      return id.charAt(1) === ch1 && id.charAt(2) === ch2;
    }
  }, {
    key: 'cse3',
    value: function cse3(id, ch1, ch2, ch3) {
      return id.charAt(1) === ch1 && id.charAt(2) === ch2 && id.charAt(3) === ch3;
    }
  }, {
    key: 'cse4',
    value: function cse4(id, ch1, ch2, ch3, ch4) {
      return id.charAt(1) === ch1 && id.charAt(2) === ch2 && id.charAt(3) === ch3 && id.charAt(4) === ch4;
    }
  }, {
    key: 'cse5',
    value: function cse5(id, ch1, ch2, ch3, ch4, ch5) {
      return id.charAt(1) === ch1 && id.charAt(2) === ch2 && id.charAt(3) === ch3 && id.charAt(4) === ch4 && id.charAt(5) === ch5;
    }
  }, {
    key: 'cse6',
    value: function cse6(id, ch1, ch2, ch3, ch4, ch5, ch6) {
      return id.charAt(1) === ch1 && id.charAt(2) === ch2 && id.charAt(3) === ch3 && id.charAt(4) === ch4 && id.charAt(5) === ch5 && id.charAt(6) === ch6;
    }
  }, {
    key: 'cse7',
    value: function cse7(id, ch1, ch2, ch3, ch4, ch5, ch6, ch7) {
      return id.charAt(1) === ch1 && id.charAt(2) === ch2 && id.charAt(3) === ch3 && id.charAt(4) === ch4 && id.charAt(5) === ch5 && id.charAt(6) === ch6 && id.charAt(7) === ch7;
    }
  }]);

  return Tokenizer;
}();

tokenizer.default = Tokenizer;

var parser = {};

var dist$7 = {};

var mappings = new Map([
	['General_Category', new Map([
		['C', 'Other'],
		['Cc', 'Control'],
		['cntrl', 'Control'],
		['Cf', 'Format'],
		['Cn', 'Unassigned'],
		['Co', 'Private_Use'],
		['Cs', 'Surrogate'],
		['L', 'Letter'],
		['LC', 'Cased_Letter'],
		['Ll', 'Lowercase_Letter'],
		['Lm', 'Modifier_Letter'],
		['Lo', 'Other_Letter'],
		['Lt', 'Titlecase_Letter'],
		['Lu', 'Uppercase_Letter'],
		['M', 'Mark'],
		['Combining_Mark', 'Mark'],
		['Mc', 'Spacing_Mark'],
		['Me', 'Enclosing_Mark'],
		['Mn', 'Nonspacing_Mark'],
		['N', 'Number'],
		['Nd', 'Decimal_Number'],
		['digit', 'Decimal_Number'],
		['Nl', 'Letter_Number'],
		['No', 'Other_Number'],
		['P', 'Punctuation'],
		['punct', 'Punctuation'],
		['Pc', 'Connector_Punctuation'],
		['Pd', 'Dash_Punctuation'],
		['Pe', 'Close_Punctuation'],
		['Pf', 'Final_Punctuation'],
		['Pi', 'Initial_Punctuation'],
		['Po', 'Other_Punctuation'],
		['Ps', 'Open_Punctuation'],
		['S', 'Symbol'],
		['Sc', 'Currency_Symbol'],
		['Sk', 'Modifier_Symbol'],
		['Sm', 'Math_Symbol'],
		['So', 'Other_Symbol'],
		['Z', 'Separator'],
		['Zl', 'Line_Separator'],
		['Zp', 'Paragraph_Separator'],
		['Zs', 'Space_Separator'],
		['Other', 'Other'],
		['Control', 'Control'],
		['Format', 'Format'],
		['Unassigned', 'Unassigned'],
		['Private_Use', 'Private_Use'],
		['Surrogate', 'Surrogate'],
		['Letter', 'Letter'],
		['Cased_Letter', 'Cased_Letter'],
		['Lowercase_Letter', 'Lowercase_Letter'],
		['Modifier_Letter', 'Modifier_Letter'],
		['Other_Letter', 'Other_Letter'],
		['Titlecase_Letter', 'Titlecase_Letter'],
		['Uppercase_Letter', 'Uppercase_Letter'],
		['Mark', 'Mark'],
		['Spacing_Mark', 'Spacing_Mark'],
		['Enclosing_Mark', 'Enclosing_Mark'],
		['Nonspacing_Mark', 'Nonspacing_Mark'],
		['Number', 'Number'],
		['Decimal_Number', 'Decimal_Number'],
		['Letter_Number', 'Letter_Number'],
		['Other_Number', 'Other_Number'],
		['Punctuation', 'Punctuation'],
		['Connector_Punctuation', 'Connector_Punctuation'],
		['Dash_Punctuation', 'Dash_Punctuation'],
		['Close_Punctuation', 'Close_Punctuation'],
		['Final_Punctuation', 'Final_Punctuation'],
		['Initial_Punctuation', 'Initial_Punctuation'],
		['Other_Punctuation', 'Other_Punctuation'],
		['Open_Punctuation', 'Open_Punctuation'],
		['Symbol', 'Symbol'],
		['Currency_Symbol', 'Currency_Symbol'],
		['Modifier_Symbol', 'Modifier_Symbol'],
		['Math_Symbol', 'Math_Symbol'],
		['Other_Symbol', 'Other_Symbol'],
		['Separator', 'Separator'],
		['Line_Separator', 'Line_Separator'],
		['Paragraph_Separator', 'Paragraph_Separator'],
		['Space_Separator', 'Space_Separator']
	])],
	['Script', new Map([
		['Adlm', 'Adlam'],
		['Aghb', 'Caucasian_Albanian'],
		['Ahom', 'Ahom'],
		['Arab', 'Arabic'],
		['Armi', 'Imperial_Aramaic'],
		['Armn', 'Armenian'],
		['Avst', 'Avestan'],
		['Bali', 'Balinese'],
		['Bamu', 'Bamum'],
		['Bass', 'Bassa_Vah'],
		['Batk', 'Batak'],
		['Beng', 'Bengali'],
		['Bhks', 'Bhaiksuki'],
		['Bopo', 'Bopomofo'],
		['Brah', 'Brahmi'],
		['Brai', 'Braille'],
		['Bugi', 'Buginese'],
		['Buhd', 'Buhid'],
		['Cakm', 'Chakma'],
		['Cans', 'Canadian_Aboriginal'],
		['Cari', 'Carian'],
		['Cham', 'Cham'],
		['Cher', 'Cherokee'],
		['Copt', 'Coptic'],
		['Qaac', 'Coptic'],
		['Cprt', 'Cypriot'],
		['Cyrl', 'Cyrillic'],
		['Deva', 'Devanagari'],
		['Dogr', 'Dogra'],
		['Dsrt', 'Deseret'],
		['Dupl', 'Duployan'],
		['Egyp', 'Egyptian_Hieroglyphs'],
		['Elba', 'Elbasan'],
		['Ethi', 'Ethiopic'],
		['Geor', 'Georgian'],
		['Glag', 'Glagolitic'],
		['Gong', 'Gunjala_Gondi'],
		['Gonm', 'Masaram_Gondi'],
		['Goth', 'Gothic'],
		['Gran', 'Grantha'],
		['Grek', 'Greek'],
		['Gujr', 'Gujarati'],
		['Guru', 'Gurmukhi'],
		['Hang', 'Hangul'],
		['Hani', 'Han'],
		['Hano', 'Hanunoo'],
		['Hatr', 'Hatran'],
		['Hebr', 'Hebrew'],
		['Hira', 'Hiragana'],
		['Hluw', 'Anatolian_Hieroglyphs'],
		['Hmng', 'Pahawh_Hmong'],
		['Hrkt', 'Katakana_Or_Hiragana'],
		['Hung', 'Old_Hungarian'],
		['Ital', 'Old_Italic'],
		['Java', 'Javanese'],
		['Kali', 'Kayah_Li'],
		['Kana', 'Katakana'],
		['Khar', 'Kharoshthi'],
		['Khmr', 'Khmer'],
		['Khoj', 'Khojki'],
		['Knda', 'Kannada'],
		['Kthi', 'Kaithi'],
		['Lana', 'Tai_Tham'],
		['Laoo', 'Lao'],
		['Latn', 'Latin'],
		['Lepc', 'Lepcha'],
		['Limb', 'Limbu'],
		['Lina', 'Linear_A'],
		['Linb', 'Linear_B'],
		['Lisu', 'Lisu'],
		['Lyci', 'Lycian'],
		['Lydi', 'Lydian'],
		['Mahj', 'Mahajani'],
		['Maka', 'Makasar'],
		['Mand', 'Mandaic'],
		['Mani', 'Manichaean'],
		['Marc', 'Marchen'],
		['Medf', 'Medefaidrin'],
		['Mend', 'Mende_Kikakui'],
		['Merc', 'Meroitic_Cursive'],
		['Mero', 'Meroitic_Hieroglyphs'],
		['Mlym', 'Malayalam'],
		['Modi', 'Modi'],
		['Mong', 'Mongolian'],
		['Mroo', 'Mro'],
		['Mtei', 'Meetei_Mayek'],
		['Mult', 'Multani'],
		['Mymr', 'Myanmar'],
		['Narb', 'Old_North_Arabian'],
		['Nbat', 'Nabataean'],
		['Newa', 'Newa'],
		['Nkoo', 'Nko'],
		['Nshu', 'Nushu'],
		['Ogam', 'Ogham'],
		['Olck', 'Ol_Chiki'],
		['Orkh', 'Old_Turkic'],
		['Orya', 'Oriya'],
		['Osge', 'Osage'],
		['Osma', 'Osmanya'],
		['Palm', 'Palmyrene'],
		['Pauc', 'Pau_Cin_Hau'],
		['Perm', 'Old_Permic'],
		['Phag', 'Phags_Pa'],
		['Phli', 'Inscriptional_Pahlavi'],
		['Phlp', 'Psalter_Pahlavi'],
		['Phnx', 'Phoenician'],
		['Plrd', 'Miao'],
		['Prti', 'Inscriptional_Parthian'],
		['Rjng', 'Rejang'],
		['Rohg', 'Hanifi_Rohingya'],
		['Runr', 'Runic'],
		['Samr', 'Samaritan'],
		['Sarb', 'Old_South_Arabian'],
		['Saur', 'Saurashtra'],
		['Sgnw', 'SignWriting'],
		['Shaw', 'Shavian'],
		['Shrd', 'Sharada'],
		['Sidd', 'Siddham'],
		['Sind', 'Khudawadi'],
		['Sinh', 'Sinhala'],
		['Sogd', 'Sogdian'],
		['Sogo', 'Old_Sogdian'],
		['Sora', 'Sora_Sompeng'],
		['Soyo', 'Soyombo'],
		['Sund', 'Sundanese'],
		['Sylo', 'Syloti_Nagri'],
		['Syrc', 'Syriac'],
		['Tagb', 'Tagbanwa'],
		['Takr', 'Takri'],
		['Tale', 'Tai_Le'],
		['Talu', 'New_Tai_Lue'],
		['Taml', 'Tamil'],
		['Tang', 'Tangut'],
		['Tavt', 'Tai_Viet'],
		['Telu', 'Telugu'],
		['Tfng', 'Tifinagh'],
		['Tglg', 'Tagalog'],
		['Thaa', 'Thaana'],
		['Thai', 'Thai'],
		['Tibt', 'Tibetan'],
		['Tirh', 'Tirhuta'],
		['Ugar', 'Ugaritic'],
		['Vaii', 'Vai'],
		['Wara', 'Warang_Citi'],
		['Xpeo', 'Old_Persian'],
		['Xsux', 'Cuneiform'],
		['Yiii', 'Yi'],
		['Zanb', 'Zanabazar_Square'],
		['Zinh', 'Inherited'],
		['Qaai', 'Inherited'],
		['Zyyy', 'Common'],
		['Zzzz', 'Unknown'],
		['Adlam', 'Adlam'],
		['Caucasian_Albanian', 'Caucasian_Albanian'],
		['Arabic', 'Arabic'],
		['Imperial_Aramaic', 'Imperial_Aramaic'],
		['Armenian', 'Armenian'],
		['Avestan', 'Avestan'],
		['Balinese', 'Balinese'],
		['Bamum', 'Bamum'],
		['Bassa_Vah', 'Bassa_Vah'],
		['Batak', 'Batak'],
		['Bengali', 'Bengali'],
		['Bhaiksuki', 'Bhaiksuki'],
		['Bopomofo', 'Bopomofo'],
		['Brahmi', 'Brahmi'],
		['Braille', 'Braille'],
		['Buginese', 'Buginese'],
		['Buhid', 'Buhid'],
		['Chakma', 'Chakma'],
		['Canadian_Aboriginal', 'Canadian_Aboriginal'],
		['Carian', 'Carian'],
		['Cherokee', 'Cherokee'],
		['Coptic', 'Coptic'],
		['Cypriot', 'Cypriot'],
		['Cyrillic', 'Cyrillic'],
		['Devanagari', 'Devanagari'],
		['Dogra', 'Dogra'],
		['Deseret', 'Deseret'],
		['Duployan', 'Duployan'],
		['Egyptian_Hieroglyphs', 'Egyptian_Hieroglyphs'],
		['Elbasan', 'Elbasan'],
		['Ethiopic', 'Ethiopic'],
		['Georgian', 'Georgian'],
		['Glagolitic', 'Glagolitic'],
		['Gunjala_Gondi', 'Gunjala_Gondi'],
		['Masaram_Gondi', 'Masaram_Gondi'],
		['Gothic', 'Gothic'],
		['Grantha', 'Grantha'],
		['Greek', 'Greek'],
		['Gujarati', 'Gujarati'],
		['Gurmukhi', 'Gurmukhi'],
		['Hangul', 'Hangul'],
		['Han', 'Han'],
		['Hanunoo', 'Hanunoo'],
		['Hatran', 'Hatran'],
		['Hebrew', 'Hebrew'],
		['Hiragana', 'Hiragana'],
		['Anatolian_Hieroglyphs', 'Anatolian_Hieroglyphs'],
		['Pahawh_Hmong', 'Pahawh_Hmong'],
		['Katakana_Or_Hiragana', 'Katakana_Or_Hiragana'],
		['Old_Hungarian', 'Old_Hungarian'],
		['Old_Italic', 'Old_Italic'],
		['Javanese', 'Javanese'],
		['Kayah_Li', 'Kayah_Li'],
		['Katakana', 'Katakana'],
		['Kharoshthi', 'Kharoshthi'],
		['Khmer', 'Khmer'],
		['Khojki', 'Khojki'],
		['Kannada', 'Kannada'],
		['Kaithi', 'Kaithi'],
		['Tai_Tham', 'Tai_Tham'],
		['Lao', 'Lao'],
		['Latin', 'Latin'],
		['Lepcha', 'Lepcha'],
		['Limbu', 'Limbu'],
		['Linear_A', 'Linear_A'],
		['Linear_B', 'Linear_B'],
		['Lycian', 'Lycian'],
		['Lydian', 'Lydian'],
		['Mahajani', 'Mahajani'],
		['Makasar', 'Makasar'],
		['Mandaic', 'Mandaic'],
		['Manichaean', 'Manichaean'],
		['Marchen', 'Marchen'],
		['Medefaidrin', 'Medefaidrin'],
		['Mende_Kikakui', 'Mende_Kikakui'],
		['Meroitic_Cursive', 'Meroitic_Cursive'],
		['Meroitic_Hieroglyphs', 'Meroitic_Hieroglyphs'],
		['Malayalam', 'Malayalam'],
		['Mongolian', 'Mongolian'],
		['Mro', 'Mro'],
		['Meetei_Mayek', 'Meetei_Mayek'],
		['Multani', 'Multani'],
		['Myanmar', 'Myanmar'],
		['Old_North_Arabian', 'Old_North_Arabian'],
		['Nabataean', 'Nabataean'],
		['Nko', 'Nko'],
		['Nushu', 'Nushu'],
		['Ogham', 'Ogham'],
		['Ol_Chiki', 'Ol_Chiki'],
		['Old_Turkic', 'Old_Turkic'],
		['Oriya', 'Oriya'],
		['Osage', 'Osage'],
		['Osmanya', 'Osmanya'],
		['Palmyrene', 'Palmyrene'],
		['Pau_Cin_Hau', 'Pau_Cin_Hau'],
		['Old_Permic', 'Old_Permic'],
		['Phags_Pa', 'Phags_Pa'],
		['Inscriptional_Pahlavi', 'Inscriptional_Pahlavi'],
		['Psalter_Pahlavi', 'Psalter_Pahlavi'],
		['Phoenician', 'Phoenician'],
		['Miao', 'Miao'],
		['Inscriptional_Parthian', 'Inscriptional_Parthian'],
		['Rejang', 'Rejang'],
		['Hanifi_Rohingya', 'Hanifi_Rohingya'],
		['Runic', 'Runic'],
		['Samaritan', 'Samaritan'],
		['Old_South_Arabian', 'Old_South_Arabian'],
		['Saurashtra', 'Saurashtra'],
		['SignWriting', 'SignWriting'],
		['Shavian', 'Shavian'],
		['Sharada', 'Sharada'],
		['Siddham', 'Siddham'],
		['Khudawadi', 'Khudawadi'],
		['Sinhala', 'Sinhala'],
		['Sogdian', 'Sogdian'],
		['Old_Sogdian', 'Old_Sogdian'],
		['Sora_Sompeng', 'Sora_Sompeng'],
		['Soyombo', 'Soyombo'],
		['Sundanese', 'Sundanese'],
		['Syloti_Nagri', 'Syloti_Nagri'],
		['Syriac', 'Syriac'],
		['Tagbanwa', 'Tagbanwa'],
		['Takri', 'Takri'],
		['Tai_Le', 'Tai_Le'],
		['New_Tai_Lue', 'New_Tai_Lue'],
		['Tamil', 'Tamil'],
		['Tangut', 'Tangut'],
		['Tai_Viet', 'Tai_Viet'],
		['Telugu', 'Telugu'],
		['Tifinagh', 'Tifinagh'],
		['Tagalog', 'Tagalog'],
		['Thaana', 'Thaana'],
		['Tibetan', 'Tibetan'],
		['Tirhuta', 'Tirhuta'],
		['Ugaritic', 'Ugaritic'],
		['Vai', 'Vai'],
		['Warang_Citi', 'Warang_Citi'],
		['Old_Persian', 'Old_Persian'],
		['Cuneiform', 'Cuneiform'],
		['Yi', 'Yi'],
		['Zanabazar_Square', 'Zanabazar_Square'],
		['Inherited', 'Inherited'],
		['Common', 'Common'],
		['Unknown', 'Unknown']
	])],
	['Script_Extensions', new Map([
		['Adlm', 'Adlam'],
		['Aghb', 'Caucasian_Albanian'],
		['Ahom', 'Ahom'],
		['Arab', 'Arabic'],
		['Armi', 'Imperial_Aramaic'],
		['Armn', 'Armenian'],
		['Avst', 'Avestan'],
		['Bali', 'Balinese'],
		['Bamu', 'Bamum'],
		['Bass', 'Bassa_Vah'],
		['Batk', 'Batak'],
		['Beng', 'Bengali'],
		['Bhks', 'Bhaiksuki'],
		['Bopo', 'Bopomofo'],
		['Brah', 'Brahmi'],
		['Brai', 'Braille'],
		['Bugi', 'Buginese'],
		['Buhd', 'Buhid'],
		['Cakm', 'Chakma'],
		['Cans', 'Canadian_Aboriginal'],
		['Cari', 'Carian'],
		['Cham', 'Cham'],
		['Cher', 'Cherokee'],
		['Copt', 'Coptic'],
		['Qaac', 'Coptic'],
		['Cprt', 'Cypriot'],
		['Cyrl', 'Cyrillic'],
		['Deva', 'Devanagari'],
		['Dogr', 'Dogra'],
		['Dsrt', 'Deseret'],
		['Dupl', 'Duployan'],
		['Egyp', 'Egyptian_Hieroglyphs'],
		['Elba', 'Elbasan'],
		['Ethi', 'Ethiopic'],
		['Geor', 'Georgian'],
		['Glag', 'Glagolitic'],
		['Gong', 'Gunjala_Gondi'],
		['Gonm', 'Masaram_Gondi'],
		['Goth', 'Gothic'],
		['Gran', 'Grantha'],
		['Grek', 'Greek'],
		['Gujr', 'Gujarati'],
		['Guru', 'Gurmukhi'],
		['Hang', 'Hangul'],
		['Hani', 'Han'],
		['Hano', 'Hanunoo'],
		['Hatr', 'Hatran'],
		['Hebr', 'Hebrew'],
		['Hira', 'Hiragana'],
		['Hluw', 'Anatolian_Hieroglyphs'],
		['Hmng', 'Pahawh_Hmong'],
		['Hrkt', 'Katakana_Or_Hiragana'],
		['Hung', 'Old_Hungarian'],
		['Ital', 'Old_Italic'],
		['Java', 'Javanese'],
		['Kali', 'Kayah_Li'],
		['Kana', 'Katakana'],
		['Khar', 'Kharoshthi'],
		['Khmr', 'Khmer'],
		['Khoj', 'Khojki'],
		['Knda', 'Kannada'],
		['Kthi', 'Kaithi'],
		['Lana', 'Tai_Tham'],
		['Laoo', 'Lao'],
		['Latn', 'Latin'],
		['Lepc', 'Lepcha'],
		['Limb', 'Limbu'],
		['Lina', 'Linear_A'],
		['Linb', 'Linear_B'],
		['Lisu', 'Lisu'],
		['Lyci', 'Lycian'],
		['Lydi', 'Lydian'],
		['Mahj', 'Mahajani'],
		['Maka', 'Makasar'],
		['Mand', 'Mandaic'],
		['Mani', 'Manichaean'],
		['Marc', 'Marchen'],
		['Medf', 'Medefaidrin'],
		['Mend', 'Mende_Kikakui'],
		['Merc', 'Meroitic_Cursive'],
		['Mero', 'Meroitic_Hieroglyphs'],
		['Mlym', 'Malayalam'],
		['Modi', 'Modi'],
		['Mong', 'Mongolian'],
		['Mroo', 'Mro'],
		['Mtei', 'Meetei_Mayek'],
		['Mult', 'Multani'],
		['Mymr', 'Myanmar'],
		['Narb', 'Old_North_Arabian'],
		['Nbat', 'Nabataean'],
		['Newa', 'Newa'],
		['Nkoo', 'Nko'],
		['Nshu', 'Nushu'],
		['Ogam', 'Ogham'],
		['Olck', 'Ol_Chiki'],
		['Orkh', 'Old_Turkic'],
		['Orya', 'Oriya'],
		['Osge', 'Osage'],
		['Osma', 'Osmanya'],
		['Palm', 'Palmyrene'],
		['Pauc', 'Pau_Cin_Hau'],
		['Perm', 'Old_Permic'],
		['Phag', 'Phags_Pa'],
		['Phli', 'Inscriptional_Pahlavi'],
		['Phlp', 'Psalter_Pahlavi'],
		['Phnx', 'Phoenician'],
		['Plrd', 'Miao'],
		['Prti', 'Inscriptional_Parthian'],
		['Rjng', 'Rejang'],
		['Rohg', 'Hanifi_Rohingya'],
		['Runr', 'Runic'],
		['Samr', 'Samaritan'],
		['Sarb', 'Old_South_Arabian'],
		['Saur', 'Saurashtra'],
		['Sgnw', 'SignWriting'],
		['Shaw', 'Shavian'],
		['Shrd', 'Sharada'],
		['Sidd', 'Siddham'],
		['Sind', 'Khudawadi'],
		['Sinh', 'Sinhala'],
		['Sogd', 'Sogdian'],
		['Sogo', 'Old_Sogdian'],
		['Sora', 'Sora_Sompeng'],
		['Soyo', 'Soyombo'],
		['Sund', 'Sundanese'],
		['Sylo', 'Syloti_Nagri'],
		['Syrc', 'Syriac'],
		['Tagb', 'Tagbanwa'],
		['Takr', 'Takri'],
		['Tale', 'Tai_Le'],
		['Talu', 'New_Tai_Lue'],
		['Taml', 'Tamil'],
		['Tang', 'Tangut'],
		['Tavt', 'Tai_Viet'],
		['Telu', 'Telugu'],
		['Tfng', 'Tifinagh'],
		['Tglg', 'Tagalog'],
		['Thaa', 'Thaana'],
		['Thai', 'Thai'],
		['Tibt', 'Tibetan'],
		['Tirh', 'Tirhuta'],
		['Ugar', 'Ugaritic'],
		['Vaii', 'Vai'],
		['Wara', 'Warang_Citi'],
		['Xpeo', 'Old_Persian'],
		['Xsux', 'Cuneiform'],
		['Yiii', 'Yi'],
		['Zanb', 'Zanabazar_Square'],
		['Zinh', 'Inherited'],
		['Qaai', 'Inherited'],
		['Zyyy', 'Common'],
		['Zzzz', 'Unknown'],
		['Adlam', 'Adlam'],
		['Caucasian_Albanian', 'Caucasian_Albanian'],
		['Arabic', 'Arabic'],
		['Imperial_Aramaic', 'Imperial_Aramaic'],
		['Armenian', 'Armenian'],
		['Avestan', 'Avestan'],
		['Balinese', 'Balinese'],
		['Bamum', 'Bamum'],
		['Bassa_Vah', 'Bassa_Vah'],
		['Batak', 'Batak'],
		['Bengali', 'Bengali'],
		['Bhaiksuki', 'Bhaiksuki'],
		['Bopomofo', 'Bopomofo'],
		['Brahmi', 'Brahmi'],
		['Braille', 'Braille'],
		['Buginese', 'Buginese'],
		['Buhid', 'Buhid'],
		['Chakma', 'Chakma'],
		['Canadian_Aboriginal', 'Canadian_Aboriginal'],
		['Carian', 'Carian'],
		['Cherokee', 'Cherokee'],
		['Coptic', 'Coptic'],
		['Cypriot', 'Cypriot'],
		['Cyrillic', 'Cyrillic'],
		['Devanagari', 'Devanagari'],
		['Dogra', 'Dogra'],
		['Deseret', 'Deseret'],
		['Duployan', 'Duployan'],
		['Egyptian_Hieroglyphs', 'Egyptian_Hieroglyphs'],
		['Elbasan', 'Elbasan'],
		['Ethiopic', 'Ethiopic'],
		['Georgian', 'Georgian'],
		['Glagolitic', 'Glagolitic'],
		['Gunjala_Gondi', 'Gunjala_Gondi'],
		['Masaram_Gondi', 'Masaram_Gondi'],
		['Gothic', 'Gothic'],
		['Grantha', 'Grantha'],
		['Greek', 'Greek'],
		['Gujarati', 'Gujarati'],
		['Gurmukhi', 'Gurmukhi'],
		['Hangul', 'Hangul'],
		['Han', 'Han'],
		['Hanunoo', 'Hanunoo'],
		['Hatran', 'Hatran'],
		['Hebrew', 'Hebrew'],
		['Hiragana', 'Hiragana'],
		['Anatolian_Hieroglyphs', 'Anatolian_Hieroglyphs'],
		['Pahawh_Hmong', 'Pahawh_Hmong'],
		['Katakana_Or_Hiragana', 'Katakana_Or_Hiragana'],
		['Old_Hungarian', 'Old_Hungarian'],
		['Old_Italic', 'Old_Italic'],
		['Javanese', 'Javanese'],
		['Kayah_Li', 'Kayah_Li'],
		['Katakana', 'Katakana'],
		['Kharoshthi', 'Kharoshthi'],
		['Khmer', 'Khmer'],
		['Khojki', 'Khojki'],
		['Kannada', 'Kannada'],
		['Kaithi', 'Kaithi'],
		['Tai_Tham', 'Tai_Tham'],
		['Lao', 'Lao'],
		['Latin', 'Latin'],
		['Lepcha', 'Lepcha'],
		['Limbu', 'Limbu'],
		['Linear_A', 'Linear_A'],
		['Linear_B', 'Linear_B'],
		['Lycian', 'Lycian'],
		['Lydian', 'Lydian'],
		['Mahajani', 'Mahajani'],
		['Makasar', 'Makasar'],
		['Mandaic', 'Mandaic'],
		['Manichaean', 'Manichaean'],
		['Marchen', 'Marchen'],
		['Medefaidrin', 'Medefaidrin'],
		['Mende_Kikakui', 'Mende_Kikakui'],
		['Meroitic_Cursive', 'Meroitic_Cursive'],
		['Meroitic_Hieroglyphs', 'Meroitic_Hieroglyphs'],
		['Malayalam', 'Malayalam'],
		['Mongolian', 'Mongolian'],
		['Mro', 'Mro'],
		['Meetei_Mayek', 'Meetei_Mayek'],
		['Multani', 'Multani'],
		['Myanmar', 'Myanmar'],
		['Old_North_Arabian', 'Old_North_Arabian'],
		['Nabataean', 'Nabataean'],
		['Nko', 'Nko'],
		['Nushu', 'Nushu'],
		['Ogham', 'Ogham'],
		['Ol_Chiki', 'Ol_Chiki'],
		['Old_Turkic', 'Old_Turkic'],
		['Oriya', 'Oriya'],
		['Osage', 'Osage'],
		['Osmanya', 'Osmanya'],
		['Palmyrene', 'Palmyrene'],
		['Pau_Cin_Hau', 'Pau_Cin_Hau'],
		['Old_Permic', 'Old_Permic'],
		['Phags_Pa', 'Phags_Pa'],
		['Inscriptional_Pahlavi', 'Inscriptional_Pahlavi'],
		['Psalter_Pahlavi', 'Psalter_Pahlavi'],
		['Phoenician', 'Phoenician'],
		['Miao', 'Miao'],
		['Inscriptional_Parthian', 'Inscriptional_Parthian'],
		['Rejang', 'Rejang'],
		['Hanifi_Rohingya', 'Hanifi_Rohingya'],
		['Runic', 'Runic'],
		['Samaritan', 'Samaritan'],
		['Old_South_Arabian', 'Old_South_Arabian'],
		['Saurashtra', 'Saurashtra'],
		['SignWriting', 'SignWriting'],
		['Shavian', 'Shavian'],
		['Sharada', 'Sharada'],
		['Siddham', 'Siddham'],
		['Khudawadi', 'Khudawadi'],
		['Sinhala', 'Sinhala'],
		['Sogdian', 'Sogdian'],
		['Old_Sogdian', 'Old_Sogdian'],
		['Sora_Sompeng', 'Sora_Sompeng'],
		['Soyombo', 'Soyombo'],
		['Sundanese', 'Sundanese'],
		['Syloti_Nagri', 'Syloti_Nagri'],
		['Syriac', 'Syriac'],
		['Tagbanwa', 'Tagbanwa'],
		['Takri', 'Takri'],
		['Tai_Le', 'Tai_Le'],
		['New_Tai_Lue', 'New_Tai_Lue'],
		['Tamil', 'Tamil'],
		['Tangut', 'Tangut'],
		['Tai_Viet', 'Tai_Viet'],
		['Telugu', 'Telugu'],
		['Tifinagh', 'Tifinagh'],
		['Tagalog', 'Tagalog'],
		['Thaana', 'Thaana'],
		['Tibetan', 'Tibetan'],
		['Tirhuta', 'Tirhuta'],
		['Ugaritic', 'Ugaritic'],
		['Vai', 'Vai'],
		['Warang_Citi', 'Warang_Citi'],
		['Old_Persian', 'Old_Persian'],
		['Cuneiform', 'Cuneiform'],
		['Yi', 'Yi'],
		['Zanabazar_Square', 'Zanabazar_Square'],
		['Inherited', 'Inherited'],
		['Common', 'Common'],
		['Unknown', 'Unknown']
	])]
]);

const propertyToValueAliases = mappings;

const matchPropertyValue = function(property, value) {
	const aliasToValue = propertyToValueAliases.get(property);
	if (!aliasToValue) {
		throw new Error(`Unknown property \`${ property }\`.`);
	}
	const canonicalValue = aliasToValue.get(value);
	if (canonicalValue) {
		return canonicalValue;
	}
	throw new Error(
		`Unknown value \`${ value }\` for property \`${ property }\`.`
	);
};

var unicodeMatchPropertyValueEcmascript = matchPropertyValue;

var unicodeCanonicalPropertyNamesEcmascript = new Set([
	// Non-binary properties:
	'General_Category',
	'Script',
	'Script_Extensions',
	// Binary properties:
	'Alphabetic',
	'Any',
	'ASCII',
	'ASCII_Hex_Digit',
	'Assigned',
	'Bidi_Control',
	'Bidi_Mirrored',
	'Case_Ignorable',
	'Cased',
	'Changes_When_Casefolded',
	'Changes_When_Casemapped',
	'Changes_When_Lowercased',
	'Changes_When_NFKC_Casefolded',
	'Changes_When_Titlecased',
	'Changes_When_Uppercased',
	'Dash',
	'Default_Ignorable_Code_Point',
	'Deprecated',
	'Diacritic',
	'Emoji',
	'Emoji_Component',
	'Emoji_Modifier',
	'Emoji_Modifier_Base',
	'Emoji_Presentation',
	'Extended_Pictographic',
	'Extender',
	'Grapheme_Base',
	'Grapheme_Extend',
	'Hex_Digit',
	'ID_Continue',
	'ID_Start',
	'Ideographic',
	'IDS_Binary_Operator',
	'IDS_Trinary_Operator',
	'Join_Control',
	'Logical_Order_Exception',
	'Lowercase',
	'Math',
	'Noncharacter_Code_Point',
	'Pattern_Syntax',
	'Pattern_White_Space',
	'Quotation_Mark',
	'Radical',
	'Regional_Indicator',
	'Sentence_Terminal',
	'Soft_Dotted',
	'Terminal_Punctuation',
	'Unified_Ideograph',
	'Uppercase',
	'Variation_Selector',
	'White_Space',
	'XID_Continue',
	'XID_Start'
]);

// Generated using `npm run build`. Do not edit!
var unicodePropertyAliasesEcmascript = new Map([
	['scx', 'Script_Extensions'],
	['sc', 'Script'],
	['gc', 'General_Category'],
	['AHex', 'ASCII_Hex_Digit'],
	['Alpha', 'Alphabetic'],
	['Bidi_C', 'Bidi_Control'],
	['Bidi_M', 'Bidi_Mirrored'],
	['Cased', 'Cased'],
	['CI', 'Case_Ignorable'],
	['CWCF', 'Changes_When_Casefolded'],
	['CWCM', 'Changes_When_Casemapped'],
	['CWKCF', 'Changes_When_NFKC_Casefolded'],
	['CWL', 'Changes_When_Lowercased'],
	['CWT', 'Changes_When_Titlecased'],
	['CWU', 'Changes_When_Uppercased'],
	['Dash', 'Dash'],
	['Dep', 'Deprecated'],
	['DI', 'Default_Ignorable_Code_Point'],
	['Dia', 'Diacritic'],
	['Ext', 'Extender'],
	['Gr_Base', 'Grapheme_Base'],
	['Gr_Ext', 'Grapheme_Extend'],
	['Hex', 'Hex_Digit'],
	['IDC', 'ID_Continue'],
	['Ideo', 'Ideographic'],
	['IDS', 'ID_Start'],
	['IDSB', 'IDS_Binary_Operator'],
	['IDST', 'IDS_Trinary_Operator'],
	['Join_C', 'Join_Control'],
	['LOE', 'Logical_Order_Exception'],
	['Lower', 'Lowercase'],
	['Math', 'Math'],
	['NChar', 'Noncharacter_Code_Point'],
	['Pat_Syn', 'Pattern_Syntax'],
	['Pat_WS', 'Pattern_White_Space'],
	['QMark', 'Quotation_Mark'],
	['Radical', 'Radical'],
	['RI', 'Regional_Indicator'],
	['SD', 'Soft_Dotted'],
	['STerm', 'Sentence_Terminal'],
	['Term', 'Terminal_Punctuation'],
	['UIdeo', 'Unified_Ideograph'],
	['Upper', 'Uppercase'],
	['VS', 'Variation_Selector'],
	['WSpace', 'White_Space'],
	['space', 'White_Space'],
	['XIDC', 'XID_Continue'],
	['XIDS', 'XID_Start']
]);

const canonicalProperties = unicodeCanonicalPropertyNamesEcmascript;
const propertyAliases = unicodePropertyAliasesEcmascript;

const matchProperty = function(property) {
	if (canonicalProperties.has(property)) {
		return property;
	}
	if (propertyAliases.has(property)) {
		return propertyAliases.get(property);
	}
	throw new Error(`Unknown property: ${ property }`);
};

var unicodeMatchPropertyEcmascript = matchProperty;

var unicode$1 = {};

Object.defineProperty(unicode$1, "__esModule", {
  value: true
});
// Generated by shift-parser-js/scripts/generate-unicode-data.js

unicode$1.whitespaceArray = [5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279];
unicode$1.whitespaceBool = [false, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

unicode$1.idStartLargeRegex = /^[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]$/;
unicode$1.idStartBool = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false];

unicode$1.idContinueLargeRegex = /^[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]$/;
unicode$1.idContinueBool = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false];

Object.defineProperty(dist$7, "__esModule", {
  value: true
});

var _createClass$d = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2018 Shape Security, Inc.

icensed under the Apache License, Version 2.0 (the "License")
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


/* eslint-disable no-use-before-define */

var _unicodeMatchPropertyValueEcmascript = unicodeMatchPropertyValueEcmascript;

var _unicodeMatchPropertyValueEcmascript2 = _interopRequireDefault$g(_unicodeMatchPropertyValueEcmascript);

var _mappings = mappings;

var _mappings2 = _interopRequireDefault$g(_mappings);

var _unicodeMatchPropertyEcmascript = unicodeMatchPropertyEcmascript;

var _unicodeMatchPropertyEcmascript2 = _interopRequireDefault$g(_unicodeMatchPropertyEcmascript);

var _unicodePropertyAliasesEcmascript = unicodePropertyAliasesEcmascript;

var _unicodePropertyAliasesEcmascript2 = _interopRequireDefault$g(_unicodePropertyAliasesEcmascript);

var _unicode$1 = unicode$1;

function _interopRequireDefault$g(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray$8(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck$h(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var catchIsFalse = function catchIsFalse(predicate) {
  try {
    return !!predicate();
  } catch (e) {
    return false;
  }
};

var syntaxCharacters = '^$\\.*+?()[]{}|'.split('');
var extendedSyntaxCharacters = '^$\\.*+?()[|'.split('');

var controlEscapeCharacters = 'fnrtv'.split('');
var controlEscapeCharacterValues = { 'f': '\f'.charCodeAt(0), 'n': '\n'.charCodeAt(0), 'r': '\r'.charCodeAt(0), 't': '\t'.charCodeAt(0), 'v': '\v'.charCodeAt(0) };

var controlCharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');
var hexDigits = '0123456789abcdefABCDEF'.split('');
var decimalDigits = '0123456789'.split('');
var octalDigits = '01234567'.split('');

var INVALID_NAMED_BACKREFERENCE_SENTINEL = {};

function isIdentifierStart(ch) {
  return ch < 128 ? _unicode$1.idStartBool[ch] : _unicode$1.idStartLargeRegex.test(String.fromCodePoint(ch));
}

function isIdentifierPart(ch) {
  return ch < 128 ? _unicode$1.idContinueBool[ch] : _unicode$1.idContinueLargeRegex.test(String.fromCodePoint(ch));
}

var PatternAcceptorState = function () {
  function PatternAcceptorState(pattern, unicode) {
    _classCallCheck$h(this, PatternAcceptorState);

    this.pattern = pattern;
    this.unicode = unicode;
    this.index = 0;
    this.largestBackreference = 0;
    this.backreferenceNames = [];
    this.groupingNames = [];
    this.capturingGroups = 0;
  }

  _createClass$d(PatternAcceptorState, [{
    key: 'empty',
    value: function empty() {
      return this.index >= this.pattern.length;
    }
  }, {
    key: 'backreference',
    value: function backreference(ref) {
      if (ref > this.largestBackreference) {
        this.largestBackreference = ref;
      }
    }
  }, {
    key: 'nextCodePoint',
    value: function nextCodePoint() {
      if (this.empty()) {
        return null;
      }
      if (this.unicode) {
        return String.fromCodePoint(this.pattern.codePointAt(this.index));
      }
      return this.pattern.charAt(this.index);
    }
  }, {
    key: 'skipCodePoint',
    value: function skipCodePoint() {
      this.index += this.nextCodePoint().length;
    }
  }, {
    key: 'eat',
    value: function eat(str) {
      if (this.index + str.length > this.pattern.length || this.pattern.slice(this.index, this.index + str.length) !== str) {
        return false;
      }
      this.index += str.length;
      return true;
    }
  }, {
    key: 'eatIdentifierCodePoint',
    value: function eatIdentifierCodePoint() {
      var characterValue = void 0;
      var originalIndex = this.index;
      var character = void 0;
      if (this.match('\\u')) {
        this.skipCodePoint();
        characterValue = acceptUnicodeEscape(this);
        if (!characterValue.matched) {
          this.index = originalIndex;
          return null;
        }
        characterValue = characterValue.value;
        character = String.fromCodePoint(characterValue);
      } else {
        character = this.nextCodePoint();
        if (character == null) {
          this.index = originalIndex;
          return null;
        }
        this.index += character.length;
        characterValue = character.codePointAt(0);
      }
      return { character: character, characterValue: characterValue };
    }
  }, {
    key: 'eatIdentifierStart',
    value: function eatIdentifierStart() {
      var originalIndex = this.index;
      var codePoint = this.eatIdentifierCodePoint();
      if (codePoint === null) {
        this.index = originalIndex;
        return null;
      }
      if (codePoint.character === '_' || codePoint.character === '$' || isIdentifierStart(codePoint.characterValue)) {
        return codePoint.character;
      }
      this.index = originalIndex;
      return null;
    }
  }, {
    key: 'eatIdentifierPart',
    value: function eatIdentifierPart() {
      var originalIndex = this.index;
      var codePoint = this.eatIdentifierCodePoint();
      if (codePoint === null) {
        this.index = originalIndex;
        return null;
      }
      // ZWNJ / ZWJ
      if (codePoint.character === '\u200C' || codePoint.character === '\u200D' || codePoint.character === '$' || isIdentifierPart(codePoint.characterValue)) {
        return codePoint.character;
      }
      this.index = originalIndex;
      return null;
    }
  }, {
    key: 'eatAny',
    value: function eatAny() {
      for (var _len = arguments.length, strs = Array(_len), _key = 0; _key < _len; _key++) {
        strs[_key] = arguments[_key];
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = strs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var str = _step.value;

          if (this.eat(str)) {
            return str;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return null;
    }
  }, {
    key: 'match',
    value: function match(str) {
      return this.index + str.length <= this.pattern.length && this.pattern.slice(this.index, this.index + str.length) === str;
    }
  }, {
    key: 'matchAny',
    value: function matchAny() {
      for (var _len2 = arguments.length, strs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        strs[_key2] = arguments[_key2];
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = strs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var str = _step2.value;

          if (this.match(str)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return false;
    }
  }, {
    key: 'eatNaturalNumber',
    value: function eatNaturalNumber() {
      var _this = this;

      var characters = [];
      var eatNumber = function eatNumber() {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = decimalDigits[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var str = _step3.value;

            if (_this.eat(str)) {
              characters.push(str);
              return true;
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        return false;
      };
      while (eatNumber()) {}
      return characters.length === 0 ? null : characters.join('');
    }
  }]);

  return PatternAcceptorState;
}();

// acceptRegex


dist$7.default = function (pattern) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$unicode = _ref.unicode,
      unicode = _ref$unicode === undefined ? false : _ref$unicode;

  var state = new PatternAcceptorState(pattern, unicode);
  var accepted = acceptDisjunction(state);
  if (accepted.matched) {
    if (state.unicode) {
      if (state.largestBackreference > state.capturingGroups) {
        return false;
      }
    }
    if (state.groupingNames.length > 0 || state.unicode) {
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = state.backreferenceNames[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var backreferenceName = _step4.value;

          if (state.groupingNames.indexOf(backreferenceName) === -1) {
            return false;
          }
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    }
  }
  return accepted.matched;
};

var backtrackOnFailure = function backtrackOnFailure(func) {
  return function (state) {
    var savedIndex = state.index;
    var oldBackreference = state.largestBackreference;
    var oldCapturingGroups = state.capturingGroups;
    var val = func(state);
    if (!val.matched) {
      state.index = savedIndex;
      state.largestBackreference = oldBackreference;
      state.capturingGroups = oldCapturingGroups;
    }
    return val;
  };
};

var acceptUnicodeEscape = backtrackOnFailure(function (state) {
  if (!state.eat('u')) {
    return { matched: false };
  }
  if (state.unicode && state.eat('{')) {
    var _digits = [];
    while (!state.eat('}')) {
      var digit = state.eatAny.apply(state, _toConsumableArray$8(hexDigits));
      if (digit === null) {
        return { matched: false };
      }
      _digits.push(digit);
    }
    var _value = parseInt(_digits.join(''), 16);
    return _value > 0x10FFFF ? { matched: false } : { matched: true, value: _value };
  }
  var digits = [0, 0, 0, 0].map(function () {
    return state.eatAny.apply(state, _toConsumableArray$8(hexDigits));
  });
  if (digits.some(function (digit) {
    return digit === null;
  })) {
    return { matched: false };
  }
  var value = parseInt(digits.join(''), 16);
  if (state.unicode && value >= 0xD800 && value <= 0xDBFF) {
    var surrogatePairValue = backtrackOnFailure(function (subState) {
      if (!subState.eat('\\u')) {
        return { matched: false };
      }
      var digits2 = [0, 0, 0, 0].map(function () {
        return subState.eatAny.apply(subState, _toConsumableArray$8(hexDigits));
      });
      if (digits2.some(function (digit) {
        return digit === null;
      })) {
        return { matched: false };
      }
      var value2 = parseInt(digits2.join(''), 16);
      if (value2 < 0xDC00 || value2 >= 0xE000) {
        return { matched: false };
      }
      return { matched: true, value: 0x10000 + ((value & 0x03FF) << 10) + (value2 & 0x03FF) };
    })(state);
    if (surrogatePairValue.matched) {
      return surrogatePairValue;
    }
  }
  return { matched: true, value: value };
});

var acceptDisjunction = function acceptDisjunction(state, terminator) {
  do {
    if (terminator !== void 0 && state.eat(terminator)) {
      return { matched: true };
    } else if (state.match('|')) {
      continue;
    }
    if (!acceptAlternative(state, terminator).matched) {
      return { matched: false };
    }
  } while (state.eat('|'));
  return { matched: terminator === void 0 || !!state.eat(terminator) };
};

var acceptAlternative = function acceptAlternative(state, terminator) {
  while (!state.match('|') && !state.empty() && (terminator === void 0 || !state.match(terminator))) {
    if (!acceptTerm(state).matched) {
      return { matched: false };
    }
  }
  return { matched: true };
};

var anyOf = function anyOf() {
  for (var _len3 = arguments.length, acceptors = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    acceptors[_key3] = arguments[_key3];
  }

  return function (state) {
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = acceptors[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var predicate = _step5.value;

        var value = predicate(state);
        if (value.matched) {
          return value;
        }
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return) {
          _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }

    return { matched: false };
  };
};

var acceptTerm = function acceptTerm(state) {
  // non-quantified references are rolled into quantified accepts to improve performance significantly.
  if (state.unicode) {
    return anyOf(acceptAssertion, acceptQuantified(acceptAtom))(state);
  }
  return anyOf(acceptQuantified(acceptQuantifiableAssertion), acceptAssertion, acceptQuantified(acceptAtom))(state);
};

var acceptLabeledGroup = function acceptLabeledGroup(predicate) {
  return backtrackOnFailure(function (state) {
    if (!state.eat('(')) {
      return { matched: false };
    }
    if (predicate(state)) {
      return acceptDisjunction(state, ')');
    }
    return { matched: false };
  });
};

var acceptQuantifiableAssertion = acceptLabeledGroup(function (state) {
  return !!state.eatAny('?=', '?!');
});

var acceptAssertion = function acceptAssertion(state) {
  if (state.eatAny('^', '$', '\\b', '\\B')) {
    return { matched: true };
  }
  return acceptLabeledGroup(function (subState) {
    return subState.unicode ? !!subState.eatAny('?=', '?!', '?<=', '?<!') : !!subState.eatAny('?<=', '?<!');
  })(state);
};

var acceptDecimal = function acceptDecimal(state) {
  return { matched: state.eatNaturalNumber() !== null };
};

var acceptQuantified = function acceptQuantified(acceptor) {
  return backtrackOnFailure(function (state) {
    if (!acceptor(state).matched) {
      return { matched: false };
    }
    if (state.match('{')) {
      var value = backtrackOnFailure(function (subState) {
        subState.eat('{');
        var num1 = subState.eatNaturalNumber();
        if (num1 === null) {
          return { matched: false };
        }
        if (subState.eat(',') && subState.matchAny.apply(subState, _toConsumableArray$8(decimalDigits))) {
          var num2 = subState.eatNaturalNumber();
          if (num2 === null || parseInt(num1) > parseInt(num2)) {
            return { matched: false };
          }
        }
        if (!subState.eat('}')) {
          return { matched: false };
        }
        subState.eat('?');
        return { matched: true };
      })(state);
      if (!value.matched) {
        return { matched: !state.unicode };
      }
      return value;
    } else if (state.eatAny('*', '+', '?')) {
      state.eat('?');
    }
    return { matched: true };
  });
};

var acceptCharacterExcept = function acceptCharacterExcept(characters) {
  return function (state) {
    var nextCodePoint = state.nextCodePoint();
    if (nextCodePoint === null || characters.indexOf(nextCodePoint) !== -1) {
      return { matched: false };
    }
    state.skipCodePoint();
    return { matched: true };
  };
};

var acceptPatternCharacter = acceptCharacterExcept(syntaxCharacters);

var acceptExtendedPatternCharacter = acceptCharacterExcept(extendedSyntaxCharacters);

var acceptInvalidBracedQuantifier = function acceptInvalidBracedQuantifier(state) {
  return backtrackOnFailure(function (subState) {
    return { matched: !!(subState.eat('{') && acceptDecimal(subState).matched && (!subState.eat(',') || subState.match('}') || acceptDecimal(subState).matched) && subState.eat('}')) };
  })(state);
};

var acceptAtom = function acceptAtom(state) {
  if (state.unicode) {
    return anyOf(acceptPatternCharacter, function (subState) {
      return { matched: !!subState.eat('.') };
    }, backtrackOnFailure(function (subState) {
      return subState.eat('\\') ? acceptAtomEscape(subState) : { matched: false };
    }), acceptCharacterClass, acceptLabeledGroup(function (subState) {
      return subState.eat('?:');
    }), acceptGrouping)(state);
  }
  var matched = anyOf(function (subState) {
    return { matched: !!subState.eat('.') };
  }, backtrackOnFailure(function (subState) {
    return subState.eat('\\') ? acceptAtomEscape(subState) : { matched: false };
  }), backtrackOnFailure(function (subState) {
    return { matched: subState.eat('\\') && subState.match('c') };
  }), acceptCharacterClass, acceptLabeledGroup(function (subState) {
    return subState.eat('?:');
  }), acceptGrouping)(state);
  if (!matched.matched && acceptInvalidBracedQuantifier(state).matched) {
    return { matched: false };
  }
  return matched.matched ? matched : acceptExtendedPatternCharacter(state);
};

var acceptGrouping = backtrackOnFailure(function (state) {
  if (!state.eat('(')) {
    return { matched: false };
  }
  var groupName = backtrackOnFailure(function (subState) {
    if (!state.eat('?')) {
      return { matched: false };
    }
    return acceptGroupName(subState);
  })(state);
  if (!acceptDisjunction(state, ')').matched) {
    return { matched: false };
  }
  if (groupName.matched) {
    if (state.groupingNames.indexOf(groupName.data) !== -1) {
      return { matched: false };
    }
    state.groupingNames.push(groupName.data);
  }
  state.capturingGroups++;
  return { matched: true };
});

var acceptDecimalEscape = backtrackOnFailure(function (state) {
  var firstDecimal = state.eatAny.apply(state, _toConsumableArray$8(decimalDigits));
  if (firstDecimal === null) {
    return { matched: false };
  }
  if (firstDecimal === '0') {
    return { matched: true };
  }
  // we also accept octal escapes here, but it is impossible to tell if it is a octal escape until all parsing is complete.
  // octal escapes are handled in acceptCharacterEscape for classes
  state.backreference(parseInt(firstDecimal + (state.eatNaturalNumber() || '')));
  return { matched: true };
});

var acceptCharacterClassEscape = function acceptCharacterClassEscape(state) {
  if (state.eatAny('d', 'D', 's', 'S', 'w', 'W')) {
    return { matched: true };
  }
  if (state.unicode) {
    return backtrackOnFailure(function (subState) {
      if (!subState.eat('p{') && !subState.eat('P{')) {
        return { matched: false };
      }
      if (!acceptUnicodePropertyValueExpression(subState).matched) {
        return { matched: false };
      }
      return { matched: !!subState.eat('}') };
    })(state);
  }
  return { matched: false };
};

var acceptUnicodePropertyName = function acceptUnicodePropertyName(state) {
  var characters = [];
  var character = void 0;
  while (character = state.eatAny.apply(state, _toConsumableArray$8(controlCharacters).concat(['_']))) {
    // eslint-disable-line no-cond-assign
    characters.push(character);
  }
  return { matched: characters.length > 0, data: characters.join('') };
};

var acceptUnicodePropertyValue = function acceptUnicodePropertyValue(state) {
  var characters = [];
  var character = void 0;
  while (character = state.eatAny.apply(state, _toConsumableArray$8(controlCharacters).concat(_toConsumableArray$8(decimalDigits), ['_']))) {
    // eslint-disable-line no-cond-assign
    characters.push(character);
  }
  return { matched: characters.length > 0, data: characters.join('') };
};

// excluding nonbinary properties from mathias' list
// https://www.ecma-international.org/ecma-262/9.0/index.html#table-nonbinary-unicode-properties
var illegalLoneUnicodePropertyNames = ['General_Category', 'Script', 'Script_Extensions', 'scx', 'sc', 'gc'];

var generalCategoryValues = _mappings2.default.get('General_Category');

var acceptLoneUnicodePropertyNameOrValue = function acceptLoneUnicodePropertyNameOrValue(state) {
  var loneValue = acceptUnicodePropertyValue(state);
  if (!loneValue.matched || illegalLoneUnicodePropertyNames.includes(loneValue.data)) {
    return { matched: false };
  }

  return { matched: catchIsFalse(function () {
      return (0, _unicodeMatchPropertyEcmascript2.default)(loneValue.data);
    }) || generalCategoryValues.get(loneValue.data) != null };
};

var acceptUnicodePropertyValueExpression = function acceptUnicodePropertyValueExpression(state) {
  return anyOf(backtrackOnFailure(function (subState) {
    var name = acceptUnicodePropertyName(subState);
    if (!name.matched || !subState.eat('=')) {
      return { matched: false };
    }
    var value = acceptUnicodePropertyValue(subState);
    if (!value.matched) {
      return { matched: false };
    }
    return { matched: catchIsFalse(function () {
        return (0, _unicodeMatchPropertyValueEcmascript2.default)(_unicodePropertyAliasesEcmascript2.default.get(name.data) || name.data, value.data);
      }) };
  }), backtrackOnFailure(acceptLoneUnicodePropertyNameOrValue))(state);
};

var acceptCharacterEscape = anyOf(function (state) {
  var eaten = state.eatAny.apply(state, _toConsumableArray$8(controlEscapeCharacters));
  if (eaten === null) {
    return { matched: false };
  }
  return { matched: true, value: controlEscapeCharacterValues[eaten] };
}, backtrackOnFailure(function (state) {
  if (!state.eat('c')) {
    return { matched: false };
  }
  var character = state.eatAny.apply(state, _toConsumableArray$8(controlCharacters));
  if (character === null) {
    return { matched: false };
  }
  return { matched: true, value: character.charCodeAt(0) % 32 };
}), backtrackOnFailure(function (state) {
  if (!state.eat('0') || state.eatAny.apply(state, _toConsumableArray$8(decimalDigits))) {
    return { matched: false };
  }
  return { matched: true, value: 0 };
}), backtrackOnFailure(function (state) {
  if (!state.eat('x')) {
    return { matched: false };
  }
  var digits = [0, 0].map(function () {
    return state.eatAny.apply(state, _toConsumableArray$8(hexDigits));
  });
  if (digits.some(function (value) {
    return value === null;
  })) {
    return { matched: false };
  }
  return { matched: true, value: parseInt(digits.join(''), 16) };
}), acceptUnicodeEscape, backtrackOnFailure(function (state) {
  if (state.unicode) {
    return { matched: false };
  }
  var octal1 = state.eatAny.apply(state, _toConsumableArray$8(octalDigits));
  if (octal1 === null) {
    return { matched: false };
  }
  var octal1Value = parseInt(octal1, 8);
  if (octalDigits.indexOf(state.nextCodePoint()) === -1) {
    return { matched: true, value: octal1Value };
  }
  var octal2 = state.eatAny.apply(state, _toConsumableArray$8(octalDigits));
  var octal2Value = parseInt(octal2, 8);
  if (octal1Value < 4) {
    if (octalDigits.indexOf(state.nextCodePoint()) === -1) {
      return { matched: true, value: octal1Value << 3 | octal2Value };
    }
    var octal3 = state.eatAny.apply(state, _toConsumableArray$8(octalDigits));
    var octal3Value = parseInt(octal3, 8);
    return { matched: true, value: octal1Value << 6 | octal2Value << 3 | octal3Value };
  }
  return { matched: true, value: octal1Value << 3 | octal2Value };
}), backtrackOnFailure(function (state) {
  if (!state.unicode) {
    return { matched: false };
  }
  var value = state.eatAny.apply(state, _toConsumableArray$8(syntaxCharacters));
  if (value === null) {
    return { matched: false };
  }
  return { matched: true, value: value.charCodeAt(0) };
}), function (state) {
  if (!state.unicode || !state.eat('/')) {
    return { matched: false };
  }
  return { matched: true, value: '/'.charCodeAt(0) };
}, backtrackOnFailure(function (state) {
  if (state.unicode) {
    return { matched: false };
  }
  var next = state.nextCodePoint();
  if (next !== null && next !== 'c' && next !== 'k') {
    state.skipCodePoint();
    return { matched: true, value: next.codePointAt(0) };
  }
  return { matched: false };
}));

var acceptGroupNameBackreference = backtrackOnFailure(function (state) {
  if (!state.eat('k')) {
    return { matched: false };
  }
  var name = acceptGroupName(state);
  if (!name.matched) {
    state.backreferenceNames.push(INVALID_NAMED_BACKREFERENCE_SENTINEL);
    return { matched: true };
  }
  state.backreferenceNames.push(name.data);
  return { matched: true };
});

var acceptGroupName = backtrackOnFailure(function (state) {
  if (!state.eat('<')) {
    return { matched: false };
  }
  var characters = [];
  var start = state.eatIdentifierStart();
  if (!start) {
    return { matched: false };
  }
  characters.push(start);
  var part = void 0;
  while (part = state.eatIdentifierPart()) {
    // eslint-disable-line no-cond-assign
    characters.push(part);
  }
  if (!state.eat('>')) {
    return { matched: false };
  }
  return { matched: characters.length > 0, data: characters.join('') };
});

var acceptAtomEscape = anyOf(acceptDecimalEscape, acceptCharacterClassEscape, acceptCharacterEscape, acceptGroupNameBackreference);

var acceptCharacterClass = backtrackOnFailure(function (state) {
  if (!state.eat('[')) {
    return { matched: false };
  }
  state.eat('^');

  var acceptClassEscape = anyOf(function (subState) {
    return { matched: !!subState.eat('b'), value: 0x0008 };
  }, function (subState) {
    return { matched: subState.unicode && !!subState.eat('-'), value: '-'.charCodeAt(0) };
  }, backtrackOnFailure(function (subState) {
    if (subState.unicode || !subState.eat('c')) {
      return { matched: false };
    }
    var character = subState.eatAny.apply(subState, _toConsumableArray$8(decimalDigits).concat(['_']));
    if (character === null) {
      return { matched: false };
    }
    return { matched: true, value: character.charCodeAt(0) % 32 };
  }), acceptCharacterClassEscape, acceptCharacterEscape,
  // We special-case `\k` because `acceptCharacterEscape` rejects `\k` unconditionally,
  // deferring `\k` to acceptGroupNameBackreference, which is not called here.
  // See also https://github.com/tc39/ecma262/issues/2037. This code takes the route of
  // making it unconditionally legal, rather than legal only in the absence of a group name.
  function (subState) {
    return { matched: !subState.unicode && !!subState.eat('k'), value: 107 };
  });

  var acceptClassAtomNoDash = function acceptClassAtomNoDash(localState) {
    var nextCodePoint = localState.nextCodePoint();
    if (nextCodePoint === ']' || nextCodePoint === '-' || nextCodePoint === null) {
      return { matched: false };
    }
    if (nextCodePoint !== '\\') {
      localState.skipCodePoint();
      return { matched: true, value: nextCodePoint.codePointAt(0) };
    }
    localState.eat('\\');
    var classEscape = acceptClassEscape(localState);
    if (!classEscape.matched && localState.nextCodePoint() === 'c' && !localState.unicode) {
      return { matched: true, value: '\\'.charCodeAt(0) };
    }
    return classEscape;
  };

  var acceptClassAtom = function acceptClassAtom(localState) {
    if (localState.eat('-')) {
      return { matched: true, value: '-'.charCodeAt(0) };
    }
    return acceptClassAtomNoDash(localState);
  };

  var finishClassRange = function finishClassRange(localState, atom) {
    var isUnvaluedPassedAtom = function isUnvaluedPassedAtom(subAtom) {
      return subAtom.value === void 0 && subAtom.matched;
    };
    if (localState.eat('-')) {
      if (localState.match(']')) {
        return { matched: true };
      }
      var otherAtom = acceptClassAtom(localState);
      if (!otherAtom.matched) {
        return { matched: false };
      }
      if (localState.unicode && (isUnvaluedPassedAtom(atom) || isUnvaluedPassedAtom(otherAtom))) {
        return { matched: false };
      } else if (!(!localState.unicode && (isUnvaluedPassedAtom(atom) || isUnvaluedPassedAtom(otherAtom))) && atom.value > otherAtom.value) {
        return { matched: false };
      } else if (localState.match(']')) {
        return { matched: true };
      }
      return acceptNonEmptyClassRanges(localState);
    }
    if (localState.match(']')) {
      return { matched: true };
    }
    return acceptNonEmptyClassRangesNoDash(localState);
  };

  var acceptNonEmptyClassRanges = function acceptNonEmptyClassRanges(localState) {
    var atom = acceptClassAtom(localState);
    return atom.matched ? finishClassRange(localState, atom) : { matched: false };
  };

  var acceptNonEmptyClassRangesNoDash = function acceptNonEmptyClassRangesNoDash(localState) {
    var atom = acceptClassAtomNoDash(localState);
    return atom.matched ? finishClassRange(localState, atom) : { matched: false };
  };

  if (state.eat(']')) {
    return { matched: true };
  }

  var value = acceptNonEmptyClassRanges(state);
  if (value.matched) {
    state.eat(']'); // cannot fail, as above will not return matched if it is not seen in advance
  }

  return value;
});

var dist$6 = {};

Object.defineProperty(dist$6, "__esModule", {
  value: true
});

function _classCallCheck$g(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by src/generate.js.

/**
 * Copyright 2016 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

dist$6.ArrayAssignmentTarget = function ArrayAssignmentTarget(_ref) {
  var elements = _ref.elements,
      rest = _ref.rest;

  _classCallCheck$g(this, ArrayAssignmentTarget);

  this.type = 'ArrayAssignmentTarget';
  this.elements = elements;
  this.rest = rest;
};

dist$6.ArrayBinding = function ArrayBinding(_ref2) {
  var elements = _ref2.elements,
      rest = _ref2.rest;

  _classCallCheck$g(this, ArrayBinding);

  this.type = 'ArrayBinding';
  this.elements = elements;
  this.rest = rest;
};

dist$6.ArrayExpression = function ArrayExpression(_ref3) {
  var elements = _ref3.elements;

  _classCallCheck$g(this, ArrayExpression);

  this.type = 'ArrayExpression';
  this.elements = elements;
};

dist$6.ArrowExpression = function ArrowExpression(_ref4) {
  var isAsync = _ref4.isAsync,
      params = _ref4.params,
      body = _ref4.body;

  _classCallCheck$g(this, ArrowExpression);

  this.type = 'ArrowExpression';
  this.isAsync = isAsync;
  this.params = params;
  this.body = body;
};

dist$6.AssignmentExpression = function AssignmentExpression(_ref5) {
  var binding = _ref5.binding,
      expression = _ref5.expression;

  _classCallCheck$g(this, AssignmentExpression);

  this.type = 'AssignmentExpression';
  this.binding = binding;
  this.expression = expression;
};

dist$6.AssignmentTargetIdentifier = function AssignmentTargetIdentifier(_ref6) {
  var name = _ref6.name;

  _classCallCheck$g(this, AssignmentTargetIdentifier);

  this.type = 'AssignmentTargetIdentifier';
  this.name = name;
};

dist$6.AssignmentTargetPropertyIdentifier = function AssignmentTargetPropertyIdentifier(_ref7) {
  var binding = _ref7.binding,
      init = _ref7.init;

  _classCallCheck$g(this, AssignmentTargetPropertyIdentifier);

  this.type = 'AssignmentTargetPropertyIdentifier';
  this.binding = binding;
  this.init = init;
};

dist$6.AssignmentTargetPropertyProperty = function AssignmentTargetPropertyProperty(_ref8) {
  var name = _ref8.name,
      binding = _ref8.binding;

  _classCallCheck$g(this, AssignmentTargetPropertyProperty);

  this.type = 'AssignmentTargetPropertyProperty';
  this.name = name;
  this.binding = binding;
};

dist$6.AssignmentTargetWithDefault = function AssignmentTargetWithDefault(_ref9) {
  var binding = _ref9.binding,
      init = _ref9.init;

  _classCallCheck$g(this, AssignmentTargetWithDefault);

  this.type = 'AssignmentTargetWithDefault';
  this.binding = binding;
  this.init = init;
};

dist$6.AwaitExpression = function AwaitExpression(_ref10) {
  var expression = _ref10.expression;

  _classCallCheck$g(this, AwaitExpression);

  this.type = 'AwaitExpression';
  this.expression = expression;
};

dist$6.BinaryExpression = function BinaryExpression(_ref11) {
  var left = _ref11.left,
      operator = _ref11.operator,
      right = _ref11.right;

  _classCallCheck$g(this, BinaryExpression);

  this.type = 'BinaryExpression';
  this.left = left;
  this.operator = operator;
  this.right = right;
};

dist$6.BindingIdentifier = function BindingIdentifier(_ref12) {
  var name = _ref12.name;

  _classCallCheck$g(this, BindingIdentifier);

  this.type = 'BindingIdentifier';
  this.name = name;
};

dist$6.BindingPropertyIdentifier = function BindingPropertyIdentifier(_ref13) {
  var binding = _ref13.binding,
      init = _ref13.init;

  _classCallCheck$g(this, BindingPropertyIdentifier);

  this.type = 'BindingPropertyIdentifier';
  this.binding = binding;
  this.init = init;
};

dist$6.BindingPropertyProperty = function BindingPropertyProperty(_ref14) {
  var name = _ref14.name,
      binding = _ref14.binding;

  _classCallCheck$g(this, BindingPropertyProperty);

  this.type = 'BindingPropertyProperty';
  this.name = name;
  this.binding = binding;
};

dist$6.BindingWithDefault = function BindingWithDefault(_ref15) {
  var binding = _ref15.binding,
      init = _ref15.init;

  _classCallCheck$g(this, BindingWithDefault);

  this.type = 'BindingWithDefault';
  this.binding = binding;
  this.init = init;
};

dist$6.Block = function Block(_ref16) {
  var statements = _ref16.statements;

  _classCallCheck$g(this, Block);

  this.type = 'Block';
  this.statements = statements;
};

dist$6.BlockStatement = function BlockStatement(_ref17) {
  var block = _ref17.block;

  _classCallCheck$g(this, BlockStatement);

  this.type = 'BlockStatement';
  this.block = block;
};

dist$6.BreakStatement = function BreakStatement(_ref18) {
  var label = _ref18.label;

  _classCallCheck$g(this, BreakStatement);

  this.type = 'BreakStatement';
  this.label = label;
};

dist$6.CallExpression = function CallExpression(_ref19) {
  var callee = _ref19.callee,
      _arguments = _ref19.arguments;

  _classCallCheck$g(this, CallExpression);

  this.type = 'CallExpression';
  this.callee = callee;
  this.arguments = _arguments;
};

dist$6.CatchClause = function CatchClause(_ref20) {
  var binding = _ref20.binding,
      body = _ref20.body;

  _classCallCheck$g(this, CatchClause);

  this.type = 'CatchClause';
  this.binding = binding;
  this.body = body;
};

dist$6.ClassDeclaration = function ClassDeclaration(_ref21) {
  var name = _ref21.name,
      _super = _ref21.super,
      elements = _ref21.elements;

  _classCallCheck$g(this, ClassDeclaration);

  this.type = 'ClassDeclaration';
  this.name = name;
  this.super = _super;
  this.elements = elements;
};

dist$6.ClassElement = function ClassElement(_ref22) {
  var isStatic = _ref22.isStatic,
      method = _ref22.method;

  _classCallCheck$g(this, ClassElement);

  this.type = 'ClassElement';
  this.isStatic = isStatic;
  this.method = method;
};

dist$6.ClassExpression = function ClassExpression(_ref23) {
  var name = _ref23.name,
      _super = _ref23.super,
      elements = _ref23.elements;

  _classCallCheck$g(this, ClassExpression);

  this.type = 'ClassExpression';
  this.name = name;
  this.super = _super;
  this.elements = elements;
};

dist$6.CompoundAssignmentExpression = function CompoundAssignmentExpression(_ref24) {
  var binding = _ref24.binding,
      operator = _ref24.operator,
      expression = _ref24.expression;

  _classCallCheck$g(this, CompoundAssignmentExpression);

  this.type = 'CompoundAssignmentExpression';
  this.binding = binding;
  this.operator = operator;
  this.expression = expression;
};

dist$6.ComputedMemberAssignmentTarget = function ComputedMemberAssignmentTarget(_ref25) {
  var object = _ref25.object,
      expression = _ref25.expression;

  _classCallCheck$g(this, ComputedMemberAssignmentTarget);

  this.type = 'ComputedMemberAssignmentTarget';
  this.object = object;
  this.expression = expression;
};

dist$6.ComputedMemberExpression = function ComputedMemberExpression(_ref26) {
  var object = _ref26.object,
      expression = _ref26.expression;

  _classCallCheck$g(this, ComputedMemberExpression);

  this.type = 'ComputedMemberExpression';
  this.object = object;
  this.expression = expression;
};

dist$6.ComputedPropertyName = function ComputedPropertyName(_ref27) {
  var expression = _ref27.expression;

  _classCallCheck$g(this, ComputedPropertyName);

  this.type = 'ComputedPropertyName';
  this.expression = expression;
};

dist$6.ConditionalExpression = function ConditionalExpression(_ref28) {
  var test = _ref28.test,
      consequent = _ref28.consequent,
      alternate = _ref28.alternate;

  _classCallCheck$g(this, ConditionalExpression);

  this.type = 'ConditionalExpression';
  this.test = test;
  this.consequent = consequent;
  this.alternate = alternate;
};

dist$6.ContinueStatement = function ContinueStatement(_ref29) {
  var label = _ref29.label;

  _classCallCheck$g(this, ContinueStatement);

  this.type = 'ContinueStatement';
  this.label = label;
};

dist$6.DataProperty = function DataProperty(_ref30) {
  var name = _ref30.name,
      expression = _ref30.expression;

  _classCallCheck$g(this, DataProperty);

  this.type = 'DataProperty';
  this.name = name;
  this.expression = expression;
};

dist$6.DebuggerStatement = function DebuggerStatement() {
  _classCallCheck$g(this, DebuggerStatement);

  this.type = 'DebuggerStatement';
};

dist$6.Directive = function Directive(_ref31) {
  var rawValue = _ref31.rawValue;

  _classCallCheck$g(this, Directive);

  this.type = 'Directive';
  this.rawValue = rawValue;
};

dist$6.DoWhileStatement = function DoWhileStatement(_ref32) {
  var body = _ref32.body,
      test = _ref32.test;

  _classCallCheck$g(this, DoWhileStatement);

  this.type = 'DoWhileStatement';
  this.body = body;
  this.test = test;
};

dist$6.EmptyStatement = function EmptyStatement() {
  _classCallCheck$g(this, EmptyStatement);

  this.type = 'EmptyStatement';
};

dist$6.Export = function Export(_ref33) {
  var declaration = _ref33.declaration;

  _classCallCheck$g(this, Export);

  this.type = 'Export';
  this.declaration = declaration;
};

dist$6.ExportAllFrom = function ExportAllFrom(_ref34) {
  var moduleSpecifier = _ref34.moduleSpecifier;

  _classCallCheck$g(this, ExportAllFrom);

  this.type = 'ExportAllFrom';
  this.moduleSpecifier = moduleSpecifier;
};

dist$6.ExportDefault = function ExportDefault(_ref35) {
  var body = _ref35.body;

  _classCallCheck$g(this, ExportDefault);

  this.type = 'ExportDefault';
  this.body = body;
};

dist$6.ExportFrom = function ExportFrom(_ref36) {
  var namedExports = _ref36.namedExports,
      moduleSpecifier = _ref36.moduleSpecifier;

  _classCallCheck$g(this, ExportFrom);

  this.type = 'ExportFrom';
  this.namedExports = namedExports;
  this.moduleSpecifier = moduleSpecifier;
};

dist$6.ExportFromSpecifier = function ExportFromSpecifier(_ref37) {
  var name = _ref37.name,
      exportedName = _ref37.exportedName;

  _classCallCheck$g(this, ExportFromSpecifier);

  this.type = 'ExportFromSpecifier';
  this.name = name;
  this.exportedName = exportedName;
};

dist$6.ExportLocalSpecifier = function ExportLocalSpecifier(_ref38) {
  var name = _ref38.name,
      exportedName = _ref38.exportedName;

  _classCallCheck$g(this, ExportLocalSpecifier);

  this.type = 'ExportLocalSpecifier';
  this.name = name;
  this.exportedName = exportedName;
};

dist$6.ExportLocals = function ExportLocals(_ref39) {
  var namedExports = _ref39.namedExports;

  _classCallCheck$g(this, ExportLocals);

  this.type = 'ExportLocals';
  this.namedExports = namedExports;
};

dist$6.ExpressionStatement = function ExpressionStatement(_ref40) {
  var expression = _ref40.expression;

  _classCallCheck$g(this, ExpressionStatement);

  this.type = 'ExpressionStatement';
  this.expression = expression;
};

dist$6.ForAwaitStatement = function ForAwaitStatement(_ref41) {
  var left = _ref41.left,
      right = _ref41.right,
      body = _ref41.body;

  _classCallCheck$g(this, ForAwaitStatement);

  this.type = 'ForAwaitStatement';
  this.left = left;
  this.right = right;
  this.body = body;
};

dist$6.ForInStatement = function ForInStatement(_ref42) {
  var left = _ref42.left,
      right = _ref42.right,
      body = _ref42.body;

  _classCallCheck$g(this, ForInStatement);

  this.type = 'ForInStatement';
  this.left = left;
  this.right = right;
  this.body = body;
};

dist$6.ForOfStatement = function ForOfStatement(_ref43) {
  var left = _ref43.left,
      right = _ref43.right,
      body = _ref43.body;

  _classCallCheck$g(this, ForOfStatement);

  this.type = 'ForOfStatement';
  this.left = left;
  this.right = right;
  this.body = body;
};

dist$6.ForStatement = function ForStatement(_ref44) {
  var init = _ref44.init,
      test = _ref44.test,
      update = _ref44.update,
      body = _ref44.body;

  _classCallCheck$g(this, ForStatement);

  this.type = 'ForStatement';
  this.init = init;
  this.test = test;
  this.update = update;
  this.body = body;
};

dist$6.FormalParameters = function FormalParameters(_ref45) {
  var items = _ref45.items,
      rest = _ref45.rest;

  _classCallCheck$g(this, FormalParameters);

  this.type = 'FormalParameters';
  this.items = items;
  this.rest = rest;
};

dist$6.FunctionBody = function FunctionBody(_ref46) {
  var directives = _ref46.directives,
      statements = _ref46.statements;

  _classCallCheck$g(this, FunctionBody);

  this.type = 'FunctionBody';
  this.directives = directives;
  this.statements = statements;
};

dist$6.FunctionDeclaration = function FunctionDeclaration(_ref47) {
  var isAsync = _ref47.isAsync,
      isGenerator = _ref47.isGenerator,
      name = _ref47.name,
      params = _ref47.params,
      body = _ref47.body;

  _classCallCheck$g(this, FunctionDeclaration);

  this.type = 'FunctionDeclaration';
  this.isAsync = isAsync;
  this.isGenerator = isGenerator;
  this.name = name;
  this.params = params;
  this.body = body;
};

dist$6.FunctionExpression = function FunctionExpression(_ref48) {
  var isAsync = _ref48.isAsync,
      isGenerator = _ref48.isGenerator,
      name = _ref48.name,
      params = _ref48.params,
      body = _ref48.body;

  _classCallCheck$g(this, FunctionExpression);

  this.type = 'FunctionExpression';
  this.isAsync = isAsync;
  this.isGenerator = isGenerator;
  this.name = name;
  this.params = params;
  this.body = body;
};

dist$6.Getter = function Getter(_ref49) {
  var name = _ref49.name,
      body = _ref49.body;

  _classCallCheck$g(this, Getter);

  this.type = 'Getter';
  this.name = name;
  this.body = body;
};

dist$6.IdentifierExpression = function IdentifierExpression(_ref50) {
  var name = _ref50.name;

  _classCallCheck$g(this, IdentifierExpression);

  this.type = 'IdentifierExpression';
  this.name = name;
};

dist$6.IfStatement = function IfStatement(_ref51) {
  var test = _ref51.test,
      consequent = _ref51.consequent,
      alternate = _ref51.alternate;

  _classCallCheck$g(this, IfStatement);

  this.type = 'IfStatement';
  this.test = test;
  this.consequent = consequent;
  this.alternate = alternate;
};

dist$6.Import = function Import(_ref52) {
  var defaultBinding = _ref52.defaultBinding,
      namedImports = _ref52.namedImports,
      moduleSpecifier = _ref52.moduleSpecifier;

  _classCallCheck$g(this, Import);

  this.type = 'Import';
  this.defaultBinding = defaultBinding;
  this.namedImports = namedImports;
  this.moduleSpecifier = moduleSpecifier;
};

dist$6.ImportNamespace = function ImportNamespace(_ref53) {
  var defaultBinding = _ref53.defaultBinding,
      namespaceBinding = _ref53.namespaceBinding,
      moduleSpecifier = _ref53.moduleSpecifier;

  _classCallCheck$g(this, ImportNamespace);

  this.type = 'ImportNamespace';
  this.defaultBinding = defaultBinding;
  this.namespaceBinding = namespaceBinding;
  this.moduleSpecifier = moduleSpecifier;
};

dist$6.ImportSpecifier = function ImportSpecifier(_ref54) {
  var name = _ref54.name,
      binding = _ref54.binding;

  _classCallCheck$g(this, ImportSpecifier);

  this.type = 'ImportSpecifier';
  this.name = name;
  this.binding = binding;
};

dist$6.LabeledStatement = function LabeledStatement(_ref55) {
  var label = _ref55.label,
      body = _ref55.body;

  _classCallCheck$g(this, LabeledStatement);

  this.type = 'LabeledStatement';
  this.label = label;
  this.body = body;
};

dist$6.LiteralBooleanExpression = function LiteralBooleanExpression(_ref56) {
  var value = _ref56.value;

  _classCallCheck$g(this, LiteralBooleanExpression);

  this.type = 'LiteralBooleanExpression';
  this.value = value;
};

dist$6.LiteralInfinityExpression = function LiteralInfinityExpression() {
  _classCallCheck$g(this, LiteralInfinityExpression);

  this.type = 'LiteralInfinityExpression';
};

dist$6.LiteralNullExpression = function LiteralNullExpression() {
  _classCallCheck$g(this, LiteralNullExpression);

  this.type = 'LiteralNullExpression';
};

dist$6.LiteralNumericExpression = function LiteralNumericExpression(_ref57) {
  var value = _ref57.value;

  _classCallCheck$g(this, LiteralNumericExpression);

  this.type = 'LiteralNumericExpression';
  this.value = value;
};

dist$6.LiteralRegExpExpression = function LiteralRegExpExpression(_ref58) {
  var pattern = _ref58.pattern,
      global = _ref58.global,
      ignoreCase = _ref58.ignoreCase,
      multiLine = _ref58.multiLine,
      dotAll = _ref58.dotAll,
      unicode = _ref58.unicode,
      sticky = _ref58.sticky;

  _classCallCheck$g(this, LiteralRegExpExpression);

  this.type = 'LiteralRegExpExpression';
  this.pattern = pattern;
  this.global = global;
  this.ignoreCase = ignoreCase;
  this.multiLine = multiLine;
  this.dotAll = dotAll;
  this.unicode = unicode;
  this.sticky = sticky;
};

dist$6.LiteralStringExpression = function LiteralStringExpression(_ref59) {
  var value = _ref59.value;

  _classCallCheck$g(this, LiteralStringExpression);

  this.type = 'LiteralStringExpression';
  this.value = value;
};

dist$6.Method = function Method(_ref60) {
  var isAsync = _ref60.isAsync,
      isGenerator = _ref60.isGenerator,
      name = _ref60.name,
      params = _ref60.params,
      body = _ref60.body;

  _classCallCheck$g(this, Method);

  this.type = 'Method';
  this.isAsync = isAsync;
  this.isGenerator = isGenerator;
  this.name = name;
  this.params = params;
  this.body = body;
};

dist$6.Module = function Module(_ref61) {
  var directives = _ref61.directives,
      items = _ref61.items;

  _classCallCheck$g(this, Module);

  this.type = 'Module';
  this.directives = directives;
  this.items = items;
};

dist$6.NewExpression = function NewExpression(_ref62) {
  var callee = _ref62.callee,
      _arguments = _ref62.arguments;

  _classCallCheck$g(this, NewExpression);

  this.type = 'NewExpression';
  this.callee = callee;
  this.arguments = _arguments;
};

dist$6.NewTargetExpression = function NewTargetExpression() {
  _classCallCheck$g(this, NewTargetExpression);

  this.type = 'NewTargetExpression';
};

dist$6.ObjectAssignmentTarget = function ObjectAssignmentTarget(_ref63) {
  var properties = _ref63.properties,
      rest = _ref63.rest;

  _classCallCheck$g(this, ObjectAssignmentTarget);

  this.type = 'ObjectAssignmentTarget';
  this.properties = properties;
  this.rest = rest;
};

dist$6.ObjectBinding = function ObjectBinding(_ref64) {
  var properties = _ref64.properties,
      rest = _ref64.rest;

  _classCallCheck$g(this, ObjectBinding);

  this.type = 'ObjectBinding';
  this.properties = properties;
  this.rest = rest;
};

dist$6.ObjectExpression = function ObjectExpression(_ref65) {
  var properties = _ref65.properties;

  _classCallCheck$g(this, ObjectExpression);

  this.type = 'ObjectExpression';
  this.properties = properties;
};

dist$6.ReturnStatement = function ReturnStatement(_ref66) {
  var expression = _ref66.expression;

  _classCallCheck$g(this, ReturnStatement);

  this.type = 'ReturnStatement';
  this.expression = expression;
};

dist$6.Script = function Script(_ref67) {
  var directives = _ref67.directives,
      statements = _ref67.statements;

  _classCallCheck$g(this, Script);

  this.type = 'Script';
  this.directives = directives;
  this.statements = statements;
};

dist$6.Setter = function Setter(_ref68) {
  var name = _ref68.name,
      param = _ref68.param,
      body = _ref68.body;

  _classCallCheck$g(this, Setter);

  this.type = 'Setter';
  this.name = name;
  this.param = param;
  this.body = body;
};

dist$6.ShorthandProperty = function ShorthandProperty(_ref69) {
  var name = _ref69.name;

  _classCallCheck$g(this, ShorthandProperty);

  this.type = 'ShorthandProperty';
  this.name = name;
};

dist$6.SpreadElement = function SpreadElement(_ref70) {
  var expression = _ref70.expression;

  _classCallCheck$g(this, SpreadElement);

  this.type = 'SpreadElement';
  this.expression = expression;
};

dist$6.SpreadProperty = function SpreadProperty(_ref71) {
  var expression = _ref71.expression;

  _classCallCheck$g(this, SpreadProperty);

  this.type = 'SpreadProperty';
  this.expression = expression;
};

dist$6.StaticMemberAssignmentTarget = function StaticMemberAssignmentTarget(_ref72) {
  var object = _ref72.object,
      property = _ref72.property;

  _classCallCheck$g(this, StaticMemberAssignmentTarget);

  this.type = 'StaticMemberAssignmentTarget';
  this.object = object;
  this.property = property;
};

dist$6.StaticMemberExpression = function StaticMemberExpression(_ref73) {
  var object = _ref73.object,
      property = _ref73.property;

  _classCallCheck$g(this, StaticMemberExpression);

  this.type = 'StaticMemberExpression';
  this.object = object;
  this.property = property;
};

dist$6.StaticPropertyName = function StaticPropertyName(_ref74) {
  var value = _ref74.value;

  _classCallCheck$g(this, StaticPropertyName);

  this.type = 'StaticPropertyName';
  this.value = value;
};

dist$6.Super = function Super() {
  _classCallCheck$g(this, Super);

  this.type = 'Super';
};

dist$6.SwitchCase = function SwitchCase(_ref75) {
  var test = _ref75.test,
      consequent = _ref75.consequent;

  _classCallCheck$g(this, SwitchCase);

  this.type = 'SwitchCase';
  this.test = test;
  this.consequent = consequent;
};

dist$6.SwitchDefault = function SwitchDefault(_ref76) {
  var consequent = _ref76.consequent;

  _classCallCheck$g(this, SwitchDefault);

  this.type = 'SwitchDefault';
  this.consequent = consequent;
};

dist$6.SwitchStatement = function SwitchStatement(_ref77) {
  var discriminant = _ref77.discriminant,
      cases = _ref77.cases;

  _classCallCheck$g(this, SwitchStatement);

  this.type = 'SwitchStatement';
  this.discriminant = discriminant;
  this.cases = cases;
};

dist$6.SwitchStatementWithDefault = function SwitchStatementWithDefault(_ref78) {
  var discriminant = _ref78.discriminant,
      preDefaultCases = _ref78.preDefaultCases,
      defaultCase = _ref78.defaultCase,
      postDefaultCases = _ref78.postDefaultCases;

  _classCallCheck$g(this, SwitchStatementWithDefault);

  this.type = 'SwitchStatementWithDefault';
  this.discriminant = discriminant;
  this.preDefaultCases = preDefaultCases;
  this.defaultCase = defaultCase;
  this.postDefaultCases = postDefaultCases;
};

dist$6.TemplateElement = function TemplateElement(_ref79) {
  var rawValue = _ref79.rawValue;

  _classCallCheck$g(this, TemplateElement);

  this.type = 'TemplateElement';
  this.rawValue = rawValue;
};

dist$6.TemplateExpression = function TemplateExpression(_ref80) {
  var tag = _ref80.tag,
      elements = _ref80.elements;

  _classCallCheck$g(this, TemplateExpression);

  this.type = 'TemplateExpression';
  this.tag = tag;
  this.elements = elements;
};

dist$6.ThisExpression = function ThisExpression() {
  _classCallCheck$g(this, ThisExpression);

  this.type = 'ThisExpression';
};

dist$6.ThrowStatement = function ThrowStatement(_ref81) {
  var expression = _ref81.expression;

  _classCallCheck$g(this, ThrowStatement);

  this.type = 'ThrowStatement';
  this.expression = expression;
};

dist$6.TryCatchStatement = function TryCatchStatement(_ref82) {
  var body = _ref82.body,
      catchClause = _ref82.catchClause;

  _classCallCheck$g(this, TryCatchStatement);

  this.type = 'TryCatchStatement';
  this.body = body;
  this.catchClause = catchClause;
};

dist$6.TryFinallyStatement = function TryFinallyStatement(_ref83) {
  var body = _ref83.body,
      catchClause = _ref83.catchClause,
      finalizer = _ref83.finalizer;

  _classCallCheck$g(this, TryFinallyStatement);

  this.type = 'TryFinallyStatement';
  this.body = body;
  this.catchClause = catchClause;
  this.finalizer = finalizer;
};

dist$6.UnaryExpression = function UnaryExpression(_ref84) {
  var operator = _ref84.operator,
      operand = _ref84.operand;

  _classCallCheck$g(this, UnaryExpression);

  this.type = 'UnaryExpression';
  this.operator = operator;
  this.operand = operand;
};

dist$6.UpdateExpression = function UpdateExpression(_ref85) {
  var isPrefix = _ref85.isPrefix,
      operator = _ref85.operator,
      operand = _ref85.operand;

  _classCallCheck$g(this, UpdateExpression);

  this.type = 'UpdateExpression';
  this.isPrefix = isPrefix;
  this.operator = operator;
  this.operand = operand;
};

dist$6.VariableDeclaration = function VariableDeclaration(_ref86) {
  var kind = _ref86.kind,
      declarators = _ref86.declarators;

  _classCallCheck$g(this, VariableDeclaration);

  this.type = 'VariableDeclaration';
  this.kind = kind;
  this.declarators = declarators;
};

dist$6.VariableDeclarationStatement = function VariableDeclarationStatement(_ref87) {
  var declaration = _ref87.declaration;

  _classCallCheck$g(this, VariableDeclarationStatement);

  this.type = 'VariableDeclarationStatement';
  this.declaration = declaration;
};

dist$6.VariableDeclarator = function VariableDeclarator(_ref88) {
  var binding = _ref88.binding,
      init = _ref88.init;

  _classCallCheck$g(this, VariableDeclarator);

  this.type = 'VariableDeclarator';
  this.binding = binding;
  this.init = init;
};

dist$6.WhileStatement = function WhileStatement(_ref89) {
  var test = _ref89.test,
      body = _ref89.body;

  _classCallCheck$g(this, WhileStatement);

  this.type = 'WhileStatement';
  this.test = test;
  this.body = body;
};

dist$6.WithStatement = function WithStatement(_ref90) {
  var object = _ref90.object,
      body = _ref90.body;

  _classCallCheck$g(this, WithStatement);

  this.type = 'WithStatement';
  this.object = object;
  this.body = body;
};

dist$6.YieldExpression = function YieldExpression(_ref91) {
  var expression = _ref91.expression;

  _classCallCheck$g(this, YieldExpression);

  this.type = 'YieldExpression';
  this.expression = expression;
};

dist$6.YieldGeneratorExpression = function YieldGeneratorExpression(_ref92) {
  var expression = _ref92.expression;

  _classCallCheck$g(this, YieldGeneratorExpression);

  this.type = 'YieldGeneratorExpression';
  this.expression = expression;
};

Object.defineProperty(parser, "__esModule", {
  value: true
});
parser.GenericParser = undefined;

var _createClass$c = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _errors$1 = errors;

var _shiftRegexpAcceptor = dist$7;

var _shiftRegexpAcceptor2 = _interopRequireDefault$f(_shiftRegexpAcceptor);

var _tokenizer = tokenizer;

var _tokenizer2 = _interopRequireDefault$f(_tokenizer);

var _shiftAst$6 = dist$6;

var AST = _interopRequireWildcard$4(_shiftAst$6);

function _interopRequireWildcard$4(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault$f(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck$f(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$7(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$7(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2014 Shape Security, Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

// Empty parameter list for ArrowExpression
var ARROW_EXPRESSION_PARAMS = 'CoverParenthesizedExpressionAndArrowParameterList';
var EXPORT_UNKNOWN_SPECIFIER = 'ExportNameOfUnknownType';

var Precedence$1 = {
  Sequence: 0,
  Yield: 1,
  Assignment: 1,
  Conditional: 2,
  ArrowFunction: 2,
  LogicalOR: 3,
  LogicalAND: 4,
  BitwiseOR: 5,
  BitwiseXOR: 6,
  BitwiseAND: 7,
  Equality: 8,
  Relational: 9,
  BitwiseSHIFT: 10,
  Additive: 11,
  Multiplicative: 12,
  Unary: 13,
  Postfix: 14,
  Call: 15,
  New: 16,
  TaggedTemplate: 17,
  Member: 18,
  Primary: 19
};

var BinaryPrecedence$1 = {
  '||': Precedence$1.LogicalOR,
  '&&': Precedence$1.LogicalAND,
  '|': Precedence$1.BitwiseOR,
  '^': Precedence$1.BitwiseXOR,
  '&': Precedence$1.BitwiseAND,
  '==': Precedence$1.Equality,
  '!=': Precedence$1.Equality,
  '===': Precedence$1.Equality,
  '!==': Precedence$1.Equality,
  '<': Precedence$1.Relational,
  '>': Precedence$1.Relational,
  '<=': Precedence$1.Relational,
  '>=': Precedence$1.Relational,
  'in': Precedence$1.Relational,
  'instanceof': Precedence$1.Relational,
  '<<': Precedence$1.BitwiseSHIFT,
  '>>': Precedence$1.BitwiseSHIFT,
  '>>>': Precedence$1.BitwiseSHIFT,
  '+': Precedence$1.Additive,
  '-': Precedence$1.Additive,
  '*': Precedence$1.Multiplicative,
  '%': Precedence$1.Multiplicative,
  '/': Precedence$1.Multiplicative
};

function isValidSimpleAssignmentTarget(node) {
  if (node == null) return false;
  switch (node.type) {
    case 'IdentifierExpression':
    case 'ComputedMemberExpression':
    case 'StaticMemberExpression':
      return true;
  }
  return false;
}

function isPrefixOperator(token) {
  switch (token.type) {
    case _tokenizer.TokenType.INC:
    case _tokenizer.TokenType.DEC:
    case _tokenizer.TokenType.ADD:
    case _tokenizer.TokenType.SUB:
    case _tokenizer.TokenType.BIT_NOT:
    case _tokenizer.TokenType.NOT:
    case _tokenizer.TokenType.DELETE:
    case _tokenizer.TokenType.VOID:
    case _tokenizer.TokenType.TYPEOF:
      return true;
  }
  return false;
}

function isUpdateOperator(token) {
  return token.type === _tokenizer.TokenType.INC || token.type === _tokenizer.TokenType.DEC;
}

parser.GenericParser = function (_Tokenizer) {
  _inherits$7(GenericParser, _Tokenizer);

  function GenericParser(source) {
    _classCallCheck$f(this, GenericParser);

    var _this = _possibleConstructorReturn$7(this, (GenericParser.__proto__ || Object.getPrototypeOf(GenericParser)).call(this, source));

    _this.allowIn = true;
    _this.inFunctionBody = false;
    _this.inParameter = false;
    _this.allowYieldExpression = false;
    _this.allowAwaitExpression = false;
    _this.firstAwaitLocation = null; // for forbidding `await` in async arrow params.
    _this.module = false;
    _this.moduleIsTheGoalSymbol = false;
    _this.strict = false;

    // Cover grammar
    _this.isBindingElement = true;
    _this.isAssignmentTarget = true;
    _this.firstExprError = null;
    return _this;
  }

  _createClass$c(GenericParser, [{
    key: 'match',
    value: function match(subType) {
      return this.lookahead.type === subType;
    }
  }, {
    key: 'matchIdentifier',
    value: function matchIdentifier() {
      switch (this.lookahead.type) {
        case _tokenizer.TokenType.IDENTIFIER:
        case _tokenizer.TokenType.LET:
        case _tokenizer.TokenType.YIELD:
        case _tokenizer.TokenType.ASYNC:
          return true;
        case _tokenizer.TokenType.AWAIT:
          if (!this.moduleIsTheGoalSymbol) {
            if (this.firstAwaitLocation === null) {
              this.firstAwaitLocation = this.getLocation();
            }
            return true;
          }
          return false;
        case _tokenizer.TokenType.ESCAPED_KEYWORD:
          if (this.lookahead.value === 'await' && !this.moduleIsTheGoalSymbol) {
            if (this.firstAwaitLocation === null) {
              this.firstAwaitLocation = this.getLocation();
            }
            return true;
          }
          return this.lookahead.value === 'let' || this.lookahead.value === 'yield' || this.lookahead.value === 'async';
      }
      return false;
    }
  }, {
    key: 'eat',
    value: function eat(tokenType) {
      if (this.lookahead.type === tokenType) {
        return this.lex();
      }
      return null;
    }
  }, {
    key: 'expect',
    value: function expect(tokenType) {
      if (this.lookahead.type === tokenType) {
        return this.lex();
      }
      throw this.createUnexpected(this.lookahead);
    }
  }, {
    key: 'matchContextualKeyword',
    value: function matchContextualKeyword(keyword) {
      return this.lookahead.type === _tokenizer.TokenType.IDENTIFIER && !this.lookahead.escaped && this.lookahead.value === keyword;
    }
  }, {
    key: 'expectContextualKeyword',
    value: function expectContextualKeyword(keyword) {
      if (this.lookahead.type === _tokenizer.TokenType.IDENTIFIER && !this.lookahead.escaped && this.lookahead.value === keyword) {
        return this.lex();
      }
      throw this.createUnexpected(this.lookahead);
    }
  }, {
    key: 'eatContextualKeyword',
    value: function eatContextualKeyword(keyword) {
      if (this.lookahead.type === _tokenizer.TokenType.IDENTIFIER && !this.lookahead.escaped && this.lookahead.value === keyword) {
        return this.lex();
      }
      return null;
    }
  }, {
    key: 'consumeSemicolon',
    value: function consumeSemicolon() {
      if (this.eat(_tokenizer.TokenType.SEMICOLON)) return;
      if (this.hasLineTerminatorBeforeNext) return;
      if (!this.eof() && !this.match(_tokenizer.TokenType.RBRACE)) {
        throw this.createUnexpected(this.lookahead);
      }
    }

    // this is a no-op, reserved for future use

  }, {
    key: 'startNode',
    value: function startNode(node) {
      return node;
    }
  }, {
    key: 'copyNode',
    value: function copyNode(src, dest) {
      return dest;
    }
  }, {
    key: 'finishNode',
    value: function finishNode(node /* , startState */) {
      return node;
    }
  }, {
    key: 'parseModule',
    value: function parseModule() {
      this.moduleIsTheGoalSymbol = this.module = this.strict = true;
      this.lookahead = this.advance();

      var startState = this.startNode();

      var _parseBody = this.parseBody(),
          directives = _parseBody.directives,
          statements = _parseBody.statements;

      if (!this.match(_tokenizer.TokenType.EOS)) {
        throw this.createUnexpected(this.lookahead);
      }
      return this.finishNode(new AST.Module({ directives: directives, items: statements }), startState);
    }
  }, {
    key: 'parseScript',
    value: function parseScript() {
      this.lookahead = this.advance();

      var startState = this.startNode();

      var _parseBody2 = this.parseBody(),
          directives = _parseBody2.directives,
          statements = _parseBody2.statements;

      if (!this.match(_tokenizer.TokenType.EOS)) {
        throw this.createUnexpected(this.lookahead);
      }
      return this.finishNode(new AST.Script({ directives: directives, statements: statements }), startState);
    }
  }, {
    key: 'parseFunctionBody',
    value: function parseFunctionBody() {
      var oldInFunctionBody = this.inFunctionBody;
      var oldModule = this.module;
      var oldStrict = this.strict;
      this.inFunctionBody = true;
      this.module = false;

      var startState = this.startNode();
      this.expect(_tokenizer.TokenType.LBRACE);
      var body = new AST.FunctionBody(this.parseBody());
      this.expect(_tokenizer.TokenType.RBRACE);
      body = this.finishNode(body, startState);

      this.inFunctionBody = oldInFunctionBody;
      this.module = oldModule;
      this.strict = oldStrict;

      return body;
    }
  }, {
    key: 'parseBody',
    value: function parseBody() {
      var directives = [],
          statements = [],
          parsingDirectives = true,
          directiveOctal = null;

      while (true) {
        if (this.eof() || this.match(_tokenizer.TokenType.RBRACE)) break;
        var token = this.lookahead;
        var text = token.slice.text;
        var isStringLiteral = token.type === _tokenizer.TokenType.STRING;
        var isModule = this.module;
        var directiveLocation = this.getLocation();
        var directiveStartState = this.startNode();
        var stmt = isModule ? this.parseModuleItem() : this.parseStatementListItem();
        if (parsingDirectives) {
          if (isStringLiteral && stmt.type === 'ExpressionStatement' && stmt.expression.type === 'LiteralStringExpression') {
            if (!directiveOctal && token.octal) {
              directiveOctal = this.createErrorWithLocation(directiveLocation, 'Unexpected legacy octal escape sequence: \\' + token.octal);
            }
            var rawValue = text.slice(1, -1);
            if (rawValue === 'use strict') {
              this.strict = true;
            }
            directives.push(this.finishNode(new AST.Directive({ rawValue: rawValue }), directiveStartState));
          } else {
            parsingDirectives = false;
            if (directiveOctal && this.strict) {
              throw directiveOctal;
            }
            statements.push(stmt);
          }
        } else {
          statements.push(stmt);
        }
      }
      if (directiveOctal && this.strict) {
        throw directiveOctal;
      }

      return { directives: directives, statements: statements };
    }
  }, {
    key: 'parseImportSpecifier',
    value: function parseImportSpecifier() {
      var startState = this.startNode(),
          name = void 0;
      if (this.matchIdentifier()) {
        name = this.parseIdentifier();
        if (!this.eatContextualKeyword('as')) {
          return this.finishNode(new AST.ImportSpecifier({
            name: null,
            binding: this.finishNode(new AST.BindingIdentifier({ name: name }), startState)
          }), startState);
        }
      } else if (this.lookahead.type.klass.isIdentifierName) {
        name = this.parseIdentifierName();
        this.expectContextualKeyword('as');
      }

      return this.finishNode(new AST.ImportSpecifier({ name: name, binding: this.parseBindingIdentifier() }), startState);
    }
  }, {
    key: 'parseNameSpaceBinding',
    value: function parseNameSpaceBinding() {
      this.expect(_tokenizer.TokenType.MUL);
      this.expectContextualKeyword('as');
      return this.parseBindingIdentifier();
    }
  }, {
    key: 'parseNamedImports',
    value: function parseNamedImports() {
      var result = [];
      this.expect(_tokenizer.TokenType.LBRACE);
      while (!this.eat(_tokenizer.TokenType.RBRACE)) {
        result.push(this.parseImportSpecifier());
        if (!this.eat(_tokenizer.TokenType.COMMA)) {
          this.expect(_tokenizer.TokenType.RBRACE);
          break;
        }
      }
      return result;
    }
  }, {
    key: 'parseFromClause',
    value: function parseFromClause() {
      this.expectContextualKeyword('from');
      var value = this.expect(_tokenizer.TokenType.STRING).str;
      return value;
    }
  }, {
    key: 'parseImportDeclaration',
    value: function parseImportDeclaration() {
      var startState = this.startNode(),
          defaultBinding = null,
          moduleSpecifier = void 0;
      this.expect(_tokenizer.TokenType.IMPORT);
      if (this.match(_tokenizer.TokenType.STRING)) {
        moduleSpecifier = this.lex().str;
        this.consumeSemicolon();
        return this.finishNode(new AST.Import({ defaultBinding: null, namedImports: [], moduleSpecifier: moduleSpecifier }), startState);
      }
      if (this.matchIdentifier()) {
        defaultBinding = this.parseBindingIdentifier();
        if (!this.eat(_tokenizer.TokenType.COMMA)) {
          var decl = new AST.Import({ defaultBinding: defaultBinding, namedImports: [], moduleSpecifier: this.parseFromClause() });
          this.consumeSemicolon();
          return this.finishNode(decl, startState);
        }
      }
      if (this.match(_tokenizer.TokenType.MUL)) {
        var _decl = new AST.ImportNamespace({
          defaultBinding: defaultBinding,
          namespaceBinding: this.parseNameSpaceBinding(),
          moduleSpecifier: this.parseFromClause()
        });
        this.consumeSemicolon();
        return this.finishNode(_decl, startState);
      } else if (this.match(_tokenizer.TokenType.LBRACE)) {
        var _decl2 = new AST.Import({
          defaultBinding: defaultBinding,
          namedImports: this.parseNamedImports(),
          moduleSpecifier: this.parseFromClause()
        });
        this.consumeSemicolon();
        return this.finishNode(_decl2, startState);
      }
      throw this.createUnexpected(this.lookahead);
    }
  }, {
    key: 'parseExportSpecifier',
    value: function parseExportSpecifier() {
      var startState = this.startNode();
      var name = this.finishNode({ type: EXPORT_UNKNOWN_SPECIFIER, isIdentifier: this.matchIdentifier(), value: this.parseIdentifierName() }, startState);
      if (this.eatContextualKeyword('as')) {
        var exportedName = this.parseIdentifierName();
        return this.finishNode({ name: name, exportedName: exportedName }, startState);
      }
      return this.finishNode({ name: name, exportedName: null }, startState);
    }
  }, {
    key: 'parseExportClause',
    value: function parseExportClause() {
      this.expect(_tokenizer.TokenType.LBRACE);
      var result = [];
      while (!this.eat(_tokenizer.TokenType.RBRACE)) {
        result.push(this.parseExportSpecifier());
        if (!this.eat(_tokenizer.TokenType.COMMA)) {
          this.expect(_tokenizer.TokenType.RBRACE);
          break;
        }
      }
      return result;
    }
  }, {
    key: 'parseExportDeclaration',
    value: function parseExportDeclaration() {
      var _this2 = this;

      var startState = this.startNode(),
          decl = void 0;
      this.expect(_tokenizer.TokenType.EXPORT);
      switch (this.lookahead.type) {
        case _tokenizer.TokenType.MUL:
          this.lex();
          // export * FromClause ;
          decl = new AST.ExportAllFrom({ moduleSpecifier: this.parseFromClause() });
          this.consumeSemicolon();
          break;
        case _tokenizer.TokenType.LBRACE:
          {
            // export ExportClause FromClause ;
            // export ExportClause ;
            var namedExports = this.parseExportClause();
            var moduleSpecifier = null;
            if (this.matchContextualKeyword('from')) {
              moduleSpecifier = this.parseFromClause();
              decl = new AST.ExportFrom({ namedExports: namedExports.map(function (e) {
                  return _this2.copyNode(e, new AST.ExportFromSpecifier({ name: e.name.value, exportedName: e.exportedName }));
                }), moduleSpecifier: moduleSpecifier });
            } else {
              namedExports.forEach(function (_ref) {
                var name = _ref.name;

                if (!name.isIdentifier) {
                  throw _this2.createError(_errors$1.ErrorMessages.ILLEGAL_EXPORTED_NAME);
                }
              });
              decl = new AST.ExportLocals({ namedExports: namedExports.map(function (e) {
                  return _this2.copyNode(e, new AST.ExportLocalSpecifier({ name: _this2.copyNode(e.name, new AST.IdentifierExpression({ name: e.name.value })), exportedName: e.exportedName }));
                }) });
            }
            this.consumeSemicolon();
            break;
          }
        case _tokenizer.TokenType.CLASS:
          // export ClassDeclaration
          decl = new AST.Export({ declaration: this.parseClass({ isExpr: false, inDefault: false }) });
          break;
        case _tokenizer.TokenType.FUNCTION:
          // export HoistableDeclaration
          decl = new AST.Export({ declaration: this.parseFunction({ isExpr: false, inDefault: false, allowGenerator: true, isAsync: false }) });
          break;
        case _tokenizer.TokenType.ASYNC:
          {
            var preAsyncStartState = this.startNode();
            this.lex();
            decl = new AST.Export({ declaration: this.parseFunction({ isExpr: false, inDefault: false, allowGenerator: true, isAsync: true, startState: preAsyncStartState }) });
            break;
          }
        case _tokenizer.TokenType.DEFAULT:
          this.lex();
          switch (this.lookahead.type) {
            case _tokenizer.TokenType.FUNCTION:
              // export default HoistableDeclaration[Default]
              decl = new AST.ExportDefault({
                body: this.parseFunction({ isExpr: false, inDefault: true, allowGenerator: true, isAsync: false })
              });
              break;
            case _tokenizer.TokenType.CLASS:
              // export default ClassDeclaration[Default]
              decl = new AST.ExportDefault({ body: this.parseClass({ isExpr: false, inDefault: true }) });
              break;
            case _tokenizer.TokenType.ASYNC:
              {
                var _preAsyncStartState = this.startNode();
                var lexerState = this.saveLexerState();
                this.lex();
                if (!this.hasLineTerminatorBeforeNext && this.match(_tokenizer.TokenType.FUNCTION)) {
                  decl = new AST.ExportDefault({
                    body: this.parseFunction({ isExpr: false, inDefault: true, allowGenerator: false, isAsync: true, startState: _preAsyncStartState })
                  });
                  break;
                }
                this.restoreLexerState(lexerState);
              }
            // else fall through
            default:
              // export default [lookahead ∉ {function, async [no LineTerminatorHere] function, class}] AssignmentExpression[In] ;
              decl = new AST.ExportDefault({ body: this.parseAssignmentExpression() });
              this.consumeSemicolon();
              break;
          }
          break;
        case _tokenizer.TokenType.VAR:
        case _tokenizer.TokenType.LET:
        case _tokenizer.TokenType.CONST:
          // export LexicalDeclaration
          decl = new AST.Export({ declaration: this.parseVariableDeclaration(true) });
          this.consumeSemicolon();
          break;
        default:
          throw this.createUnexpected(this.lookahead);
      }
      return this.finishNode(decl, startState);
    }
  }, {
    key: 'parseModuleItem',
    value: function parseModuleItem() {
      switch (this.lookahead.type) {
        case _tokenizer.TokenType.IMPORT:
          return this.parseImportDeclaration();
        case _tokenizer.TokenType.EXPORT:
          return this.parseExportDeclaration();
        default:
          return this.parseStatementListItem();
      }
    }
  }, {
    key: 'lookaheadLexicalDeclaration',
    value: function lookaheadLexicalDeclaration() {
      if (this.match(_tokenizer.TokenType.LET) || this.match(_tokenizer.TokenType.CONST)) {
        var lexerState = this.saveLexerState();
        this.lex();
        if (this.matchIdentifier() || this.match(_tokenizer.TokenType.LBRACE) || this.match(_tokenizer.TokenType.LBRACK)) {
          this.restoreLexerState(lexerState);
          return true;
        }
        this.restoreLexerState(lexerState);
      }
      return false;
    }
  }, {
    key: 'parseStatementListItem',
    value: function parseStatementListItem() {
      if (this.eof()) throw this.createUnexpected(this.lookahead);

      switch (this.lookahead.type) {
        case _tokenizer.TokenType.FUNCTION:
          return this.parseFunction({ isExpr: false, inDefault: false, allowGenerator: true, isAsync: false });
        case _tokenizer.TokenType.CLASS:
          return this.parseClass({ isExpr: false, inDefault: false });
        case _tokenizer.TokenType.ASYNC:
          {
            var preAsyncStartState = this.getLocation();
            var lexerState = this.saveLexerState();
            this.lex();
            if (!this.hasLineTerminatorBeforeNext && this.match(_tokenizer.TokenType.FUNCTION)) {
              return this.parseFunction({ isExpr: false, inDefault: false, allowGenerator: true, isAsync: true, startState: preAsyncStartState });
            }
            this.restoreLexerState(lexerState);
            return this.parseStatement();
          }
        default:
          if (this.lookaheadLexicalDeclaration()) {
            var startState = this.startNode();
            return this.finishNode(this.parseVariableDeclarationStatement(), startState);
          }
          return this.parseStatement();
      }
    }
  }, {
    key: 'parseStatement',
    value: function parseStatement() {
      var startState = this.startNode();
      var stmt = this.isolateCoverGrammar(this.parseStatementHelper);
      return this.finishNode(stmt, startState);
    }
  }, {
    key: 'parseStatementHelper',
    value: function parseStatementHelper() {
      if (this.eof()) {
        throw this.createUnexpected(this.lookahead);
      }

      switch (this.lookahead.type) {
        case _tokenizer.TokenType.SEMICOLON:
          return this.parseEmptyStatement();
        case _tokenizer.TokenType.LBRACE:
          return this.parseBlockStatement();
        case _tokenizer.TokenType.LPAREN:
          return this.parseExpressionStatement();
        case _tokenizer.TokenType.BREAK:
          return this.parseBreakStatement();
        case _tokenizer.TokenType.CONTINUE:
          return this.parseContinueStatement();
        case _tokenizer.TokenType.DEBUGGER:
          return this.parseDebuggerStatement();
        case _tokenizer.TokenType.DO:
          return this.parseDoWhileStatement();
        case _tokenizer.TokenType.FOR:
          return this.parseForStatement();
        case _tokenizer.TokenType.IF:
          return this.parseIfStatement();
        case _tokenizer.TokenType.RETURN:
          return this.parseReturnStatement();
        case _tokenizer.TokenType.SWITCH:
          return this.parseSwitchStatement();
        case _tokenizer.TokenType.THROW:
          return this.parseThrowStatement();
        case _tokenizer.TokenType.TRY:
          return this.parseTryStatement();
        case _tokenizer.TokenType.VAR:
          return this.parseVariableDeclarationStatement();
        case _tokenizer.TokenType.WHILE:
          return this.parseWhileStatement();
        case _tokenizer.TokenType.WITH:
          return this.parseWithStatement();
        case _tokenizer.TokenType.FUNCTION:
        case _tokenizer.TokenType.CLASS:
          throw this.createUnexpected(this.lookahead);

        default:
          {
            var lexerState = this.saveLexerState();
            if (this.eat(_tokenizer.TokenType.LET)) {
              if (this.match(_tokenizer.TokenType.LBRACK)) {
                this.restoreLexerState(lexerState);
                throw this.createUnexpected(this.lookahead);
              }
              this.restoreLexerState(lexerState);
            } else if (this.eat(_tokenizer.TokenType.ASYNC)) {
              if (!this.hasLineTerminatorBeforeNext && this.match(_tokenizer.TokenType.FUNCTION)) {
                throw this.createUnexpected(this.lookahead);
              }
              this.restoreLexerState(lexerState);
            }
            var expr = this.parseExpression();
            // 12.12 Labelled Statements;
            if (expr.type === 'IdentifierExpression' && this.eat(_tokenizer.TokenType.COLON)) {
              var labeledBody = this.match(_tokenizer.TokenType.FUNCTION) ? this.parseFunction({ isExpr: false, inDefault: false, allowGenerator: false, isAsync: false }) : this.parseStatement();
              return new AST.LabeledStatement({ label: expr.name, body: labeledBody });
            }
            this.consumeSemicolon();
            return new AST.ExpressionStatement({ expression: expr });
          }
      }
    }
  }, {
    key: 'parseEmptyStatement',
    value: function parseEmptyStatement() {
      this.lex();
      return new AST.EmptyStatement();
    }
  }, {
    key: 'parseBlockStatement',
    value: function parseBlockStatement() {
      return new AST.BlockStatement({ block: this.parseBlock() });
    }
  }, {
    key: 'parseExpressionStatement',
    value: function parseExpressionStatement() {
      var expr = this.parseExpression();
      this.consumeSemicolon();
      return new AST.ExpressionStatement({ expression: expr });
    }
  }, {
    key: 'parseBreakStatement',
    value: function parseBreakStatement() {
      this.lex();

      // Catch the very common case first: immediately a semicolon (U+003B).
      if (this.eat(_tokenizer.TokenType.SEMICOLON) || this.hasLineTerminatorBeforeNext) {
        return new AST.BreakStatement({ label: null });
      }

      var label = null;
      if (this.matchIdentifier()) {
        label = this.parseIdentifier();
      }

      this.consumeSemicolon();

      return new AST.BreakStatement({ label: label });
    }
  }, {
    key: 'parseContinueStatement',
    value: function parseContinueStatement() {
      this.lex();

      // Catch the very common case first: immediately a semicolon (U+003B).
      if (this.eat(_tokenizer.TokenType.SEMICOLON) || this.hasLineTerminatorBeforeNext) {
        return new AST.ContinueStatement({ label: null });
      }

      var label = null;
      if (this.matchIdentifier()) {
        label = this.parseIdentifier();
      }

      this.consumeSemicolon();

      return new AST.ContinueStatement({ label: label });
    }
  }, {
    key: 'parseDebuggerStatement',
    value: function parseDebuggerStatement() {
      this.lex();
      this.consumeSemicolon();
      return new AST.DebuggerStatement();
    }
  }, {
    key: 'parseDoWhileStatement',
    value: function parseDoWhileStatement() {
      this.lex();
      var body = this.parseStatement();
      this.expect(_tokenizer.TokenType.WHILE);
      this.expect(_tokenizer.TokenType.LPAREN);
      var test = this.parseExpression();
      this.expect(_tokenizer.TokenType.RPAREN);
      this.eat(_tokenizer.TokenType.SEMICOLON);
      return new AST.DoWhileStatement({ body: body, test: test });
    }
  }, {
    key: 'parseForStatement',
    value: function parseForStatement() {
      this.lex();
      var isAwait = this.allowAwaitExpression && this.eat(_tokenizer.TokenType.AWAIT);
      this.expect(_tokenizer.TokenType.LPAREN);
      var test = null;
      var right = null;
      if (isAwait && this.match(_tokenizer.TokenType.SEMICOLON)) {
        throw this.createUnexpected(this.lookahead);
      }
      if (this.eat(_tokenizer.TokenType.SEMICOLON)) {
        if (!this.match(_tokenizer.TokenType.SEMICOLON)) {
          test = this.parseExpression();
        }
        this.expect(_tokenizer.TokenType.SEMICOLON);
        if (!this.match(_tokenizer.TokenType.RPAREN)) {
          right = this.parseExpression();
        }
        return new AST.ForStatement({ init: null, test: test, update: right, body: this.getIteratorStatementEpilogue() });
      }
      var startsWithLet = this.match(_tokenizer.TokenType.LET);
      var isForDecl = this.lookaheadLexicalDeclaration();
      var leftStartState = this.startNode();
      if (this.match(_tokenizer.TokenType.VAR) || isForDecl) {
        var _previousAllowIn = this.allowIn;
        this.allowIn = false;
        var init = this.parseVariableDeclaration(false);
        this.allowIn = _previousAllowIn;

        if (init.declarators.length === 1 && (this.match(_tokenizer.TokenType.IN) || this.matchContextualKeyword('of'))) {
          var ctor = void 0;
          var decl = init.declarators[0];

          if (this.match(_tokenizer.TokenType.IN)) {
            if (isAwait) {
              throw this.createUnexpected(this.lookahead);
            }
            if (decl.init !== null && (this.strict || init.kind !== 'var' || decl.binding.type !== 'BindingIdentifier')) {
              throw this.createError(_errors$1.ErrorMessages.INVALID_VAR_INIT_FOR_IN);
            }
            ctor = AST.ForInStatement;
            this.lex();
            right = this.parseExpression();
          } else {
            if (decl.init !== null) {
              throw this.createError(isAwait ? _errors$1.ErrorMessages.INVALID_VAR_INIT_FOR_AWAIT : _errors$1.ErrorMessages.INVALID_VAR_INIT_FOR_OF);
            }
            if (isAwait) {
              ctor = AST.ForAwaitStatement;
            } else {
              ctor = AST.ForOfStatement;
            }
            this.lex();
            right = this.parseAssignmentExpression();
          }

          var body = this.getIteratorStatementEpilogue();

          return new ctor({ left: init, right: right, body: body });
        } else if (isAwait) {
          throw this.createUnexpected(this.lookahead);
        }
        this.expect(_tokenizer.TokenType.SEMICOLON);
        if (init.declarators.some(function (decl) {
          return decl.binding.type !== 'BindingIdentifier' && decl.init === null;
        })) {
          throw this.createError(_errors$1.ErrorMessages.UNINITIALIZED_BINDINGPATTERN_IN_FOR_INIT);
        }
        if (!this.match(_tokenizer.TokenType.SEMICOLON)) {
          test = this.parseExpression();
        }
        this.expect(_tokenizer.TokenType.SEMICOLON);
        if (!this.match(_tokenizer.TokenType.RPAREN)) {
          right = this.parseExpression();
        }
        return new AST.ForStatement({ init: init, test: test, update: right, body: this.getIteratorStatementEpilogue() });
      }
      var previousAllowIn = this.allowIn;
      this.allowIn = false;
      var expr = this.inheritCoverGrammar(this.parseAssignmentExpressionOrTarget);
      this.allowIn = previousAllowIn;

      if (this.isAssignmentTarget && expr.type !== 'AssignmentExpression' && (this.match(_tokenizer.TokenType.IN) || this.matchContextualKeyword('of'))) {
        if (expr.type === 'ObjectAssignmentTarget' || expr.type === 'ArrayAssignmentTarget') {
          this.firstExprError = null;
        }
        if (startsWithLet && this.matchContextualKeyword('of')) {
          throw this.createError(isAwait ? _errors$1.ErrorMessages.INVALID_LHS_IN_FOR_AWAIT : _errors$1.ErrorMessages.INVALID_LHS_IN_FOR_OF);
        }
        var _ctor = void 0;
        if (this.match(_tokenizer.TokenType.IN)) {
          if (isAwait) {
            throw this.createUnexpected(this.lookahead);
          }
          _ctor = AST.ForInStatement;
          this.lex();
          right = this.parseExpression();
        } else {
          if (isAwait) {
            _ctor = AST.ForAwaitStatement;
          } else {
            _ctor = AST.ForOfStatement;
          }
          this.lex();
          right = this.parseAssignmentExpression();
        }

        return new _ctor({ left: this.transformDestructuring(expr), right: right, body: this.getIteratorStatementEpilogue() });
      } else if (isAwait) {
        throw this.createError(_errors$1.ErrorMessages.INVALID_LHS_IN_FOR_AWAIT);
      }
      if (this.firstExprError) {
        throw this.firstExprError;
      }
      while (this.eat(_tokenizer.TokenType.COMMA)) {
        var rhs = this.parseAssignmentExpression();
        expr = this.finishNode(new AST.BinaryExpression({ left: expr, operator: ',', right: rhs }), leftStartState);
      }
      if (this.match(_tokenizer.TokenType.IN)) {
        throw this.createError(_errors$1.ErrorMessages.INVALID_LHS_IN_FOR_IN);
      }
      if (this.matchContextualKeyword('of')) {
        throw this.createError(_errors$1.ErrorMessages.INVALID_LHS_IN_FOR_OF);
      }
      this.expect(_tokenizer.TokenType.SEMICOLON);
      if (!this.match(_tokenizer.TokenType.SEMICOLON)) {
        test = this.parseExpression();
      }
      this.expect(_tokenizer.TokenType.SEMICOLON);
      if (!this.match(_tokenizer.TokenType.RPAREN)) {
        right = this.parseExpression();
      }
      return new AST.ForStatement({ init: expr, test: test, update: right, body: this.getIteratorStatementEpilogue() });
    }
  }, {
    key: 'getIteratorStatementEpilogue',
    value: function getIteratorStatementEpilogue() {
      this.expect(_tokenizer.TokenType.RPAREN);
      var body = this.parseStatement();
      return body;
    }
  }, {
    key: 'parseIfStatementChild',
    value: function parseIfStatementChild() {
      return this.match(_tokenizer.TokenType.FUNCTION) ? this.parseFunction({ isExpr: false, inDefault: false, allowGenerator: false, isAsync: false }) : this.parseStatement();
    }
  }, {
    key: 'parseIfStatement',
    value: function parseIfStatement() {
      this.lex();
      this.expect(_tokenizer.TokenType.LPAREN);
      var test = this.parseExpression();
      this.expect(_tokenizer.TokenType.RPAREN);
      var consequent = this.parseIfStatementChild();
      var alternate = null;
      if (this.eat(_tokenizer.TokenType.ELSE)) {
        alternate = this.parseIfStatementChild();
      }
      return new AST.IfStatement({ test: test, consequent: consequent, alternate: alternate });
    }
  }, {
    key: 'parseReturnStatement',
    value: function parseReturnStatement() {
      if (!this.inFunctionBody) {
        throw this.createError(_errors$1.ErrorMessages.ILLEGAL_RETURN);
      }

      this.lex();

      // Catch the very common case first: immediately a semicolon (U+003B).
      if (this.eat(_tokenizer.TokenType.SEMICOLON) || this.hasLineTerminatorBeforeNext) {
        return new AST.ReturnStatement({ expression: null });
      }

      var expression = null;
      if (!this.match(_tokenizer.TokenType.RBRACE) && !this.eof()) {
        expression = this.parseExpression();
      }

      this.consumeSemicolon();
      return new AST.ReturnStatement({ expression: expression });
    }
  }, {
    key: 'parseSwitchStatement',
    value: function parseSwitchStatement() {
      this.lex();
      this.expect(_tokenizer.TokenType.LPAREN);
      var discriminant = this.parseExpression();
      this.expect(_tokenizer.TokenType.RPAREN);
      this.expect(_tokenizer.TokenType.LBRACE);

      if (this.eat(_tokenizer.TokenType.RBRACE)) {
        return new AST.SwitchStatement({ discriminant: discriminant, cases: [] });
      }

      var cases = this.parseSwitchCases();
      if (this.match(_tokenizer.TokenType.DEFAULT)) {
        var defaultCase = this.parseSwitchDefault();
        var postDefaultCases = this.parseSwitchCases();
        if (this.match(_tokenizer.TokenType.DEFAULT)) {
          throw this.createError(_errors$1.ErrorMessages.MULTIPLE_DEFAULTS_IN_SWITCH);
        }
        this.expect(_tokenizer.TokenType.RBRACE);
        return new AST.SwitchStatementWithDefault({
          discriminant: discriminant,
          preDefaultCases: cases,
          defaultCase: defaultCase,
          postDefaultCases: postDefaultCases
        });
      }
      this.expect(_tokenizer.TokenType.RBRACE);
      return new AST.SwitchStatement({ discriminant: discriminant, cases: cases });
    }
  }, {
    key: 'parseSwitchCases',
    value: function parseSwitchCases() {
      var result = [];
      while (!(this.eof() || this.match(_tokenizer.TokenType.RBRACE) || this.match(_tokenizer.TokenType.DEFAULT))) {
        result.push(this.parseSwitchCase());
      }
      return result;
    }
  }, {
    key: 'parseSwitchCase',
    value: function parseSwitchCase() {
      var startState = this.startNode();
      this.expect(_tokenizer.TokenType.CASE);
      return this.finishNode(new AST.SwitchCase({
        test: this.parseExpression(),
        consequent: this.parseSwitchCaseBody()
      }), startState);
    }
  }, {
    key: 'parseSwitchDefault',
    value: function parseSwitchDefault() {
      var startState = this.startNode();
      this.expect(_tokenizer.TokenType.DEFAULT);
      return this.finishNode(new AST.SwitchDefault({ consequent: this.parseSwitchCaseBody() }), startState);
    }
  }, {
    key: 'parseSwitchCaseBody',
    value: function parseSwitchCaseBody() {
      this.expect(_tokenizer.TokenType.COLON);
      return this.parseStatementListInSwitchCaseBody();
    }
  }, {
    key: 'parseStatementListInSwitchCaseBody',
    value: function parseStatementListInSwitchCaseBody() {
      var result = [];
      while (!(this.eof() || this.match(_tokenizer.TokenType.RBRACE) || this.match(_tokenizer.TokenType.DEFAULT) || this.match(_tokenizer.TokenType.CASE))) {
        result.push(this.parseStatementListItem());
      }
      return result;
    }
  }, {
    key: 'parseThrowStatement',
    value: function parseThrowStatement() {
      var token = this.lex();
      if (this.hasLineTerminatorBeforeNext) {
        throw this.createErrorWithLocation(token, _errors$1.ErrorMessages.NEWLINE_AFTER_THROW);
      }
      var expression = this.parseExpression();
      this.consumeSemicolon();
      return new AST.ThrowStatement({ expression: expression });
    }
  }, {
    key: 'parseTryStatement',
    value: function parseTryStatement() {
      this.lex();
      var body = this.parseBlock();

      if (this.match(_tokenizer.TokenType.CATCH)) {
        var catchClause = this.parseCatchClause();
        if (this.eat(_tokenizer.TokenType.FINALLY)) {
          var finalizer = this.parseBlock();
          return new AST.TryFinallyStatement({ body: body, catchClause: catchClause, finalizer: finalizer });
        }
        return new AST.TryCatchStatement({ body: body, catchClause: catchClause });
      }

      if (this.eat(_tokenizer.TokenType.FINALLY)) {
        var _finalizer = this.parseBlock();
        return new AST.TryFinallyStatement({ body: body, catchClause: null, finalizer: _finalizer });
      }
      throw this.createError(_errors$1.ErrorMessages.NO_CATCH_OR_FINALLY);
    }
  }, {
    key: 'parseVariableDeclarationStatement',
    value: function parseVariableDeclarationStatement() {
      var declaration = this.parseVariableDeclaration(true);
      this.consumeSemicolon();
      return new AST.VariableDeclarationStatement({ declaration: declaration });
    }
  }, {
    key: 'parseWhileStatement',
    value: function parseWhileStatement() {
      this.lex();
      this.expect(_tokenizer.TokenType.LPAREN);
      var test = this.parseExpression();
      var body = this.getIteratorStatementEpilogue();
      return new AST.WhileStatement({ test: test, body: body });
    }
  }, {
    key: 'parseWithStatement',
    value: function parseWithStatement() {
      this.lex();
      this.expect(_tokenizer.TokenType.LPAREN);
      var object = this.parseExpression();
      this.expect(_tokenizer.TokenType.RPAREN);
      var body = this.parseStatement();
      return new AST.WithStatement({ object: object, body: body });
    }
  }, {
    key: 'parseCatchClause',
    value: function parseCatchClause() {
      var startState = this.startNode();

      this.lex();
      this.expect(_tokenizer.TokenType.LPAREN);
      if (this.match(_tokenizer.TokenType.RPAREN) || this.match(_tokenizer.TokenType.LPAREN)) {
        throw this.createUnexpected(this.lookahead);
      }
      var binding = this.parseBindingTarget();
      this.expect(_tokenizer.TokenType.RPAREN);
      var body = this.parseBlock();

      return this.finishNode(new AST.CatchClause({ binding: binding, body: body }), startState);
    }
  }, {
    key: 'parseBlock',
    value: function parseBlock() {
      var startState = this.startNode();
      this.expect(_tokenizer.TokenType.LBRACE);
      var body = [];
      while (!this.match(_tokenizer.TokenType.RBRACE)) {
        body.push(this.parseStatementListItem());
      }
      this.expect(_tokenizer.TokenType.RBRACE);
      return this.finishNode(new AST.Block({ statements: body }), startState);
    }
  }, {
    key: 'parseVariableDeclaration',
    value: function parseVariableDeclaration(bindingPatternsMustHaveInit) {
      var startState = this.startNode();
      var token = this.lex();

      // preceded by this.match(TokenSubType.VAR) || this.match(TokenSubType.LET);
      var kind = token.type === _tokenizer.TokenType.VAR ? 'var' : token.type === _tokenizer.TokenType.CONST ? 'const' : 'let';
      var declarators = this.parseVariableDeclaratorList(bindingPatternsMustHaveInit);
      return this.finishNode(new AST.VariableDeclaration({ kind: kind, declarators: declarators }), startState);
    }
  }, {
    key: 'parseVariableDeclaratorList',
    value: function parseVariableDeclaratorList(bindingPatternsMustHaveInit) {
      var result = [];
      do {
        result.push(this.parseVariableDeclarator(bindingPatternsMustHaveInit));
      } while (this.eat(_tokenizer.TokenType.COMMA));
      return result;
    }
  }, {
    key: 'parseVariableDeclarator',
    value: function parseVariableDeclarator(bindingPatternsMustHaveInit) {
      var startState = this.startNode();

      if (this.match(_tokenizer.TokenType.LPAREN)) {
        throw this.createUnexpected(this.lookahead);
      }

      var previousAllowIn = this.allowIn;
      this.allowIn = true;
      var binding = this.parseBindingTarget();
      this.allowIn = previousAllowIn;

      if (bindingPatternsMustHaveInit && binding.type !== 'BindingIdentifier' && !this.match(_tokenizer.TokenType.ASSIGN)) {
        this.expect(_tokenizer.TokenType.ASSIGN);
      }

      var init = null;
      if (this.eat(_tokenizer.TokenType.ASSIGN)) {
        init = this.parseAssignmentExpression();
      }

      return this.finishNode(new AST.VariableDeclarator({ binding: binding, init: init }), startState);
    }
  }, {
    key: 'isolateCoverGrammar',
    value: function isolateCoverGrammar(parser) {
      var oldIsBindingElement = this.isBindingElement,
          oldIsAssignmentTarget = this.isAssignmentTarget,
          oldFirstExprError = this.firstExprError,
          result = void 0;
      this.isBindingElement = this.isAssignmentTarget = true;
      this.firstExprError = null;
      result = parser.call(this);
      if (this.firstExprError !== null) {
        throw this.firstExprError;
      }
      this.isBindingElement = oldIsBindingElement;
      this.isAssignmentTarget = oldIsAssignmentTarget;
      this.firstExprError = oldFirstExprError;
      return result;
    }
  }, {
    key: 'inheritCoverGrammar',
    value: function inheritCoverGrammar(parser) {
      var oldIsBindingElement = this.isBindingElement,
          oldIsAssignmentTarget = this.isAssignmentTarget,
          oldFirstExprError = this.firstExprError,
          result = void 0;
      this.isBindingElement = this.isAssignmentTarget = true;
      this.firstExprError = null;
      result = parser.call(this);
      this.isBindingElement = this.isBindingElement && oldIsBindingElement;
      this.isAssignmentTarget = this.isAssignmentTarget && oldIsAssignmentTarget;
      this.firstExprError = oldFirstExprError || this.firstExprError;
      return result;
    }
  }, {
    key: 'parseExpression',
    value: function parseExpression() {
      var startState = this.startNode();

      var left = this.parseAssignmentExpression();
      if (this.match(_tokenizer.TokenType.COMMA)) {
        while (!this.eof()) {
          if (!this.match(_tokenizer.TokenType.COMMA)) break;
          this.lex();
          var right = this.parseAssignmentExpression();
          left = this.finishNode(new AST.BinaryExpression({ left: left, operator: ',', right: right }), startState);
        }
      }
      return left;
    }
  }, {
    key: 'finishArrowParams',
    value: function finishArrowParams(head) {
      var _head$params = head.params,
          params = _head$params === undefined ? null : _head$params,
          _head$rest = head.rest,
          rest = _head$rest === undefined ? null : _head$rest;

      if (head.type !== ARROW_EXPRESSION_PARAMS) {
        if (head.type === 'IdentifierExpression') {
          params = [this.targetToBinding(this.transformDestructuring(head))];
        } else {
          throw this.createUnexpected(this.lookahead);
        }
      }
      return this.copyNode(head, new AST.FormalParameters({ items: params, rest: rest }));
    }
  }, {
    key: 'parseArrowExpressionTail',
    value: function parseArrowExpressionTail(params, isAsync, startState) {
      this.expect(_tokenizer.TokenType.ARROW);
      var previousYield = this.allowYieldExpression;
      var previousAwait = this.allowAwaitExpression;
      var previousAwaitLocation = this.firstAwaitLocation;
      this.allowYieldExpression = false;
      this.allowAwaitExpression = isAsync;
      this.firstAwaitLocation = null;
      var body = void 0;
      if (this.match(_tokenizer.TokenType.LBRACE)) {
        var previousAllowIn = this.allowIn;
        this.allowIn = true;
        body = this.parseFunctionBody();
        this.allowIn = previousAllowIn;
      } else {
        body = this.parseAssignmentExpression();
      }
      this.allowYieldExpression = previousYield;
      this.allowAwaitExpression = previousAwait;
      this.firstAwaitLocation = previousAwaitLocation;
      return this.finishNode(new AST.ArrowExpression({ isAsync: isAsync, params: params, body: body }), startState);
    }
  }, {
    key: 'parseAssignmentExpression',
    value: function parseAssignmentExpression() {
      return this.isolateCoverGrammar(this.parseAssignmentExpressionOrTarget);
    }
  }, {
    key: 'parseAssignmentExpressionOrTarget',
    value: function parseAssignmentExpressionOrTarget() {
      var startState = this.startNode();
      if (this.allowYieldExpression && this.match(_tokenizer.TokenType.YIELD)) {
        this.isBindingElement = this.isAssignmentTarget = false;
        return this.parseYieldExpression();
      }
      var expr = this.parseConditionalExpression();
      if (!this.hasLineTerminatorBeforeNext && this.match(_tokenizer.TokenType.ARROW)) {
        this.isBindingElement = this.isAssignmentTarget = false;
        this.firstExprError = null;
        var isAsync = expr.type === ARROW_EXPRESSION_PARAMS && expr.isAsync;
        return this.parseArrowExpressionTail(this.finishArrowParams(expr), isAsync, startState);
      }
      var isAssignmentOperator = false;
      var operator = this.lookahead;
      switch (operator.type) {
        case _tokenizer.TokenType.ASSIGN_BIT_OR:
        case _tokenizer.TokenType.ASSIGN_BIT_XOR:
        case _tokenizer.TokenType.ASSIGN_BIT_AND:
        case _tokenizer.TokenType.ASSIGN_SHL:
        case _tokenizer.TokenType.ASSIGN_SHR:
        case _tokenizer.TokenType.ASSIGN_SHR_UNSIGNED:
        case _tokenizer.TokenType.ASSIGN_ADD:
        case _tokenizer.TokenType.ASSIGN_SUB:
        case _tokenizer.TokenType.ASSIGN_MUL:
        case _tokenizer.TokenType.ASSIGN_DIV:
        case _tokenizer.TokenType.ASSIGN_MOD:
        case _tokenizer.TokenType.ASSIGN_EXP:
          isAssignmentOperator = true;
          break;
      }
      if (isAssignmentOperator) {
        if (!this.isAssignmentTarget || !isValidSimpleAssignmentTarget(expr)) {
          throw this.createError(_errors$1.ErrorMessages.INVALID_LHS_IN_ASSIGNMENT);
        }
        expr = this.transformDestructuring(expr);
      } else if (operator.type === _tokenizer.TokenType.ASSIGN) {
        if (!this.isAssignmentTarget) {
          throw this.createError(_errors$1.ErrorMessages.INVALID_LHS_IN_ASSIGNMENT);
        }
        expr = this.transformDestructuring(expr);
      } else {
        return expr;
      }
      this.lex();
      var rhs = this.parseAssignmentExpression();

      this.firstExprError = null;
      var node = void 0;
      if (operator.type === _tokenizer.TokenType.ASSIGN) {
        node = new AST.AssignmentExpression({ binding: expr, expression: rhs });
      } else {
        node = new AST.CompoundAssignmentExpression({ binding: expr, operator: operator.type.name, expression: rhs });
        this.isBindingElement = this.isAssignmentTarget = false;
      }
      return this.finishNode(node, startState);
    }
  }, {
    key: 'targetToBinding',
    value: function targetToBinding(node) {
      var _this3 = this;

      if (node === null) {
        return null;
      }

      switch (node.type) {
        case 'AssignmentTargetIdentifier':
          return this.copyNode(node, new AST.BindingIdentifier({ name: node.name }));
        case 'ArrayAssignmentTarget':
          return this.copyNode(node, new AST.ArrayBinding({ elements: node.elements.map(function (e) {
              return _this3.targetToBinding(e);
            }), rest: this.targetToBinding(node.rest) }));
        case 'ObjectAssignmentTarget':
          return this.copyNode(node, new AST.ObjectBinding({ properties: node.properties.map(function (p) {
              return _this3.targetToBinding(p);
            }), rest: this.targetToBinding(node.rest) }));
        case 'AssignmentTargetPropertyIdentifier':
          return this.copyNode(node, new AST.BindingPropertyIdentifier({ binding: this.targetToBinding(node.binding), init: node.init }));
        case 'AssignmentTargetPropertyProperty':
          return this.copyNode(node, new AST.BindingPropertyProperty({ name: node.name, binding: this.targetToBinding(node.binding) }));
        case 'AssignmentTargetWithDefault':
          return this.copyNode(node, new AST.BindingWithDefault({ binding: this.targetToBinding(node.binding), init: node.init }));
      }

      // istanbul ignore next
      throw new Error('Not reached');
    }
  }, {
    key: 'transformDestructuring',
    value: function transformDestructuring(node) {
      var _this4 = this;

      switch (node.type) {

        case 'DataProperty':
          return this.copyNode(node, new AST.AssignmentTargetPropertyProperty({
            name: node.name,
            binding: this.transformDestructuringWithDefault(node.expression)
          }));
        case 'ShorthandProperty':
          return this.copyNode(node, new AST.AssignmentTargetPropertyIdentifier({
            binding: this.copyNode(node, new AST.AssignmentTargetIdentifier({ name: node.name.name })),
            init: null
          }));

        case 'ObjectExpression':
          {
            var last = node.properties.length > 0 ? node.properties[node.properties.length - 1] : void 0;
            if (last != null && last.type === 'SpreadProperty') {
              return this.copyNode(node, new AST.ObjectAssignmentTarget({
                properties: node.properties.slice(0, -1).map(function (e) {
                  return e && _this4.transformDestructuringWithDefault(e);
                }),
                rest: this.transformDestructuring(last.expression)
              }));
            }

            return this.copyNode(node, new AST.ObjectAssignmentTarget({
              properties: node.properties.map(function (e) {
                return e && _this4.transformDestructuringWithDefault(e);
              }),
              rest: null
            }));
          }
        case 'ArrayExpression':
          {
            var _last = node.elements[node.elements.length - 1];
            if (_last != null && _last.type === 'SpreadElement') {
              return this.copyNode(node, new AST.ArrayAssignmentTarget({
                elements: node.elements.slice(0, -1).map(function (e) {
                  return e && _this4.transformDestructuringWithDefault(e);
                }),
                rest: this.copyNode(_last.expression, this.transformDestructuring(_last.expression))
              }));
            }
            return this.copyNode(node, new AST.ArrayAssignmentTarget({
              elements: node.elements.map(function (e) {
                return e && _this4.transformDestructuringWithDefault(e);
              }),
              rest: null
            }));
          }
        case 'IdentifierExpression':
          return this.copyNode(node, new AST.AssignmentTargetIdentifier({ name: node.name }));

        case 'StaticPropertyName':
          return this.copyNode(node, new AST.AssignmentTargetIdentifier({ name: node.value }));

        case 'ComputedMemberExpression':
          return this.copyNode(node, new AST.ComputedMemberAssignmentTarget({ object: node.object, expression: node.expression }));
        case 'StaticMemberExpression':
          return this.copyNode(node, new AST.StaticMemberAssignmentTarget({ object: node.object, property: node.property }));

        case 'ArrayAssignmentTarget':
        case 'ObjectAssignmentTarget':
        case 'ComputedMemberAssignmentTarget':
        case 'StaticMemberAssignmentTarget':
        case 'AssignmentTargetIdentifier':
        case 'AssignmentTargetPropertyIdentifier':
        case 'AssignmentTargetPropertyProperty':
        case 'AssignmentTargetWithDefault':
          return node;
      }
      // istanbul ignore next
      throw new Error('Not reached');
    }
  }, {
    key: 'transformDestructuringWithDefault',
    value: function transformDestructuringWithDefault(node) {
      switch (node.type) {
        case 'AssignmentExpression':
          return this.copyNode(node, new AST.AssignmentTargetWithDefault({
            binding: this.transformDestructuring(node.binding),
            init: node.expression
          }));
      }
      return this.transformDestructuring(node);
    }
  }, {
    key: 'lookaheadAssignmentExpression',
    value: function lookaheadAssignmentExpression() {
      if (this.matchIdentifier()) {
        return true;
      }
      switch (this.lookahead.type) {
        case _tokenizer.TokenType.ADD:
        case _tokenizer.TokenType.ASSIGN_DIV:
        case _tokenizer.TokenType.BIT_NOT:
        case _tokenizer.TokenType.CLASS:
        case _tokenizer.TokenType.DEC:
        case _tokenizer.TokenType.DELETE:
        case _tokenizer.TokenType.DIV:
        case _tokenizer.TokenType.FALSE:
        case _tokenizer.TokenType.FUNCTION:
        case _tokenizer.TokenType.INC:
        case _tokenizer.TokenType.LBRACE:
        case _tokenizer.TokenType.LBRACK:
        case _tokenizer.TokenType.LPAREN:
        case _tokenizer.TokenType.NEW:
        case _tokenizer.TokenType.NOT:
        case _tokenizer.TokenType.NULL:
        case _tokenizer.TokenType.NUMBER:
        case _tokenizer.TokenType.STRING:
        case _tokenizer.TokenType.SUB:
        case _tokenizer.TokenType.SUPER:
        case _tokenizer.TokenType.THIS:
        case _tokenizer.TokenType.TRUE:
        case _tokenizer.TokenType.TYPEOF:
        case _tokenizer.TokenType.VOID:
        case _tokenizer.TokenType.TEMPLATE:
          return true;
      }
      return false;
    }
  }, {
    key: 'parseYieldExpression',
    value: function parseYieldExpression() {
      var startState = this.startNode();

      this.lex();
      if (this.hasLineTerminatorBeforeNext) {
        return this.finishNode(new AST.YieldExpression({ expression: null }), startState);
      }
      var isGenerator = !!this.eat(_tokenizer.TokenType.MUL);
      var expr = null;
      if (isGenerator || this.lookaheadAssignmentExpression()) {
        expr = this.parseAssignmentExpression();
      }
      var ctor = isGenerator ? AST.YieldGeneratorExpression : AST.YieldExpression;
      return this.finishNode(new ctor({ expression: expr }), startState);
    }
  }, {
    key: 'parseConditionalExpression',
    value: function parseConditionalExpression() {
      var startState = this.startNode();
      var test = this.parseBinaryExpression();
      if (this.firstExprError) return test;
      if (this.eat(_tokenizer.TokenType.CONDITIONAL)) {
        this.isBindingElement = this.isAssignmentTarget = false;
        var previousAllowIn = this.allowIn;
        this.allowIn = true;
        var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);
        this.allowIn = previousAllowIn;
        this.expect(_tokenizer.TokenType.COLON);
        var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);
        return this.finishNode(new AST.ConditionalExpression({ test: test, consequent: consequent, alternate: alternate }), startState);
      }
      return test;
    }
  }, {
    key: 'isBinaryOperator',
    value: function isBinaryOperator(type) {
      switch (type) {
        case _tokenizer.TokenType.OR:
        case _tokenizer.TokenType.AND:
        case _tokenizer.TokenType.BIT_OR:
        case _tokenizer.TokenType.BIT_XOR:
        case _tokenizer.TokenType.BIT_AND:
        case _tokenizer.TokenType.EQ:
        case _tokenizer.TokenType.NE:
        case _tokenizer.TokenType.EQ_STRICT:
        case _tokenizer.TokenType.NE_STRICT:
        case _tokenizer.TokenType.LT:
        case _tokenizer.TokenType.GT:
        case _tokenizer.TokenType.LTE:
        case _tokenizer.TokenType.GTE:
        case _tokenizer.TokenType.INSTANCEOF:
        case _tokenizer.TokenType.SHL:
        case _tokenizer.TokenType.SHR:
        case _tokenizer.TokenType.SHR_UNSIGNED:
        case _tokenizer.TokenType.ADD:
        case _tokenizer.TokenType.SUB:
        case _tokenizer.TokenType.MUL:
        case _tokenizer.TokenType.DIV:
        case _tokenizer.TokenType.MOD:
          return true;
        case _tokenizer.TokenType.IN:
          return this.allowIn;
        default:
          return false;
      }
    }
  }, {
    key: 'parseBinaryExpression',
    value: function parseBinaryExpression() {
      var _this5 = this;

      var startState = this.startNode();
      var left = this.parseExponentiationExpression();
      if (this.firstExprError) {
        return left;
      }

      var operator = this.lookahead.type;
      if (!this.isBinaryOperator(operator)) return left;

      this.isBindingElement = this.isAssignmentTarget = false;

      this.lex();
      var stack = [];
      stack.push({ startState: startState, left: left, operator: operator, precedence: BinaryPrecedence$1[operator.name] });
      startState = this.startNode();
      var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
      operator = this.lookahead.type;
      while (this.isBinaryOperator(operator)) {
        var precedence = BinaryPrecedence$1[operator.name];
        // Reduce: make a binary expression from the three topmost entries.
        while (stack.length && precedence <= stack[stack.length - 1].precedence) {
          var stackItem = stack[stack.length - 1];
          var stackOperator = stackItem.operator;
          left = stackItem.left;
          stack.pop();
          startState = stackItem.startState;
          right = this.finishNode(new AST.BinaryExpression({ left: left, operator: stackOperator.name, right: right }), startState);
        }

        this.lex();
        stack.push({ startState: startState, left: right, operator: operator, precedence: precedence });

        startState = this.startNode();
        right = this.isolateCoverGrammar(this.parseExponentiationExpression);
        operator = this.lookahead.type;
      }

      // Final reduce to clean-up the stack.
      return stack.reduceRight(function (expr, stackItem) {
        return _this5.finishNode(new AST.BinaryExpression({
          left: stackItem.left,
          operator: stackItem.operator.name,
          right: expr
        }), stackItem.startState);
      }, right);
    }
  }, {
    key: 'parseExponentiationExpression',
    value: function parseExponentiationExpression() {
      var startState = this.startNode();

      var leftIsParenthesized = this.lookahead.type === _tokenizer.TokenType.LPAREN;
      var left = this.parseUnaryExpression();
      if (this.lookahead.type !== _tokenizer.TokenType.EXP) {
        return left;
      }
      if (left.type === 'UnaryExpression' && !leftIsParenthesized) {
        throw this.createError(_errors$1.ErrorMessages.INVALID_EXPONENTIATION_LHS);
      }
      this.lex();

      this.isBindingElement = this.isAssignmentTarget = false;

      var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
      return this.finishNode(new AST.BinaryExpression({ left: left, operator: '**', right: right }), startState);
    }
  }, {
    key: 'parseUnaryExpression',
    value: function parseUnaryExpression() {
      if (this.lookahead.type.klass !== _tokenizer.TokenClass.Punctuator && this.lookahead.type.klass !== _tokenizer.TokenClass.Keyword) {
        return this.parseUpdateExpression();
      }

      var startState = this.startNode();
      if (this.allowAwaitExpression && this.eat(_tokenizer.TokenType.AWAIT)) {
        this.isBindingElement = this.isAssignmentTarget = false;
        var expression = this.isolateCoverGrammar(this.parseUnaryExpression);
        return this.finishNode(new AST.AwaitExpression({ expression: expression }), startState);
      }

      var operator = this.lookahead;
      if (!isPrefixOperator(operator)) {
        return this.parseUpdateExpression();
      }

      this.lex();
      this.isBindingElement = this.isAssignmentTarget = false;

      var node = void 0;
      if (isUpdateOperator(operator)) {
        var operandStartLocation = this.getLocation();
        var operand = this.isolateCoverGrammar(this.parseUnaryExpression);
        if (!isValidSimpleAssignmentTarget(operand)) {
          throw this.createErrorWithLocation(operandStartLocation, _errors$1.ErrorMessages.INVALID_UPDATE_OPERAND);
        }
        operand = this.transformDestructuring(operand);
        node = new AST.UpdateExpression({ isPrefix: true, operator: operator.value, operand: operand });
      } else {
        var _operand = this.isolateCoverGrammar(this.parseUnaryExpression);
        node = new AST.UnaryExpression({ operator: operator.value, operand: _operand });
      }

      return this.finishNode(node, startState);
    }
  }, {
    key: 'parseUpdateExpression',
    value: function parseUpdateExpression() {
      var startLocation = this.getLocation();
      var startState = this.startNode();

      var operand = this.parseLeftHandSideExpression({ allowCall: true });
      if (this.firstExprError || this.hasLineTerminatorBeforeNext) return operand;

      var operator = this.lookahead;
      if (!isUpdateOperator(operator)) return operand;
      this.lex();
      this.isBindingElement = this.isAssignmentTarget = false;
      if (!isValidSimpleAssignmentTarget(operand)) {
        throw this.createErrorWithLocation(startLocation, _errors$1.ErrorMessages.INVALID_UPDATE_OPERAND);
      }
      operand = this.transformDestructuring(operand);

      return this.finishNode(new AST.UpdateExpression({ isPrefix: false, operator: operator.value, operand: operand }), startState);
    }
  }, {
    key: 'parseLeftHandSideExpression',
    value: function parseLeftHandSideExpression(_ref2) {
      var _this6 = this;

      var allowCall = _ref2.allowCall;

      var startState = this.startNode();
      var previousAllowIn = this.allowIn;
      this.allowIn = true;

      var expr = void 0,
          token = this.lookahead;

      if (this.eat(_tokenizer.TokenType.SUPER)) {
        this.isBindingElement = false;
        this.isAssignmentTarget = false;
        expr = this.finishNode(new AST.Super(), startState);
        if (this.match(_tokenizer.TokenType.LPAREN)) {
          if (allowCall) {
            expr = this.finishNode(new AST.CallExpression({
              callee: expr,
              arguments: this.parseArgumentList().args
            }), startState);
          } else {
            throw this.createUnexpected(token);
          }
        } else if (this.match(_tokenizer.TokenType.LBRACK)) {
          expr = this.finishNode(new AST.ComputedMemberExpression({
            object: expr,
            expression: this.parseComputedMember()
          }), startState);
          this.isAssignmentTarget = true;
        } else if (this.match(_tokenizer.TokenType.PERIOD)) {
          expr = this.finishNode(new AST.StaticMemberExpression({
            object: expr,
            property: this.parseStaticMember()
          }), startState);
          this.isAssignmentTarget = true;
        } else {
          throw this.createUnexpected(token);
        }
      } else if (this.match(_tokenizer.TokenType.NEW)) {
        this.isBindingElement = this.isAssignmentTarget = false;
        expr = this.parseNewExpression();
      } else if (this.match(_tokenizer.TokenType.ASYNC)) {
        expr = this.parsePrimaryExpression();
        // there's only three things this could be: an identifier, an async arrow, or an async function expression.
        if (expr.type === 'IdentifierExpression' && allowCall && !this.hasLineTerminatorBeforeNext) {
          if (this.matchIdentifier()) {
            // `async [no lineterminator here] identifier` must be an async arrow
            var afterAsyncStartState = this.startNode();
            var previousAwait = this.allowAwaitExpression;
            this.allowAwaitExpression = true;
            var param = this.parseBindingIdentifier();
            this.allowAwaitExpression = previousAwait;
            this.ensureArrow();
            return this.finishNode({
              type: ARROW_EXPRESSION_PARAMS,
              params: [param],
              rest: null,
              isAsync: true
            }, afterAsyncStartState);
          }
          if (this.match(_tokenizer.TokenType.LPAREN)) {
            // the maximally obnoxious case: `async (`
            var _afterAsyncStartState = this.startNode();
            var previousAwaitLocation = this.firstAwaitLocation;
            this.firstAwaitLocation = null;

            var _parseArgumentList = this.parseArgumentList(),
                args = _parseArgumentList.args,
                locationFollowingFirstSpread = _parseArgumentList.locationFollowingFirstSpread;

            if (this.isBindingElement && !this.hasLineTerminatorBeforeNext && this.match(_tokenizer.TokenType.ARROW)) {
              if (locationFollowingFirstSpread !== null) {
                throw this.createErrorWithLocation(locationFollowingFirstSpread, _errors$1.ErrorMessages.UNEXPECTED_TOKEN(','));
              }
              if (this.firstAwaitLocation !== null) {
                throw this.createErrorWithLocation(this.firstAwaitLocation, _errors$1.ErrorMessages.NO_AWAIT_IN_ASYNC_PARAMS);
              }
              var rest = null;
              if (args.length > 0 && args[args.length - 1].type === 'SpreadElement') {
                rest = this.targetToBinding(this.transformDestructuringWithDefault(args[args.length - 1].expression));
                if (rest.init != null) {
                  throw this.createError(_errors$1.ErrorMessages.UNEXPECTED_REST_PARAMETERS_INITIALIZATION);
                }
                args = args.slice(0, -1);
              }
              var params = args.map(function (arg) {
                return _this6.targetToBinding(_this6.transformDestructuringWithDefault(arg));
              });
              return this.finishNode({
                type: ARROW_EXPRESSION_PARAMS,
                params: params,
                rest: rest,
                isAsync: true
              }, _afterAsyncStartState);
            }
            this.firstAwaitLocation = previousAwaitLocation || this.firstAwaitLocation;
            // otherwise we've just taken the first iteration of the loop below
            this.isBindingElement = this.isAssignmentTarget = false;
            expr = this.finishNode(new AST.CallExpression({
              callee: expr,
              arguments: args
            }), startState);
          }
        }
      } else {
        expr = this.parsePrimaryExpression();
        if (this.firstExprError) {
          return expr;
        }
      }

      while (true) {
        if (allowCall && this.match(_tokenizer.TokenType.LPAREN)) {
          this.isBindingElement = this.isAssignmentTarget = false;
          expr = this.finishNode(new AST.CallExpression({
            callee: expr,
            arguments: this.parseArgumentList().args
          }), startState);
        } else if (this.match(_tokenizer.TokenType.LBRACK)) {
          this.isBindingElement = false;
          this.isAssignmentTarget = true;
          expr = this.finishNode(new AST.ComputedMemberExpression({
            object: expr,
            expression: this.parseComputedMember()
          }), startState);
        } else if (this.match(_tokenizer.TokenType.PERIOD)) {
          this.isBindingElement = false;
          this.isAssignmentTarget = true;
          expr = this.finishNode(new AST.StaticMemberExpression({
            object: expr,
            property: this.parseStaticMember()
          }), startState);
        } else if (this.match(_tokenizer.TokenType.TEMPLATE)) {
          this.isBindingElement = this.isAssignmentTarget = false;
          expr = this.finishNode(new AST.TemplateExpression({
            tag: expr,
            elements: this.parseTemplateElements()
          }), startState);
        } else {
          break;
        }
      }

      this.allowIn = previousAllowIn;

      return expr;
    }
  }, {
    key: 'parseTemplateElements',
    value: function parseTemplateElements() {
      var startState = this.startNode();
      var token = this.lookahead;
      if (token.tail) {
        this.lex();
        return [this.finishNode(new AST.TemplateElement({ rawValue: token.slice.text.slice(1, -1) }), startState)];
      }
      var result = [this.finishNode(new AST.TemplateElement({ rawValue: this.lex().slice.text.slice(1, -2) }), startState)];
      while (true) {
        result.push(this.parseExpression());
        if (!this.match(_tokenizer.TokenType.RBRACE)) {
          throw this.createILLEGAL();
        }
        this.index = this.startIndex;
        this.line = this.startLine;
        this.lineStart = this.startLineStart;
        this.lookahead = this.scanTemplateElement();
        startState = this.startNode();
        token = this.lex();
        if (token.tail) {
          result.push(this.finishNode(new AST.TemplateElement({ rawValue: token.slice.text.slice(1, -1) }), startState));
          return result;
        }
        result.push(this.finishNode(new AST.TemplateElement({ rawValue: token.slice.text.slice(1, -2) }), startState));
      }
    }
  }, {
    key: 'parseStaticMember',
    value: function parseStaticMember() {
      this.lex();
      if (this.lookahead.type.klass.isIdentifierName) {
        return this.lex().value;
      }
      throw this.createUnexpected(this.lookahead);
    }
  }, {
    key: 'parseComputedMember',
    value: function parseComputedMember() {
      this.lex();
      var expr = this.parseExpression();
      this.expect(_tokenizer.TokenType.RBRACK);
      return expr;
    }
  }, {
    key: 'parseNewExpression',
    value: function parseNewExpression() {
      var _this7 = this;

      var startState = this.startNode();
      this.lex();
      if (this.eat(_tokenizer.TokenType.PERIOD)) {
        this.expectContextualKeyword('target');
        return this.finishNode(new AST.NewTargetExpression(), startState);
      }
      var callee = this.isolateCoverGrammar(function () {
        return _this7.parseLeftHandSideExpression({ allowCall: false });
      });
      return this.finishNode(new AST.NewExpression({
        callee: callee,
        arguments: this.match(_tokenizer.TokenType.LPAREN) ? this.parseArgumentList().args : []
      }), startState);
    }
  }, {
    key: 'parseRegexFlags',
    value: function parseRegexFlags(flags) {
      var global = false,
          ignoreCase = false,
          multiLine = false,
          unicode = false,
          sticky = false,
          dotAll = false;
      for (var i = 0; i < flags.length; ++i) {
        var f = flags[i];
        switch (f) {
          case 'g':
            if (global) {
              throw this.createError('Duplicate regular expression flag \'g\'');
            }
            global = true;
            break;
          case 'i':
            if (ignoreCase) {
              throw this.createError('Duplicate regular expression flag \'i\'');
            }
            ignoreCase = true;
            break;
          case 'm':
            if (multiLine) {
              throw this.createError('Duplicate regular expression flag \'m\'');
            }
            multiLine = true;
            break;
          case 'u':
            if (unicode) {
              throw this.createError('Duplicate regular expression flag \'u\'');
            }
            unicode = true;
            break;
          case 'y':
            if (sticky) {
              throw this.createError('Duplicate regular expression flag \'y\'');
            }
            sticky = true;
            break;
          case 's':
            if (dotAll) {
              throw this.createError('Duplicate regular expression flag \'s\'');
            }
            dotAll = true;
            break;
          default:
            throw this.createError('Invalid regular expression flag \'' + f + '\'');
        }
      }
      return { global: global, ignoreCase: ignoreCase, multiLine: multiLine, unicode: unicode, sticky: sticky, dotAll: dotAll };
    }
  }, {
    key: 'parsePrimaryExpression',
    value: function parsePrimaryExpression() {
      if (this.match(_tokenizer.TokenType.LPAREN)) {
        return this.parseGroupExpression();
      }

      var startState = this.startNode();

      if (this.eat(_tokenizer.TokenType.ASYNC)) {
        if (!this.hasLineTerminatorBeforeNext && this.match(_tokenizer.TokenType.FUNCTION)) {
          this.isBindingElement = this.isAssignmentTarget = false;
          return this.finishNode(this.parseFunction({ isExpr: true, inDefault: false, allowGenerator: true, isAsync: true }), startState);
        }
        return this.finishNode(new AST.IdentifierExpression({ name: 'async' }), startState);
      }

      if (this.matchIdentifier()) {
        return this.finishNode(new AST.IdentifierExpression({ name: this.parseIdentifier() }), startState);
      }
      switch (this.lookahead.type) {
        case _tokenizer.TokenType.STRING:
          this.isBindingElement = this.isAssignmentTarget = false;
          return this.parseStringLiteral();
        case _tokenizer.TokenType.NUMBER:
          this.isBindingElement = this.isAssignmentTarget = false;
          return this.parseNumericLiteral();
        case _tokenizer.TokenType.THIS:
          this.lex();
          this.isBindingElement = this.isAssignmentTarget = false;
          return this.finishNode(new AST.ThisExpression(), startState);
        case _tokenizer.TokenType.FUNCTION:
          this.isBindingElement = this.isAssignmentTarget = false;
          return this.finishNode(this.parseFunction({ isExpr: true, inDefault: false, allowGenerator: true, isAsync: false }), startState);
        case _tokenizer.TokenType.TRUE:
          this.lex();
          this.isBindingElement = this.isAssignmentTarget = false;
          return this.finishNode(new AST.LiteralBooleanExpression({ value: true }), startState);
        case _tokenizer.TokenType.FALSE:
          this.lex();
          this.isBindingElement = this.isAssignmentTarget = false;
          return this.finishNode(new AST.LiteralBooleanExpression({ value: false }), startState);
        case _tokenizer.TokenType.NULL:
          this.lex();
          this.isBindingElement = this.isAssignmentTarget = false;
          return this.finishNode(new AST.LiteralNullExpression(), startState);
        case _tokenizer.TokenType.LBRACK:
          return this.parseArrayExpression();
        case _tokenizer.TokenType.LBRACE:
          return this.parseObjectExpression();
        case _tokenizer.TokenType.TEMPLATE:
          this.isBindingElement = this.isAssignmentTarget = false;
          return this.finishNode(new AST.TemplateExpression({ tag: null, elements: this.parseTemplateElements() }), startState);
        case _tokenizer.TokenType.DIV:
        case _tokenizer.TokenType.ASSIGN_DIV:
          {
            this.isBindingElement = this.isAssignmentTarget = false;
            this.lookahead = this.scanRegExp(this.match(_tokenizer.TokenType.DIV) ? '/' : '/=');
            var token = this.lex();
            var lastSlash = token.value.lastIndexOf('/');
            var pattern = token.value.slice(1, lastSlash);
            var flags = token.value.slice(lastSlash + 1);
            var ctorArgs = this.parseRegexFlags(flags);
            if (!(0, _shiftRegexpAcceptor2.default)(pattern, ctorArgs)) {
              throw this.createError(_errors$1.ErrorMessages.INVALID_REGEX);
            }
            ctorArgs.pattern = pattern;
            return this.finishNode(new AST.LiteralRegExpExpression(ctorArgs), startState);
          }
        case _tokenizer.TokenType.CLASS:
          this.isBindingElement = this.isAssignmentTarget = false;
          return this.parseClass({ isExpr: true, inDefault: false });
        default:
          throw this.createUnexpected(this.lookahead);
      }
    }
  }, {
    key: 'parseNumericLiteral',
    value: function parseNumericLiteral() {
      var startLocation = this.getLocation();
      var startState = this.startNode();
      var token = this.lex();
      if (token.octal && this.strict) {
        if (token.noctal) {
          throw this.createErrorWithLocation(startLocation, 'Unexpected noctal integer literal');
        } else {
          throw this.createErrorWithLocation(startLocation, 'Unexpected legacy octal integer literal');
        }
      }
      var node = token.value === 1 / 0 ? new AST.LiteralInfinityExpression() : new AST.LiteralNumericExpression({ value: token.value });
      return this.finishNode(node, startState);
    }
  }, {
    key: 'parseStringLiteral',
    value: function parseStringLiteral() {
      var startLocation = this.getLocation();
      var startState = this.startNode();
      var token = this.lex();
      if (token.octal != null && this.strict) {
        throw this.createErrorWithLocation(startLocation, 'Unexpected legacy octal escape sequence: \\' + token.octal);
      }
      return this.finishNode(new AST.LiteralStringExpression({ value: token.str }), startState);
    }
  }, {
    key: 'parseIdentifierName',
    value: function parseIdentifierName() {
      if (this.lookahead.type.klass.isIdentifierName) {
        return this.lex().value;
      }
      throw this.createUnexpected(this.lookahead);
    }
  }, {
    key: 'parseBindingIdentifier',
    value: function parseBindingIdentifier() {
      var startState = this.startNode();
      return this.finishNode(new AST.BindingIdentifier({ name: this.parseIdentifier() }), startState);
    }
  }, {
    key: 'parseIdentifier',
    value: function parseIdentifier() {
      if (this.lookahead.value === 'yield' && this.allowYieldExpression) {
        throw this.createError(_errors$1.ErrorMessages.ILLEGAL_YIELD_IDENTIFIER);
      }
      if (this.lookahead.value === 'await' && this.allowAwaitExpression) {
        throw this.createError(_errors$1.ErrorMessages.ILLEGAL_AWAIT_IDENTIFIER);
      }
      if (this.matchIdentifier()) {
        return this.lex().value;
      }
      throw this.createUnexpected(this.lookahead);
    }
  }, {
    key: 'parseArgumentList',
    value: function parseArgumentList() {
      this.lex();
      var args = this.parseArguments();
      this.expect(_tokenizer.TokenType.RPAREN);
      return args;
    }
  }, {
    key: 'parseArguments',
    value: function parseArguments() {
      var args = [];
      var locationFollowingFirstSpread = null;
      while (!this.match(_tokenizer.TokenType.RPAREN)) {
        var arg = void 0;
        var startState = this.startNode();
        if (this.eat(_tokenizer.TokenType.ELLIPSIS)) {
          arg = this.finishNode(new AST.SpreadElement({ expression: this.inheritCoverGrammar(this.parseAssignmentExpressionOrTarget) }), startState);
          if (locationFollowingFirstSpread === null) {
            args.push(arg);
            if (this.match(_tokenizer.TokenType.RPAREN)) {
              break;
            }
            locationFollowingFirstSpread = this.getLocation();
            this.expect(_tokenizer.TokenType.COMMA);
            continue;
          }
        } else {
          arg = this.inheritCoverGrammar(this.parseAssignmentExpressionOrTarget);
        }
        args.push(arg);
        if (this.match(_tokenizer.TokenType.RPAREN)) {
          break;
        }
        this.expect(_tokenizer.TokenType.COMMA);
      }
      return { args: args, locationFollowingFirstSpread: locationFollowingFirstSpread };
    }

    // 11.2 Left-Hand-Side Expressions;

  }, {
    key: 'ensureArrow',
    value: function ensureArrow() {
      if (this.hasLineTerminatorBeforeNext) {
        throw this.createError(_errors$1.ErrorMessages.UNEXPECTED_LINE_TERMINATOR);
      }
      if (!this.match(_tokenizer.TokenType.ARROW)) {
        this.expect(_tokenizer.TokenType.ARROW);
      }
    }
  }, {
    key: 'parseGroupExpression',
    value: function parseGroupExpression() {
      // At this point, we need to parse 3 things:
      //  1. Group expression
      //  2. Assignment target of assignment expression
      //  3. Parameter list of arrow function
      var rest = null;
      var preParenStartState = this.startNode();
      var start = this.expect(_tokenizer.TokenType.LPAREN);
      var postParenStartState = this.startNode();
      if (this.match(_tokenizer.TokenType.RPAREN)) {
        this.lex();
        var paramsNode = this.finishNode({
          type: ARROW_EXPRESSION_PARAMS,
          params: [],
          rest: null,
          isAsync: false
        }, preParenStartState);
        this.ensureArrow();
        this.isBindingElement = this.isAssignmentTarget = false;
        return paramsNode;
      } else if (this.eat(_tokenizer.TokenType.ELLIPSIS)) {
        rest = this.parseBindingTarget();
        if (this.match(_tokenizer.TokenType.ASSIGN)) {
          throw this.createError(_errors$1.ErrorMessages.INVALID_REST_PARAMETERS_INITIALIZATION);
        }
        if (this.match(_tokenizer.TokenType.COMMA)) {
          throw this.createError(_errors$1.ErrorMessages.INVALID_LAST_REST_PARAMETER);
        }
        this.expect(_tokenizer.TokenType.RPAREN);
        var _paramsNode = this.finishNode({
          type: ARROW_EXPRESSION_PARAMS,
          params: [],
          rest: rest,
          isAsync: false
        }, preParenStartState);
        this.ensureArrow();
        this.isBindingElement = this.isAssignmentTarget = false;
        return _paramsNode;
      }
      var group = this.inheritCoverGrammar(this.parseAssignmentExpressionOrTarget);

      var params = this.isBindingElement ? [this.targetToBinding(this.transformDestructuringWithDefault(group))] : null;

      while (this.eat(_tokenizer.TokenType.COMMA)) {
        if (this.match(_tokenizer.TokenType.RPAREN)) {
          if (!this.isBindingElement) {
            throw this.createUnexpected(this.lookahead);
          }
          this.firstExprError = this.firstExprError || this.createUnexpected(this.lookahead);
          group = null;
          break;
        }
        this.isAssignmentTarget = false;
        if (this.match(_tokenizer.TokenType.ELLIPSIS)) {
          if (!this.isBindingElement) {
            throw this.createUnexpected(this.lookahead);
          }
          this.lex();
          rest = this.parseBindingTarget();
          if (this.match(_tokenizer.TokenType.ASSIGN)) {
            throw this.createError(_errors$1.ErrorMessages.INVALID_REST_PARAMETERS_INITIALIZATION);
          }
          if (this.match(_tokenizer.TokenType.COMMA)) {
            throw this.createError(_errors$1.ErrorMessages.INVALID_LAST_REST_PARAMETER);
          }
          break;
        }

        if (group) {
          // Can be either binding element or assignment target.
          var expr = this.inheritCoverGrammar(this.parseAssignmentExpressionOrTarget);
          if (this.isBindingElement) {
            params.push(this.targetToBinding(this.transformDestructuringWithDefault(expr)));
          } else {
            params = null;
          }

          if (this.firstExprError) {
            group = null;
          } else {
            group = this.finishNode(new AST.BinaryExpression({
              left: group,
              operator: ',',
              right: expr
            }), postParenStartState);
          }
        } else {
          // Can be only binding elements.
          var binding = this.parseBindingElement();
          params.push(binding);
        }
      }
      this.expect(_tokenizer.TokenType.RPAREN);

      if (!this.hasLineTerminatorBeforeNext && this.match(_tokenizer.TokenType.ARROW)) {
        if (!this.isBindingElement) {
          throw this.createErrorWithLocation(start, _errors$1.ErrorMessages.ILLEGAL_ARROW_FUNCTION_PARAMS);
        }

        this.isBindingElement = false;
        return this.finishNode({
          type: ARROW_EXPRESSION_PARAMS,
          params: params,
          rest: rest,
          isAsync: false
        }, preParenStartState);
      }
      // Ensure assignment pattern:
      if (rest) {
        this.ensureArrow();
      }
      this.isBindingElement = false;
      if (!isValidSimpleAssignmentTarget(group)) {
        this.isAssignmentTarget = false;
      }
      return group;
    }
  }, {
    key: 'parseArrayExpression',
    value: function parseArrayExpression() {
      var _this8 = this;

      var startLocation = this.getLocation();
      var startState = this.startNode();

      this.lex();

      var exprs = [];
      var rest = null;

      while (true) {
        if (this.match(_tokenizer.TokenType.RBRACK)) {
          break;
        }
        if (this.eat(_tokenizer.TokenType.COMMA)) {
          exprs.push(null);
        } else {
          var elementStartState = this.startNode();
          var expr = void 0;
          if (this.eat(_tokenizer.TokenType.ELLIPSIS)) {
            // Spread/Rest element
            expr = this.inheritCoverGrammar(this.parseAssignmentExpressionOrTarget);
            if (!this.isAssignmentTarget && this.firstExprError) {
              throw this.firstExprError;
            }
            if (expr.type === 'ArrayAssignmentTarget' || expr.type === 'ObjectAssignmentTarget') {
              rest = expr;
              break;
            }
            if (expr.type !== 'ArrayExpression' && expr.type !== 'ObjectExpression' && !isValidSimpleAssignmentTarget(expr)) {
              this.isBindingElement = this.isAssignmentTarget = false;
            }
            expr = this.finishNode(new AST.SpreadElement({ expression: expr }), elementStartState);
            if (!this.match(_tokenizer.TokenType.RBRACK)) {
              this.isBindingElement = this.isAssignmentTarget = false;
            }
          } else {
            expr = this.inheritCoverGrammar(this.parseAssignmentExpressionOrTarget);
            if (!this.isAssignmentTarget && this.firstExprError) {
              throw this.firstExprError;
            }
          }
          exprs.push(expr);

          if (!this.match(_tokenizer.TokenType.RBRACK)) {
            this.expect(_tokenizer.TokenType.COMMA);
          }
        }
      }

      if (rest && this.match(_tokenizer.TokenType.COMMA)) {
        throw this.createErrorWithLocation(startLocation, _errors$1.ErrorMessages.UNEXPECTED_COMMA_AFTER_REST);
      }

      this.expect(_tokenizer.TokenType.RBRACK);

      if (rest) {
        // No need to check isAssignmentTarget: the only way to have something we know is a rest element is if we have ...Object/ArrayAssignmentTarget, which implies we have a firstExprError; as such, if isAssignmentTarget were false, we'd've thrown above before setting rest.
        return this.finishNode(new AST.ArrayAssignmentTarget({
          elements: exprs.map(function (e) {
            return e && _this8.transformDestructuringWithDefault(e);
          }),
          rest: rest
        }), startState);
      } else if (this.firstExprError) {
        var last = exprs[exprs.length - 1];
        if (last != null && last.type === 'SpreadElement') {
          return this.finishNode(new AST.ArrayAssignmentTarget({
            elements: exprs.slice(0, -1).map(function (e) {
              return e && _this8.transformDestructuringWithDefault(e);
            }),
            rest: this.transformDestructuring(last.expression)
          }), startState);
        }
        return this.finishNode(new AST.ArrayAssignmentTarget({
          elements: exprs.map(function (e) {
            return e && _this8.transformDestructuringWithDefault(e);
          }),
          rest: null
        }), startState);
      }
      return this.finishNode(new AST.ArrayExpression({ elements: exprs }), startState);
    }
  }, {
    key: 'parseObjectExpression',
    value: function parseObjectExpression() {
      var _this9 = this;

      var startState = this.startNode();
      this.lex();
      var properties = [];
      while (!this.match(_tokenizer.TokenType.RBRACE)) {
        var isSpreadProperty = false;
        if (this.match(_tokenizer.TokenType.ELLIPSIS)) {
          isSpreadProperty = true;
          var spreadPropertyOrAssignmentTarget = this.parseSpreadPropertyDefinition();
          properties.push(spreadPropertyOrAssignmentTarget);
        } else {
          var property = this.inheritCoverGrammar(this.parsePropertyDefinition);
          properties.push(property);
        }
        if (!this.match(_tokenizer.TokenType.RBRACE)) {
          this.expect(_tokenizer.TokenType.COMMA);
          if (isSpreadProperty) {
            this.isBindingElement = this.isAssignmentTarget = false;
          }
        }
      }
      this.expect(_tokenizer.TokenType.RBRACE);
      if (this.firstExprError) {
        if (!this.isAssignmentTarget) {
          throw this.createError(_errors$1.ErrorMessages.INVALID_LHS_IN_BINDING);
        }
        var last = properties[properties.length - 1];
        if (last != null && last.type === 'SpreadProperty') {
          return this.finishNode(new AST.ObjectAssignmentTarget({
            properties: properties.slice(0, -1).map(function (p) {
              return _this9.transformDestructuringWithDefault(p);
            }),
            rest: this.transformDestructuring(last.expression)
          }), startState);
        }
        return this.finishNode(new AST.ObjectAssignmentTarget({ properties: properties.map(function (p) {
            return _this9.transformDestructuringWithDefault(p);
          }), rest: null }), startState);
      }
      return this.finishNode(new AST.ObjectExpression({ properties: properties }), startState);
    }
  }, {
    key: 'parseSpreadPropertyDefinition',
    value: function parseSpreadPropertyDefinition() {
      var startState = this.startNode();
      this.expect(_tokenizer.TokenType.ELLIPSIS);
      var expression = this.parseAssignmentExpression();
      if (!isValidSimpleAssignmentTarget(expression)) {
        this.isBindingElement = this.isAssignmentTarget = false;
      } else if (expression.type !== 'IdentifierExpression') {
        this.isBindingElement = false;
      }
      return this.finishNode(new AST.SpreadProperty({ expression: expression }), startState);
    }
  }, {
    key: 'parsePropertyDefinition',
    value: function parsePropertyDefinition() {
      var startLocation = this.getLocation();
      var startState = this.startNode();
      var token = this.lookahead;

      var _parseMethodDefinitio = this.parseMethodDefinition(),
          methodOrKey = _parseMethodDefinitio.methodOrKey,
          kind = _parseMethodDefinitio.kind;

      switch (kind) {
        case 'method':
          this.isBindingElement = this.isAssignmentTarget = false;
          return methodOrKey;
        case 'identifier':
          if (token.value === 'await' && this.firstAwaitLocation == null) {
            this.firstAwaitLocation = this.getLocation();
          }
          if (this.eat(_tokenizer.TokenType.ASSIGN)) {
            if (this.allowYieldExpression && token.value === 'yield') {
              throw this.createError(_errors$1.ErrorMessages.ILLEGAL_YIELD_IDENTIFIER);
            }
            if (this.allowAwaitExpression && token.value === 'await') {
              throw this.createError(_errors$1.ErrorMessages.ILLEGAL_AWAIT_IDENTIFIER);
            }
            // CoverInitializedName
            var init = this.isolateCoverGrammar(this.parseAssignmentExpression);
            this.firstExprError = this.createErrorWithLocation(startLocation, _errors$1.ErrorMessages.ILLEGAL_PROPERTY);
            return this.finishNode(new AST.AssignmentTargetPropertyIdentifier({
              binding: this.transformDestructuring(methodOrKey),
              init: init
            }), startState);
          } else if (!this.match(_tokenizer.TokenType.COLON)) {
            if (this.allowYieldExpression && token.value === 'yield') {
              throw this.createError(_errors$1.ErrorMessages.ILLEGAL_YIELD_IDENTIFIER);
            }
            if (this.allowAwaitExpression && token.value === 'await') {
              throw this.createError(_errors$1.ErrorMessages.ILLEGAL_AWAIT_IDENTIFIER);
            }
            if (token.type === _tokenizer.TokenType.IDENTIFIER || token.value === 'let' || token.value === 'yield' || token.value === 'async' || token.value === 'await') {
              return this.finishNode(new AST.ShorthandProperty({ name: this.finishNode(new AST.IdentifierExpression({ name: methodOrKey.value }), startState) }), startState);
            }
            throw this.createUnexpected(token);
          }
      }

      // property
      this.expect(_tokenizer.TokenType.COLON);

      var expr = this.inheritCoverGrammar(this.parseAssignmentExpressionOrTarget);
      if (this.firstExprError) {
        return this.finishNode(new AST.AssignmentTargetPropertyProperty({ name: methodOrKey, binding: expr }), startState);
      }
      return this.finishNode(new AST.DataProperty({ name: methodOrKey, expression: expr }), startState);
    }
  }, {
    key: 'parsePropertyName',
    value: function parsePropertyName() {
      // PropertyName[Yield,GeneratorParameter]:
      var token = this.lookahead;
      var startState = this.startNode();

      if (this.eof()) {
        throw this.createUnexpected(token);
      }

      switch (token.type) {
        case _tokenizer.TokenType.STRING:
          return {
            name: this.finishNode(new AST.StaticPropertyName({
              value: this.parseStringLiteral().value
            }), startState),
            binding: null
          };
        case _tokenizer.TokenType.NUMBER:
          {
            var numLiteral = this.parseNumericLiteral();
            return {
              name: this.finishNode(new AST.StaticPropertyName({
                value: '' + (numLiteral.type === 'LiteralInfinityExpression' ? 1 / 0 : numLiteral.value)
              }), startState),
              binding: null
            };
          }
        case _tokenizer.TokenType.LBRACK:
          {
            this.lex();
            var expr = this.parseAssignmentExpression();
            this.expect(_tokenizer.TokenType.RBRACK);
            return { name: this.finishNode(new AST.ComputedPropertyName({ expression: expr }), startState), binding: null };
          }
      }

      var name = this.parseIdentifierName();
      return {
        name: this.finishNode(new AST.StaticPropertyName({ value: name }), startState),
        binding: this.finishNode(new AST.BindingIdentifier({ name: name }), startState)
      };
    }

    /**
     * Test if lookahead can be the beginning of a `PropertyName`.
     * @returns {boolean}
     */

  }, {
    key: 'lookaheadPropertyName',
    value: function lookaheadPropertyName() {
      switch (this.lookahead.type) {
        case _tokenizer.TokenType.NUMBER:
        case _tokenizer.TokenType.STRING:
        case _tokenizer.TokenType.LBRACK:
          return true;
        default:
          return this.lookahead.type.klass.isIdentifierName;
      }
    }

    // eslint-disable-next-line valid-jsdoc
    /**
     * Try to parse a method definition.
     *
     * If it turns out to be one of:
     *  * `IdentifierReference`
     *  * `CoverInitializedName` (`IdentifierReference "=" AssignmentExpression`)
     *  * `PropertyName : AssignmentExpression`
     * The parser will stop at the end of the leading `Identifier` or `PropertyName` and return it.
     *
     * @returns {{methodOrKey: (Method|PropertyName), kind: string}}
     */

  }, {
    key: 'parseMethodDefinition',
    value: function parseMethodDefinition() {
      var token = this.lookahead;
      var startState = this.startNode();

      var preAsyncTokenState = this.saveLexerState();

      var isAsync = !!this.eat(_tokenizer.TokenType.ASYNC);
      if (isAsync && this.hasLineTerminatorBeforeNext) {
        isAsync = false;
        this.restoreLexerState(preAsyncTokenState);
      }

      var isGenerator = !!this.eat(_tokenizer.TokenType.MUL);
      if (isAsync && !this.lookaheadPropertyName()) {
        isAsync = false;
        isGenerator = false;
        this.restoreLexerState(preAsyncTokenState);
      }

      var _parsePropertyName = this.parsePropertyName(),
          name = _parsePropertyName.name;

      if (!isGenerator && !isAsync) {
        if (token.type === _tokenizer.TokenType.IDENTIFIER && token.value.length === 3) {
          // Property Assignment: Getter and Setter.
          if (token.value === 'get' && this.lookaheadPropertyName() && !token.escaped) {
            var _parsePropertyName2 = this.parsePropertyName();

            name = _parsePropertyName2.name;

            this.expect(_tokenizer.TokenType.LPAREN);
            this.expect(_tokenizer.TokenType.RPAREN);
            var previousYield = this.allowYieldExpression;
            var previousAwait = this.allowAwaitExpression;
            var previousAwaitLocation = this.firstAwaitLocation;
            this.allowYieldExpression = false;
            this.allowAwaitExpression = false;
            this.firstAwaitLocation = null;
            var body = this.parseFunctionBody();
            this.allowYieldExpression = previousYield;
            this.allowAwaitExpression = previousAwait;
            this.firstAwaitLocation = previousAwaitLocation;
            return {
              methodOrKey: this.finishNode(new AST.Getter({ name: name, body: body }), startState),
              kind: 'method'
            };
          } else if (token.value === 'set' && this.lookaheadPropertyName() && !token.escaped) {
            var _parsePropertyName3 = this.parsePropertyName();

            name = _parsePropertyName3.name;

            this.expect(_tokenizer.TokenType.LPAREN);
            var _previousYield = this.allowYieldExpression;
            var _previousAwait = this.allowAwaitExpression;
            var _previousAwaitLocation = this.firstAwaitLocation;
            this.allowYieldExpression = false;
            this.allowAwaitExpression = false;
            this.firstAwaitLocation = null;
            var param = this.parseBindingElement();
            this.expect(_tokenizer.TokenType.RPAREN);
            var _body = this.parseFunctionBody();
            this.allowYieldExpression = _previousYield;
            this.allowAwaitExpression = _previousAwait;
            this.firstAwaitLocation = _previousAwaitLocation;
            return {
              methodOrKey: this.finishNode(new AST.Setter({ name: name, param: param, body: _body }), startState),
              kind: 'method'
            };
          }
        }
      }
      if (isAsync) {
        var _previousYield2 = this.allowYieldExpression;
        var _previousAwait2 = this.allowAwaitExpression;
        this.allowYieldExpression = isGenerator;
        this.allowAwaitExpression = true;
        var params = this.parseParams();
        this.allowYieldExpression = isGenerator;
        this.allowAwaitExpression = true;
        var _body2 = this.parseFunctionBody();
        this.allowYieldExpression = _previousYield2;
        this.allowAwaitExpression = _previousAwait2;
        return {
          methodOrKey: this.finishNode(new AST.Method({ isAsync: isAsync, isGenerator: isGenerator, name: name, params: params, body: _body2 }), startState),
          kind: 'method'
        };
      }

      if (this.match(_tokenizer.TokenType.LPAREN)) {
        var _previousYield3 = this.allowYieldExpression;
        var _previousAwait3 = this.allowAwaitExpression;
        var _previousAwaitLocation2 = this.firstAwaitLocation;
        this.allowYieldExpression = isGenerator;
        this.allowAwaitExpression = false;
        this.firstAwaitLocation = null;
        var _params = this.parseParams();
        var _body3 = this.parseFunctionBody();
        this.allowYieldExpression = _previousYield3;
        this.allowAwaitExpression = _previousAwait3;
        this.firstAwaitLocation = _previousAwaitLocation2;

        return {
          methodOrKey: this.finishNode(new AST.Method({ isAsync: isAsync, isGenerator: isGenerator, name: name, params: _params, body: _body3 }), startState),
          kind: 'method'
        };
      }

      if (isGenerator && this.match(_tokenizer.TokenType.COLON)) {
        throw this.createUnexpected(this.lookahead);
      }

      return {
        methodOrKey: name,
        kind: token.type.klass.isIdentifierName ? 'identifier' : 'property',
        escaped: token.escaped
      };
    }
  }, {
    key: 'parseClass',
    value: function parseClass(_ref3) {
      var _this10 = this;

      var isExpr = _ref3.isExpr,
          inDefault = _ref3.inDefault;

      var startState = this.startNode();

      this.lex();
      var name = null;
      var heritage = null;

      if (this.matchIdentifier()) {
        name = this.parseBindingIdentifier();
      } else if (!isExpr) {
        if (inDefault) {
          name = new AST.BindingIdentifier({ name: '*default*' });
        } else {
          throw this.createUnexpected(this.lookahead);
        }
      }

      if (this.eat(_tokenizer.TokenType.EXTENDS)) {
        heritage = this.isolateCoverGrammar(function () {
          return _this10.parseLeftHandSideExpression({ allowCall: true });
        });
      }

      this.expect(_tokenizer.TokenType.LBRACE);
      var elements = [];
      while (!this.eat(_tokenizer.TokenType.RBRACE)) {
        if (this.eat(_tokenizer.TokenType.SEMICOLON)) {
          continue;
        }
        var isStatic = false;
        var classElementStart = this.startNode();

        var _parseMethodDefinitio2 = this.parseMethodDefinition(),
            methodOrKey = _parseMethodDefinitio2.methodOrKey,
            kind = _parseMethodDefinitio2.kind,
            escaped = _parseMethodDefinitio2.escaped;

        if (kind === 'identifier' && methodOrKey.value === 'static' && !escaped) {
          isStatic = true;

          var _parseMethodDefinitio3 = this.parseMethodDefinition();

          methodOrKey = _parseMethodDefinitio3.methodOrKey;
          kind = _parseMethodDefinitio3.kind;
        }
        if (kind === 'method') {
          elements.push(this.finishNode(new AST.ClassElement({ isStatic: isStatic, method: methodOrKey }), classElementStart));
        } else {
          throw this.createError('Only methods are allowed in classes');
        }
      }
      return this.finishNode(new (isExpr ? AST.ClassExpression : AST.ClassDeclaration)({ name: name, super: heritage, elements: elements }), startState);
    }
  }, {
    key: 'parseFunction',
    value: function parseFunction(_ref4) {
      var isExpr = _ref4.isExpr,
          inDefault = _ref4.inDefault,
          allowGenerator = _ref4.allowGenerator,
          isAsync = _ref4.isAsync,
          _ref4$startState = _ref4.startState,
          startState = _ref4$startState === undefined ? this.startNode() : _ref4$startState;

      this.lex();
      var name = null;
      var isGenerator = allowGenerator && !!this.eat(_tokenizer.TokenType.MUL);

      var previousYield = this.allowYieldExpression;
      var previousAwait = this.allowAwaitExpression;
      var previousAwaitLocation = this.firstAwaitLocation;

      if (isExpr) {
        this.allowYieldExpression = isGenerator;
        this.allowAwaitExpression = isAsync;
      }

      if (!this.match(_tokenizer.TokenType.LPAREN)) {
        name = this.parseBindingIdentifier();
      } else if (!isExpr) {
        if (inDefault) {
          name = new AST.BindingIdentifier({ name: '*default*' });
        } else {
          throw this.createUnexpected(this.lookahead);
        }
      }
      this.allowYieldExpression = isGenerator;
      this.allowAwaitExpression = isAsync;
      this.firstAwaitLocation = null;
      var params = this.parseParams();
      var body = this.parseFunctionBody();
      this.allowYieldExpression = previousYield;
      this.allowAwaitExpression = previousAwait;
      this.firstAwaitLocation = previousAwaitLocation;

      return this.finishNode(new (isExpr ? AST.FunctionExpression : AST.FunctionDeclaration)({ isAsync: isAsync, isGenerator: isGenerator, name: name, params: params, body: body }), startState);
    }
  }, {
    key: 'parseArrayBinding',
    value: function parseArrayBinding() {
      var startState = this.startNode();

      this.expect(_tokenizer.TokenType.LBRACK);

      var elements = [],
          rest = null;

      while (true) {
        if (this.match(_tokenizer.TokenType.RBRACK)) {
          break;
        }
        var el = void 0;

        if (this.eat(_tokenizer.TokenType.COMMA)) {
          el = null;
        } else {
          if (this.eat(_tokenizer.TokenType.ELLIPSIS)) {
            rest = this.parseBindingTarget();
            break;
          } else {
            el = this.parseBindingElement();
          }
          if (!this.match(_tokenizer.TokenType.RBRACK)) {
            this.expect(_tokenizer.TokenType.COMMA);
          }
        }
        elements.push(el);
      }

      this.expect(_tokenizer.TokenType.RBRACK);

      return this.finishNode(new AST.ArrayBinding({ elements: elements, rest: rest }), startState);
    }
  }, {
    key: 'parseBindingProperty',
    value: function parseBindingProperty() {
      var startState = this.startNode();
      var isIdentifier = this.matchIdentifier();
      var token = this.lookahead;

      var _parsePropertyName4 = this.parsePropertyName(),
          name = _parsePropertyName4.name,
          binding = _parsePropertyName4.binding;

      if (isIdentifier && name.type === 'StaticPropertyName') {
        if (!this.match(_tokenizer.TokenType.COLON)) {
          if (this.allowYieldExpression && token.value === 'yield') {
            throw this.createError(_errors$1.ErrorMessages.ILLEGAL_YIELD_IDENTIFIER);
          }
          if (this.allowAwaitExpression && token.value === 'await') {
            throw this.createError(_errors$1.ErrorMessages.ILLEGAL_AWAIT_IDENTIFIER);
          }
          var defaultValue = null;
          if (this.eat(_tokenizer.TokenType.ASSIGN)) {
            defaultValue = this.parseAssignmentExpression();
          }
          return this.finishNode(new AST.BindingPropertyIdentifier({
            binding: binding,
            init: defaultValue
          }), startState);
        }
      }
      this.expect(_tokenizer.TokenType.COLON);
      binding = this.parseBindingElement();
      return this.finishNode(new AST.BindingPropertyProperty({ name: name, binding: binding }), startState);
    }
  }, {
    key: 'parseObjectBinding',
    value: function parseObjectBinding() {
      var startState = this.startNode();
      this.expect(_tokenizer.TokenType.LBRACE);

      var properties = [];
      var rest = null;
      while (!this.match(_tokenizer.TokenType.RBRACE)) {
        if (this.eat(_tokenizer.TokenType.ELLIPSIS)) {
          rest = this.parseBindingIdentifier();
          break;
        }
        properties.push(this.parseBindingProperty());
        if (!this.match(_tokenizer.TokenType.RBRACE)) {
          this.expect(_tokenizer.TokenType.COMMA);
        }
      }

      this.expect(_tokenizer.TokenType.RBRACE);

      return this.finishNode(new AST.ObjectBinding({ properties: properties, rest: rest }), startState);
    }
  }, {
    key: 'parseBindingTarget',
    value: function parseBindingTarget() {
      if (this.matchIdentifier()) {
        return this.parseBindingIdentifier();
      }
      switch (this.lookahead.type) {
        case _tokenizer.TokenType.LBRACK:
          return this.parseArrayBinding();
        case _tokenizer.TokenType.LBRACE:
          return this.parseObjectBinding();
      }
      throw this.createUnexpected(this.lookahead);
    }
  }, {
    key: 'parseBindingElement',
    value: function parseBindingElement() {
      var startState = this.startNode();
      var binding = this.parseBindingTarget();
      if (this.eat(_tokenizer.TokenType.ASSIGN)) {
        var init = this.parseAssignmentExpression();
        binding = this.finishNode(new AST.BindingWithDefault({ binding: binding, init: init }), startState);
      }
      return binding;
    }
  }, {
    key: 'parseParam',
    value: function parseParam() {
      var previousInParameter = this.inParameter;
      this.inParameter = true;
      var param = this.parseBindingElement();
      this.inParameter = previousInParameter;
      return param;
    }
  }, {
    key: 'parseParams',
    value: function parseParams() {
      var startState = this.startNode();
      this.expect(_tokenizer.TokenType.LPAREN);

      var items = [],
          rest = null;
      while (!this.match(_tokenizer.TokenType.RPAREN)) {
        if (this.eat(_tokenizer.TokenType.ELLIPSIS)) {
          rest = this.parseBindingTarget();
          if (this.lookahead.type === _tokenizer.TokenType.ASSIGN) {
            throw this.createError(_errors$1.ErrorMessages.UNEXPECTED_REST_PARAMETERS_INITIALIZATION);
          }
          if (this.match(_tokenizer.TokenType.COMMA)) {
            throw this.createError(_errors$1.ErrorMessages.UNEXPECTED_COMMA_AFTER_REST);
          }
          break;
        }
        items.push(this.parseParam());
        if (this.match(_tokenizer.TokenType.RPAREN)) break;
        this.expect(_tokenizer.TokenType.COMMA);
      }

      this.expect(_tokenizer.TokenType.RPAREN);

      return this.finishNode(new AST.FormalParameters({ items: items, rest: rest }), startState);
    }
  }]);

  return GenericParser;
}(_tokenizer2.default);

var earlyErrors = {};

var dist$5 = {};

var director$2 = {};

Object.defineProperty(director$2, "__esModule", {
  value: true
});
director$2.reduce = reduce;
// Generated by generate-director.js
/**
 * Copyright 2018 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var director$1 = {
  ArrayAssignmentTarget: function ArrayAssignmentTarget(reducer, node) {
    var _this = this;

    return reducer.reduceArrayAssignmentTarget(node, { elements: node.elements.map(function (v) {
        return v && _this[v.type](reducer, v);
      }), rest: node.rest && this[node.rest.type](reducer, node.rest) });
  },
  ArrayBinding: function ArrayBinding(reducer, node) {
    var _this2 = this;

    return reducer.reduceArrayBinding(node, { elements: node.elements.map(function (v) {
        return v && _this2[v.type](reducer, v);
      }), rest: node.rest && this[node.rest.type](reducer, node.rest) });
  },
  ArrayExpression: function ArrayExpression(reducer, node) {
    var _this3 = this;

    return reducer.reduceArrayExpression(node, { elements: node.elements.map(function (v) {
        return v && _this3[v.type](reducer, v);
      }) });
  },
  ArrowExpression: function ArrowExpression(reducer, node) {
    return reducer.reduceArrowExpression(node, { params: this.FormalParameters(reducer, node.params), body: this[node.body.type](reducer, node.body) });
  },
  AssignmentExpression: function AssignmentExpression(reducer, node) {
    return reducer.reduceAssignmentExpression(node, { binding: this[node.binding.type](reducer, node.binding), expression: this[node.expression.type](reducer, node.expression) });
  },
  AssignmentTargetIdentifier: function AssignmentTargetIdentifier(reducer, node) {
    return reducer.reduceAssignmentTargetIdentifier(node);
  },
  AssignmentTargetPropertyIdentifier: function AssignmentTargetPropertyIdentifier(reducer, node) {
    return reducer.reduceAssignmentTargetPropertyIdentifier(node, { binding: this.AssignmentTargetIdentifier(reducer, node.binding), init: node.init && this[node.init.type](reducer, node.init) });
  },
  AssignmentTargetPropertyProperty: function AssignmentTargetPropertyProperty(reducer, node) {
    return reducer.reduceAssignmentTargetPropertyProperty(node, { name: this[node.name.type](reducer, node.name), binding: this[node.binding.type](reducer, node.binding) });
  },
  AssignmentTargetWithDefault: function AssignmentTargetWithDefault(reducer, node) {
    return reducer.reduceAssignmentTargetWithDefault(node, { binding: this[node.binding.type](reducer, node.binding), init: this[node.init.type](reducer, node.init) });
  },
  AwaitExpression: function AwaitExpression(reducer, node) {
    return reducer.reduceAwaitExpression(node, { expression: this[node.expression.type](reducer, node.expression) });
  },
  BinaryExpression: function BinaryExpression(reducer, node) {
    return reducer.reduceBinaryExpression(node, { left: this[node.left.type](reducer, node.left), right: this[node.right.type](reducer, node.right) });
  },
  BindingIdentifier: function BindingIdentifier(reducer, node) {
    return reducer.reduceBindingIdentifier(node);
  },
  BindingPropertyIdentifier: function BindingPropertyIdentifier(reducer, node) {
    return reducer.reduceBindingPropertyIdentifier(node, { binding: this.BindingIdentifier(reducer, node.binding), init: node.init && this[node.init.type](reducer, node.init) });
  },
  BindingPropertyProperty: function BindingPropertyProperty(reducer, node) {
    return reducer.reduceBindingPropertyProperty(node, { name: this[node.name.type](reducer, node.name), binding: this[node.binding.type](reducer, node.binding) });
  },
  BindingWithDefault: function BindingWithDefault(reducer, node) {
    return reducer.reduceBindingWithDefault(node, { binding: this[node.binding.type](reducer, node.binding), init: this[node.init.type](reducer, node.init) });
  },
  Block: function Block(reducer, node) {
    var _this4 = this;

    return reducer.reduceBlock(node, { statements: node.statements.map(function (v) {
        return _this4[v.type](reducer, v);
      }) });
  },
  BlockStatement: function BlockStatement(reducer, node) {
    return reducer.reduceBlockStatement(node, { block: this.Block(reducer, node.block) });
  },
  BreakStatement: function BreakStatement(reducer, node) {
    return reducer.reduceBreakStatement(node);
  },
  CallExpression: function CallExpression(reducer, node) {
    var _this5 = this;

    return reducer.reduceCallExpression(node, { callee: this[node.callee.type](reducer, node.callee), arguments: node.arguments.map(function (v) {
        return _this5[v.type](reducer, v);
      }) });
  },
  CatchClause: function CatchClause(reducer, node) {
    return reducer.reduceCatchClause(node, { binding: this[node.binding.type](reducer, node.binding), body: this.Block(reducer, node.body) });
  },
  ClassDeclaration: function ClassDeclaration(reducer, node) {
    var _this6 = this;

    return reducer.reduceClassDeclaration(node, { name: this.BindingIdentifier(reducer, node.name), super: node.super && this[node.super.type](reducer, node.super), elements: node.elements.map(function (v) {
        return _this6.ClassElement(reducer, v);
      }) });
  },
  ClassElement: function ClassElement(reducer, node) {
    return reducer.reduceClassElement(node, { method: this[node.method.type](reducer, node.method) });
  },
  ClassExpression: function ClassExpression(reducer, node) {
    var _this7 = this;

    return reducer.reduceClassExpression(node, { name: node.name && this.BindingIdentifier(reducer, node.name), super: node.super && this[node.super.type](reducer, node.super), elements: node.elements.map(function (v) {
        return _this7.ClassElement(reducer, v);
      }) });
  },
  CompoundAssignmentExpression: function CompoundAssignmentExpression(reducer, node) {
    return reducer.reduceCompoundAssignmentExpression(node, { binding: this[node.binding.type](reducer, node.binding), expression: this[node.expression.type](reducer, node.expression) });
  },
  ComputedMemberAssignmentTarget: function ComputedMemberAssignmentTarget(reducer, node) {
    return reducer.reduceComputedMemberAssignmentTarget(node, { object: this[node.object.type](reducer, node.object), expression: this[node.expression.type](reducer, node.expression) });
  },
  ComputedMemberExpression: function ComputedMemberExpression(reducer, node) {
    return reducer.reduceComputedMemberExpression(node, { object: this[node.object.type](reducer, node.object), expression: this[node.expression.type](reducer, node.expression) });
  },
  ComputedPropertyName: function ComputedPropertyName(reducer, node) {
    return reducer.reduceComputedPropertyName(node, { expression: this[node.expression.type](reducer, node.expression) });
  },
  ConditionalExpression: function ConditionalExpression(reducer, node) {
    return reducer.reduceConditionalExpression(node, { test: this[node.test.type](reducer, node.test), consequent: this[node.consequent.type](reducer, node.consequent), alternate: this[node.alternate.type](reducer, node.alternate) });
  },
  ContinueStatement: function ContinueStatement(reducer, node) {
    return reducer.reduceContinueStatement(node);
  },
  DataProperty: function DataProperty(reducer, node) {
    return reducer.reduceDataProperty(node, { name: this[node.name.type](reducer, node.name), expression: this[node.expression.type](reducer, node.expression) });
  },
  DebuggerStatement: function DebuggerStatement(reducer, node) {
    return reducer.reduceDebuggerStatement(node);
  },
  Directive: function Directive(reducer, node) {
    return reducer.reduceDirective(node);
  },
  DoWhileStatement: function DoWhileStatement(reducer, node) {
    return reducer.reduceDoWhileStatement(node, { body: this[node.body.type](reducer, node.body), test: this[node.test.type](reducer, node.test) });
  },
  EmptyStatement: function EmptyStatement(reducer, node) {
    return reducer.reduceEmptyStatement(node);
  },
  Export: function Export(reducer, node) {
    return reducer.reduceExport(node, { declaration: this[node.declaration.type](reducer, node.declaration) });
  },
  ExportAllFrom: function ExportAllFrom(reducer, node) {
    return reducer.reduceExportAllFrom(node);
  },
  ExportDefault: function ExportDefault(reducer, node) {
    return reducer.reduceExportDefault(node, { body: this[node.body.type](reducer, node.body) });
  },
  ExportFrom: function ExportFrom(reducer, node) {
    var _this8 = this;

    return reducer.reduceExportFrom(node, { namedExports: node.namedExports.map(function (v) {
        return _this8.ExportFromSpecifier(reducer, v);
      }) });
  },
  ExportFromSpecifier: function ExportFromSpecifier(reducer, node) {
    return reducer.reduceExportFromSpecifier(node);
  },
  ExportLocalSpecifier: function ExportLocalSpecifier(reducer, node) {
    return reducer.reduceExportLocalSpecifier(node, { name: this.IdentifierExpression(reducer, node.name) });
  },
  ExportLocals: function ExportLocals(reducer, node) {
    var _this9 = this;

    return reducer.reduceExportLocals(node, { namedExports: node.namedExports.map(function (v) {
        return _this9.ExportLocalSpecifier(reducer, v);
      }) });
  },
  ExpressionStatement: function ExpressionStatement(reducer, node) {
    return reducer.reduceExpressionStatement(node, { expression: this[node.expression.type](reducer, node.expression) });
  },
  ForAwaitStatement: function ForAwaitStatement(reducer, node) {
    return reducer.reduceForAwaitStatement(node, { left: this[node.left.type](reducer, node.left), right: this[node.right.type](reducer, node.right), body: this[node.body.type](reducer, node.body) });
  },
  ForInStatement: function ForInStatement(reducer, node) {
    return reducer.reduceForInStatement(node, { left: this[node.left.type](reducer, node.left), right: this[node.right.type](reducer, node.right), body: this[node.body.type](reducer, node.body) });
  },
  ForOfStatement: function ForOfStatement(reducer, node) {
    return reducer.reduceForOfStatement(node, { left: this[node.left.type](reducer, node.left), right: this[node.right.type](reducer, node.right), body: this[node.body.type](reducer, node.body) });
  },
  ForStatement: function ForStatement(reducer, node) {
    return reducer.reduceForStatement(node, { init: node.init && this[node.init.type](reducer, node.init), test: node.test && this[node.test.type](reducer, node.test), update: node.update && this[node.update.type](reducer, node.update), body: this[node.body.type](reducer, node.body) });
  },
  FormalParameters: function FormalParameters(reducer, node) {
    var _this10 = this;

    return reducer.reduceFormalParameters(node, { items: node.items.map(function (v) {
        return _this10[v.type](reducer, v);
      }), rest: node.rest && this[node.rest.type](reducer, node.rest) });
  },
  FunctionBody: function FunctionBody(reducer, node) {
    var _this11 = this;

    return reducer.reduceFunctionBody(node, { directives: node.directives.map(function (v) {
        return _this11.Directive(reducer, v);
      }), statements: node.statements.map(function (v) {
        return _this11[v.type](reducer, v);
      }) });
  },
  FunctionDeclaration: function FunctionDeclaration(reducer, node) {
    return reducer.reduceFunctionDeclaration(node, { name: this.BindingIdentifier(reducer, node.name), params: this.FormalParameters(reducer, node.params), body: this.FunctionBody(reducer, node.body) });
  },
  FunctionExpression: function FunctionExpression(reducer, node) {
    return reducer.reduceFunctionExpression(node, { name: node.name && this.BindingIdentifier(reducer, node.name), params: this.FormalParameters(reducer, node.params), body: this.FunctionBody(reducer, node.body) });
  },
  Getter: function Getter(reducer, node) {
    return reducer.reduceGetter(node, { name: this[node.name.type](reducer, node.name), body: this.FunctionBody(reducer, node.body) });
  },
  IdentifierExpression: function IdentifierExpression(reducer, node) {
    return reducer.reduceIdentifierExpression(node);
  },
  IfStatement: function IfStatement(reducer, node) {
    return reducer.reduceIfStatement(node, { test: this[node.test.type](reducer, node.test), consequent: this[node.consequent.type](reducer, node.consequent), alternate: node.alternate && this[node.alternate.type](reducer, node.alternate) });
  },
  Import: function Import(reducer, node) {
    var _this12 = this;

    return reducer.reduceImport(node, { defaultBinding: node.defaultBinding && this.BindingIdentifier(reducer, node.defaultBinding), namedImports: node.namedImports.map(function (v) {
        return _this12.ImportSpecifier(reducer, v);
      }) });
  },
  ImportNamespace: function ImportNamespace(reducer, node) {
    return reducer.reduceImportNamespace(node, { defaultBinding: node.defaultBinding && this.BindingIdentifier(reducer, node.defaultBinding), namespaceBinding: this.BindingIdentifier(reducer, node.namespaceBinding) });
  },
  ImportSpecifier: function ImportSpecifier(reducer, node) {
    return reducer.reduceImportSpecifier(node, { binding: this.BindingIdentifier(reducer, node.binding) });
  },
  LabeledStatement: function LabeledStatement(reducer, node) {
    return reducer.reduceLabeledStatement(node, { body: this[node.body.type](reducer, node.body) });
  },
  LiteralBooleanExpression: function LiteralBooleanExpression(reducer, node) {
    return reducer.reduceLiteralBooleanExpression(node);
  },
  LiteralInfinityExpression: function LiteralInfinityExpression(reducer, node) {
    return reducer.reduceLiteralInfinityExpression(node);
  },
  LiteralNullExpression: function LiteralNullExpression(reducer, node) {
    return reducer.reduceLiteralNullExpression(node);
  },
  LiteralNumericExpression: function LiteralNumericExpression(reducer, node) {
    return reducer.reduceLiteralNumericExpression(node);
  },
  LiteralRegExpExpression: function LiteralRegExpExpression(reducer, node) {
    return reducer.reduceLiteralRegExpExpression(node);
  },
  LiteralStringExpression: function LiteralStringExpression(reducer, node) {
    return reducer.reduceLiteralStringExpression(node);
  },
  Method: function Method(reducer, node) {
    return reducer.reduceMethod(node, { name: this[node.name.type](reducer, node.name), params: this.FormalParameters(reducer, node.params), body: this.FunctionBody(reducer, node.body) });
  },
  Module: function Module(reducer, node) {
    var _this13 = this;

    return reducer.reduceModule(node, { directives: node.directives.map(function (v) {
        return _this13.Directive(reducer, v);
      }), items: node.items.map(function (v) {
        return _this13[v.type](reducer, v);
      }) });
  },
  NewExpression: function NewExpression(reducer, node) {
    var _this14 = this;

    return reducer.reduceNewExpression(node, { callee: this[node.callee.type](reducer, node.callee), arguments: node.arguments.map(function (v) {
        return _this14[v.type](reducer, v);
      }) });
  },
  NewTargetExpression: function NewTargetExpression(reducer, node) {
    return reducer.reduceNewTargetExpression(node);
  },
  ObjectAssignmentTarget: function ObjectAssignmentTarget(reducer, node) {
    var _this15 = this;

    return reducer.reduceObjectAssignmentTarget(node, { properties: node.properties.map(function (v) {
        return _this15[v.type](reducer, v);
      }), rest: node.rest && this[node.rest.type](reducer, node.rest) });
  },
  ObjectBinding: function ObjectBinding(reducer, node) {
    var _this16 = this;

    return reducer.reduceObjectBinding(node, { properties: node.properties.map(function (v) {
        return _this16[v.type](reducer, v);
      }), rest: node.rest && this[node.rest.type](reducer, node.rest) });
  },
  ObjectExpression: function ObjectExpression(reducer, node) {
    var _this17 = this;

    return reducer.reduceObjectExpression(node, { properties: node.properties.map(function (v) {
        return _this17[v.type](reducer, v);
      }) });
  },
  ReturnStatement: function ReturnStatement(reducer, node) {
    return reducer.reduceReturnStatement(node, { expression: node.expression && this[node.expression.type](reducer, node.expression) });
  },
  Script: function Script(reducer, node) {
    var _this18 = this;

    return reducer.reduceScript(node, { directives: node.directives.map(function (v) {
        return _this18.Directive(reducer, v);
      }), statements: node.statements.map(function (v) {
        return _this18[v.type](reducer, v);
      }) });
  },
  Setter: function Setter(reducer, node) {
    return reducer.reduceSetter(node, { name: this[node.name.type](reducer, node.name), param: this[node.param.type](reducer, node.param), body: this.FunctionBody(reducer, node.body) });
  },
  ShorthandProperty: function ShorthandProperty(reducer, node) {
    return reducer.reduceShorthandProperty(node, { name: this.IdentifierExpression(reducer, node.name) });
  },
  SpreadElement: function SpreadElement(reducer, node) {
    return reducer.reduceSpreadElement(node, { expression: this[node.expression.type](reducer, node.expression) });
  },
  SpreadProperty: function SpreadProperty(reducer, node) {
    return reducer.reduceSpreadProperty(node, { expression: this[node.expression.type](reducer, node.expression) });
  },
  StaticMemberAssignmentTarget: function StaticMemberAssignmentTarget(reducer, node) {
    return reducer.reduceStaticMemberAssignmentTarget(node, { object: this[node.object.type](reducer, node.object) });
  },
  StaticMemberExpression: function StaticMemberExpression(reducer, node) {
    return reducer.reduceStaticMemberExpression(node, { object: this[node.object.type](reducer, node.object) });
  },
  StaticPropertyName: function StaticPropertyName(reducer, node) {
    return reducer.reduceStaticPropertyName(node);
  },
  Super: function Super(reducer, node) {
    return reducer.reduceSuper(node);
  },
  SwitchCase: function SwitchCase(reducer, node) {
    var _this19 = this;

    return reducer.reduceSwitchCase(node, { test: this[node.test.type](reducer, node.test), consequent: node.consequent.map(function (v) {
        return _this19[v.type](reducer, v);
      }) });
  },
  SwitchDefault: function SwitchDefault(reducer, node) {
    var _this20 = this;

    return reducer.reduceSwitchDefault(node, { consequent: node.consequent.map(function (v) {
        return _this20[v.type](reducer, v);
      }) });
  },
  SwitchStatement: function SwitchStatement(reducer, node) {
    var _this21 = this;

    return reducer.reduceSwitchStatement(node, { discriminant: this[node.discriminant.type](reducer, node.discriminant), cases: node.cases.map(function (v) {
        return _this21.SwitchCase(reducer, v);
      }) });
  },
  SwitchStatementWithDefault: function SwitchStatementWithDefault(reducer, node) {
    var _this22 = this;

    return reducer.reduceSwitchStatementWithDefault(node, { discriminant: this[node.discriminant.type](reducer, node.discriminant), preDefaultCases: node.preDefaultCases.map(function (v) {
        return _this22.SwitchCase(reducer, v);
      }), defaultCase: this.SwitchDefault(reducer, node.defaultCase), postDefaultCases: node.postDefaultCases.map(function (v) {
        return _this22.SwitchCase(reducer, v);
      }) });
  },
  TemplateElement: function TemplateElement(reducer, node) {
    return reducer.reduceTemplateElement(node);
  },
  TemplateExpression: function TemplateExpression(reducer, node) {
    var _this23 = this;

    return reducer.reduceTemplateExpression(node, { tag: node.tag && this[node.tag.type](reducer, node.tag), elements: node.elements.map(function (v) {
        return _this23[v.type](reducer, v);
      }) });
  },
  ThisExpression: function ThisExpression(reducer, node) {
    return reducer.reduceThisExpression(node);
  },
  ThrowStatement: function ThrowStatement(reducer, node) {
    return reducer.reduceThrowStatement(node, { expression: this[node.expression.type](reducer, node.expression) });
  },
  TryCatchStatement: function TryCatchStatement(reducer, node) {
    return reducer.reduceTryCatchStatement(node, { body: this.Block(reducer, node.body), catchClause: this.CatchClause(reducer, node.catchClause) });
  },
  TryFinallyStatement: function TryFinallyStatement(reducer, node) {
    return reducer.reduceTryFinallyStatement(node, { body: this.Block(reducer, node.body), catchClause: node.catchClause && this.CatchClause(reducer, node.catchClause), finalizer: this.Block(reducer, node.finalizer) });
  },
  UnaryExpression: function UnaryExpression(reducer, node) {
    return reducer.reduceUnaryExpression(node, { operand: this[node.operand.type](reducer, node.operand) });
  },
  UpdateExpression: function UpdateExpression(reducer, node) {
    return reducer.reduceUpdateExpression(node, { operand: this[node.operand.type](reducer, node.operand) });
  },
  VariableDeclaration: function VariableDeclaration(reducer, node) {
    var _this24 = this;

    return reducer.reduceVariableDeclaration(node, { declarators: node.declarators.map(function (v) {
        return _this24.VariableDeclarator(reducer, v);
      }) });
  },
  VariableDeclarationStatement: function VariableDeclarationStatement(reducer, node) {
    return reducer.reduceVariableDeclarationStatement(node, { declaration: this.VariableDeclaration(reducer, node.declaration) });
  },
  VariableDeclarator: function VariableDeclarator(reducer, node) {
    return reducer.reduceVariableDeclarator(node, { binding: this[node.binding.type](reducer, node.binding), init: node.init && this[node.init.type](reducer, node.init) });
  },
  WhileStatement: function WhileStatement(reducer, node) {
    return reducer.reduceWhileStatement(node, { test: this[node.test.type](reducer, node.test), body: this[node.body.type](reducer, node.body) });
  },
  WithStatement: function WithStatement(reducer, node) {
    return reducer.reduceWithStatement(node, { object: this[node.object.type](reducer, node.object), body: this[node.body.type](reducer, node.body) });
  },
  YieldExpression: function YieldExpression(reducer, node) {
    return reducer.reduceYieldExpression(node, { expression: node.expression && this[node.expression.type](reducer, node.expression) });
  },
  YieldGeneratorExpression: function YieldGeneratorExpression(reducer, node) {
    return reducer.reduceYieldGeneratorExpression(node, { expression: this[node.expression.type](reducer, node.expression) });
  }
};

function reduce(reducer, node) {
  return director$1[node.type](reducer, node);
}

var thunkedDirector = {};

Object.defineProperty(thunkedDirector, "__esModule", {
  value: true
});
thunkedDirector.thunkedReduce = thunkedReduce;
// Generated by generate-director.js
/**
 * Copyright 2018 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var director = {
  ArrayAssignmentTarget: function ArrayAssignmentTarget(reducer, node) {
    var _this = this;

    return reducer.reduceArrayAssignmentTarget(node, { elements: node.elements.map(function (v) {
        return v && function () {
          return _this[v.type](reducer, v);
        };
      }), rest: node.rest && function () {
        return _this[node.rest.type](reducer, node.rest);
      } });
  },
  ArrayBinding: function ArrayBinding(reducer, node) {
    var _this2 = this;

    return reducer.reduceArrayBinding(node, { elements: node.elements.map(function (v) {
        return v && function () {
          return _this2[v.type](reducer, v);
        };
      }), rest: node.rest && function () {
        return _this2[node.rest.type](reducer, node.rest);
      } });
  },
  ArrayExpression: function ArrayExpression(reducer, node) {
    var _this3 = this;

    return reducer.reduceArrayExpression(node, { elements: node.elements.map(function (v) {
        return v && function () {
          return _this3[v.type](reducer, v);
        };
      }) });
  },
  ArrowExpression: function ArrowExpression(reducer, node) {
    var _this4 = this;

    return reducer.reduceArrowExpression(node, { params: function params() {
        return _this4.FormalParameters(reducer, node.params);
      }, body: function body() {
        return _this4[node.body.type](reducer, node.body);
      } });
  },
  AssignmentExpression: function AssignmentExpression(reducer, node) {
    var _this5 = this;

    return reducer.reduceAssignmentExpression(node, { binding: function binding() {
        return _this5[node.binding.type](reducer, node.binding);
      }, expression: function expression() {
        return _this5[node.expression.type](reducer, node.expression);
      } });
  },
  AssignmentTargetIdentifier: function AssignmentTargetIdentifier(reducer, node) {
    return reducer.reduceAssignmentTargetIdentifier(node);
  },
  AssignmentTargetPropertyIdentifier: function AssignmentTargetPropertyIdentifier(reducer, node) {
    var _this6 = this;

    return reducer.reduceAssignmentTargetPropertyIdentifier(node, { binding: function binding() {
        return _this6.AssignmentTargetIdentifier(reducer, node.binding);
      }, init: node.init && function () {
        return _this6[node.init.type](reducer, node.init);
      } });
  },
  AssignmentTargetPropertyProperty: function AssignmentTargetPropertyProperty(reducer, node) {
    var _this7 = this;

    return reducer.reduceAssignmentTargetPropertyProperty(node, { name: function name() {
        return _this7[node.name.type](reducer, node.name);
      }, binding: function binding() {
        return _this7[node.binding.type](reducer, node.binding);
      } });
  },
  AssignmentTargetWithDefault: function AssignmentTargetWithDefault(reducer, node) {
    var _this8 = this;

    return reducer.reduceAssignmentTargetWithDefault(node, { binding: function binding() {
        return _this8[node.binding.type](reducer, node.binding);
      }, init: function init() {
        return _this8[node.init.type](reducer, node.init);
      } });
  },
  AwaitExpression: function AwaitExpression(reducer, node) {
    var _this9 = this;

    return reducer.reduceAwaitExpression(node, { expression: function expression() {
        return _this9[node.expression.type](reducer, node.expression);
      } });
  },
  BinaryExpression: function BinaryExpression(reducer, node) {
    var _this10 = this;

    return reducer.reduceBinaryExpression(node, { left: function left() {
        return _this10[node.left.type](reducer, node.left);
      }, right: function right() {
        return _this10[node.right.type](reducer, node.right);
      } });
  },
  BindingIdentifier: function BindingIdentifier(reducer, node) {
    return reducer.reduceBindingIdentifier(node);
  },
  BindingPropertyIdentifier: function BindingPropertyIdentifier(reducer, node) {
    var _this11 = this;

    return reducer.reduceBindingPropertyIdentifier(node, { binding: function binding() {
        return _this11.BindingIdentifier(reducer, node.binding);
      }, init: node.init && function () {
        return _this11[node.init.type](reducer, node.init);
      } });
  },
  BindingPropertyProperty: function BindingPropertyProperty(reducer, node) {
    var _this12 = this;

    return reducer.reduceBindingPropertyProperty(node, { name: function name() {
        return _this12[node.name.type](reducer, node.name);
      }, binding: function binding() {
        return _this12[node.binding.type](reducer, node.binding);
      } });
  },
  BindingWithDefault: function BindingWithDefault(reducer, node) {
    var _this13 = this;

    return reducer.reduceBindingWithDefault(node, { binding: function binding() {
        return _this13[node.binding.type](reducer, node.binding);
      }, init: function init() {
        return _this13[node.init.type](reducer, node.init);
      } });
  },
  Block: function Block(reducer, node) {
    var _this14 = this;

    return reducer.reduceBlock(node, { statements: node.statements.map(function (v) {
        return function () {
          return _this14[v.type](reducer, v);
        };
      }) });
  },
  BlockStatement: function BlockStatement(reducer, node) {
    var _this15 = this;

    return reducer.reduceBlockStatement(node, { block: function block() {
        return _this15.Block(reducer, node.block);
      } });
  },
  BreakStatement: function BreakStatement(reducer, node) {
    return reducer.reduceBreakStatement(node);
  },
  CallExpression: function CallExpression(reducer, node) {
    var _this16 = this;

    return reducer.reduceCallExpression(node, { callee: function callee() {
        return _this16[node.callee.type](reducer, node.callee);
      }, arguments: node.arguments.map(function (v) {
        return function () {
          return _this16[v.type](reducer, v);
        };
      }) });
  },
  CatchClause: function CatchClause(reducer, node) {
    var _this17 = this;

    return reducer.reduceCatchClause(node, { binding: function binding() {
        return _this17[node.binding.type](reducer, node.binding);
      }, body: function body() {
        return _this17.Block(reducer, node.body);
      } });
  },
  ClassDeclaration: function ClassDeclaration(reducer, node) {
    var _this18 = this;

    return reducer.reduceClassDeclaration(node, { name: function name() {
        return _this18.BindingIdentifier(reducer, node.name);
      }, super: node.super && function () {
        return _this18[node.super.type](reducer, node.super);
      }, elements: node.elements.map(function (v) {
        return function () {
          return _this18.ClassElement(reducer, v);
        };
      }) });
  },
  ClassElement: function ClassElement(reducer, node) {
    var _this19 = this;

    return reducer.reduceClassElement(node, { method: function method() {
        return _this19[node.method.type](reducer, node.method);
      } });
  },
  ClassExpression: function ClassExpression(reducer, node) {
    var _this20 = this;

    return reducer.reduceClassExpression(node, { name: node.name && function () {
        return _this20.BindingIdentifier(reducer, node.name);
      }, super: node.super && function () {
        return _this20[node.super.type](reducer, node.super);
      }, elements: node.elements.map(function (v) {
        return function () {
          return _this20.ClassElement(reducer, v);
        };
      }) });
  },
  CompoundAssignmentExpression: function CompoundAssignmentExpression(reducer, node) {
    var _this21 = this;

    return reducer.reduceCompoundAssignmentExpression(node, { binding: function binding() {
        return _this21[node.binding.type](reducer, node.binding);
      }, expression: function expression() {
        return _this21[node.expression.type](reducer, node.expression);
      } });
  },
  ComputedMemberAssignmentTarget: function ComputedMemberAssignmentTarget(reducer, node) {
    var _this22 = this;

    return reducer.reduceComputedMemberAssignmentTarget(node, { object: function object() {
        return _this22[node.object.type](reducer, node.object);
      }, expression: function expression() {
        return _this22[node.expression.type](reducer, node.expression);
      } });
  },
  ComputedMemberExpression: function ComputedMemberExpression(reducer, node) {
    var _this23 = this;

    return reducer.reduceComputedMemberExpression(node, { object: function object() {
        return _this23[node.object.type](reducer, node.object);
      }, expression: function expression() {
        return _this23[node.expression.type](reducer, node.expression);
      } });
  },
  ComputedPropertyName: function ComputedPropertyName(reducer, node) {
    var _this24 = this;

    return reducer.reduceComputedPropertyName(node, { expression: function expression() {
        return _this24[node.expression.type](reducer, node.expression);
      } });
  },
  ConditionalExpression: function ConditionalExpression(reducer, node) {
    var _this25 = this;

    return reducer.reduceConditionalExpression(node, { test: function test() {
        return _this25[node.test.type](reducer, node.test);
      }, consequent: function consequent() {
        return _this25[node.consequent.type](reducer, node.consequent);
      }, alternate: function alternate() {
        return _this25[node.alternate.type](reducer, node.alternate);
      } });
  },
  ContinueStatement: function ContinueStatement(reducer, node) {
    return reducer.reduceContinueStatement(node);
  },
  DataProperty: function DataProperty(reducer, node) {
    var _this26 = this;

    return reducer.reduceDataProperty(node, { name: function name() {
        return _this26[node.name.type](reducer, node.name);
      }, expression: function expression() {
        return _this26[node.expression.type](reducer, node.expression);
      } });
  },
  DebuggerStatement: function DebuggerStatement(reducer, node) {
    return reducer.reduceDebuggerStatement(node);
  },
  Directive: function Directive(reducer, node) {
    return reducer.reduceDirective(node);
  },
  DoWhileStatement: function DoWhileStatement(reducer, node) {
    var _this27 = this;

    return reducer.reduceDoWhileStatement(node, { body: function body() {
        return _this27[node.body.type](reducer, node.body);
      }, test: function test() {
        return _this27[node.test.type](reducer, node.test);
      } });
  },
  EmptyStatement: function EmptyStatement(reducer, node) {
    return reducer.reduceEmptyStatement(node);
  },
  Export: function Export(reducer, node) {
    var _this28 = this;

    return reducer.reduceExport(node, { declaration: function declaration() {
        return _this28[node.declaration.type](reducer, node.declaration);
      } });
  },
  ExportAllFrom: function ExportAllFrom(reducer, node) {
    return reducer.reduceExportAllFrom(node);
  },
  ExportDefault: function ExportDefault(reducer, node) {
    var _this29 = this;

    return reducer.reduceExportDefault(node, { body: function body() {
        return _this29[node.body.type](reducer, node.body);
      } });
  },
  ExportFrom: function ExportFrom(reducer, node) {
    var _this30 = this;

    return reducer.reduceExportFrom(node, { namedExports: node.namedExports.map(function (v) {
        return function () {
          return _this30.ExportFromSpecifier(reducer, v);
        };
      }) });
  },
  ExportFromSpecifier: function ExportFromSpecifier(reducer, node) {
    return reducer.reduceExportFromSpecifier(node);
  },
  ExportLocalSpecifier: function ExportLocalSpecifier(reducer, node) {
    var _this31 = this;

    return reducer.reduceExportLocalSpecifier(node, { name: function name() {
        return _this31.IdentifierExpression(reducer, node.name);
      } });
  },
  ExportLocals: function ExportLocals(reducer, node) {
    var _this32 = this;

    return reducer.reduceExportLocals(node, { namedExports: node.namedExports.map(function (v) {
        return function () {
          return _this32.ExportLocalSpecifier(reducer, v);
        };
      }) });
  },
  ExpressionStatement: function ExpressionStatement(reducer, node) {
    var _this33 = this;

    return reducer.reduceExpressionStatement(node, { expression: function expression() {
        return _this33[node.expression.type](reducer, node.expression);
      } });
  },
  ForAwaitStatement: function ForAwaitStatement(reducer, node) {
    var _this34 = this;

    return reducer.reduceForAwaitStatement(node, { left: function left() {
        return _this34[node.left.type](reducer, node.left);
      }, right: function right() {
        return _this34[node.right.type](reducer, node.right);
      }, body: function body() {
        return _this34[node.body.type](reducer, node.body);
      } });
  },
  ForInStatement: function ForInStatement(reducer, node) {
    var _this35 = this;

    return reducer.reduceForInStatement(node, { left: function left() {
        return _this35[node.left.type](reducer, node.left);
      }, right: function right() {
        return _this35[node.right.type](reducer, node.right);
      }, body: function body() {
        return _this35[node.body.type](reducer, node.body);
      } });
  },
  ForOfStatement: function ForOfStatement(reducer, node) {
    var _this36 = this;

    return reducer.reduceForOfStatement(node, { left: function left() {
        return _this36[node.left.type](reducer, node.left);
      }, right: function right() {
        return _this36[node.right.type](reducer, node.right);
      }, body: function body() {
        return _this36[node.body.type](reducer, node.body);
      } });
  },
  ForStatement: function ForStatement(reducer, node) {
    var _this37 = this;

    return reducer.reduceForStatement(node, { init: node.init && function () {
        return _this37[node.init.type](reducer, node.init);
      }, test: node.test && function () {
        return _this37[node.test.type](reducer, node.test);
      }, update: node.update && function () {
        return _this37[node.update.type](reducer, node.update);
      }, body: function body() {
        return _this37[node.body.type](reducer, node.body);
      } });
  },
  FormalParameters: function FormalParameters(reducer, node) {
    var _this38 = this;

    return reducer.reduceFormalParameters(node, { items: node.items.map(function (v) {
        return function () {
          return _this38[v.type](reducer, v);
        };
      }), rest: node.rest && function () {
        return _this38[node.rest.type](reducer, node.rest);
      } });
  },
  FunctionBody: function FunctionBody(reducer, node) {
    var _this39 = this;

    return reducer.reduceFunctionBody(node, { directives: node.directives.map(function (v) {
        return function () {
          return _this39.Directive(reducer, v);
        };
      }), statements: node.statements.map(function (v) {
        return function () {
          return _this39[v.type](reducer, v);
        };
      }) });
  },
  FunctionDeclaration: function FunctionDeclaration(reducer, node) {
    var _this40 = this;

    return reducer.reduceFunctionDeclaration(node, { name: function name() {
        return _this40.BindingIdentifier(reducer, node.name);
      }, params: function params() {
        return _this40.FormalParameters(reducer, node.params);
      }, body: function body() {
        return _this40.FunctionBody(reducer, node.body);
      } });
  },
  FunctionExpression: function FunctionExpression(reducer, node) {
    var _this41 = this;

    return reducer.reduceFunctionExpression(node, { name: node.name && function () {
        return _this41.BindingIdentifier(reducer, node.name);
      }, params: function params() {
        return _this41.FormalParameters(reducer, node.params);
      }, body: function body() {
        return _this41.FunctionBody(reducer, node.body);
      } });
  },
  Getter: function Getter(reducer, node) {
    var _this42 = this;

    return reducer.reduceGetter(node, { name: function name() {
        return _this42[node.name.type](reducer, node.name);
      }, body: function body() {
        return _this42.FunctionBody(reducer, node.body);
      } });
  },
  IdentifierExpression: function IdentifierExpression(reducer, node) {
    return reducer.reduceIdentifierExpression(node);
  },
  IfStatement: function IfStatement(reducer, node) {
    var _this43 = this;

    return reducer.reduceIfStatement(node, { test: function test() {
        return _this43[node.test.type](reducer, node.test);
      }, consequent: function consequent() {
        return _this43[node.consequent.type](reducer, node.consequent);
      }, alternate: node.alternate && function () {
        return _this43[node.alternate.type](reducer, node.alternate);
      } });
  },
  Import: function Import(reducer, node) {
    var _this44 = this;

    return reducer.reduceImport(node, { defaultBinding: node.defaultBinding && function () {
        return _this44.BindingIdentifier(reducer, node.defaultBinding);
      }, namedImports: node.namedImports.map(function (v) {
        return function () {
          return _this44.ImportSpecifier(reducer, v);
        };
      }) });
  },
  ImportNamespace: function ImportNamespace(reducer, node) {
    var _this45 = this;

    return reducer.reduceImportNamespace(node, { defaultBinding: node.defaultBinding && function () {
        return _this45.BindingIdentifier(reducer, node.defaultBinding);
      }, namespaceBinding: function namespaceBinding() {
        return _this45.BindingIdentifier(reducer, node.namespaceBinding);
      } });
  },
  ImportSpecifier: function ImportSpecifier(reducer, node) {
    var _this46 = this;

    return reducer.reduceImportSpecifier(node, { binding: function binding() {
        return _this46.BindingIdentifier(reducer, node.binding);
      } });
  },
  LabeledStatement: function LabeledStatement(reducer, node) {
    var _this47 = this;

    return reducer.reduceLabeledStatement(node, { body: function body() {
        return _this47[node.body.type](reducer, node.body);
      } });
  },
  LiteralBooleanExpression: function LiteralBooleanExpression(reducer, node) {
    return reducer.reduceLiteralBooleanExpression(node);
  },
  LiteralInfinityExpression: function LiteralInfinityExpression(reducer, node) {
    return reducer.reduceLiteralInfinityExpression(node);
  },
  LiteralNullExpression: function LiteralNullExpression(reducer, node) {
    return reducer.reduceLiteralNullExpression(node);
  },
  LiteralNumericExpression: function LiteralNumericExpression(reducer, node) {
    return reducer.reduceLiteralNumericExpression(node);
  },
  LiteralRegExpExpression: function LiteralRegExpExpression(reducer, node) {
    return reducer.reduceLiteralRegExpExpression(node);
  },
  LiteralStringExpression: function LiteralStringExpression(reducer, node) {
    return reducer.reduceLiteralStringExpression(node);
  },
  Method: function Method(reducer, node) {
    var _this48 = this;

    return reducer.reduceMethod(node, { name: function name() {
        return _this48[node.name.type](reducer, node.name);
      }, params: function params() {
        return _this48.FormalParameters(reducer, node.params);
      }, body: function body() {
        return _this48.FunctionBody(reducer, node.body);
      } });
  },
  Module: function Module(reducer, node) {
    var _this49 = this;

    return reducer.reduceModule(node, { directives: node.directives.map(function (v) {
        return function () {
          return _this49.Directive(reducer, v);
        };
      }), items: node.items.map(function (v) {
        return function () {
          return _this49[v.type](reducer, v);
        };
      }) });
  },
  NewExpression: function NewExpression(reducer, node) {
    var _this50 = this;

    return reducer.reduceNewExpression(node, { callee: function callee() {
        return _this50[node.callee.type](reducer, node.callee);
      }, arguments: node.arguments.map(function (v) {
        return function () {
          return _this50[v.type](reducer, v);
        };
      }) });
  },
  NewTargetExpression: function NewTargetExpression(reducer, node) {
    return reducer.reduceNewTargetExpression(node);
  },
  ObjectAssignmentTarget: function ObjectAssignmentTarget(reducer, node) {
    var _this51 = this;

    return reducer.reduceObjectAssignmentTarget(node, { properties: node.properties.map(function (v) {
        return function () {
          return _this51[v.type](reducer, v);
        };
      }), rest: node.rest && function () {
        return _this51[node.rest.type](reducer, node.rest);
      } });
  },
  ObjectBinding: function ObjectBinding(reducer, node) {
    var _this52 = this;

    return reducer.reduceObjectBinding(node, { properties: node.properties.map(function (v) {
        return function () {
          return _this52[v.type](reducer, v);
        };
      }), rest: node.rest && function () {
        return _this52[node.rest.type](reducer, node.rest);
      } });
  },
  ObjectExpression: function ObjectExpression(reducer, node) {
    var _this53 = this;

    return reducer.reduceObjectExpression(node, { properties: node.properties.map(function (v) {
        return function () {
          return _this53[v.type](reducer, v);
        };
      }) });
  },
  ReturnStatement: function ReturnStatement(reducer, node) {
    var _this54 = this;

    return reducer.reduceReturnStatement(node, { expression: node.expression && function () {
        return _this54[node.expression.type](reducer, node.expression);
      } });
  },
  Script: function Script(reducer, node) {
    var _this55 = this;

    return reducer.reduceScript(node, { directives: node.directives.map(function (v) {
        return function () {
          return _this55.Directive(reducer, v);
        };
      }), statements: node.statements.map(function (v) {
        return function () {
          return _this55[v.type](reducer, v);
        };
      }) });
  },
  Setter: function Setter(reducer, node) {
    var _this56 = this;

    return reducer.reduceSetter(node, { name: function name() {
        return _this56[node.name.type](reducer, node.name);
      }, param: function param() {
        return _this56[node.param.type](reducer, node.param);
      }, body: function body() {
        return _this56.FunctionBody(reducer, node.body);
      } });
  },
  ShorthandProperty: function ShorthandProperty(reducer, node) {
    var _this57 = this;

    return reducer.reduceShorthandProperty(node, { name: function name() {
        return _this57.IdentifierExpression(reducer, node.name);
      } });
  },
  SpreadElement: function SpreadElement(reducer, node) {
    var _this58 = this;

    return reducer.reduceSpreadElement(node, { expression: function expression() {
        return _this58[node.expression.type](reducer, node.expression);
      } });
  },
  SpreadProperty: function SpreadProperty(reducer, node) {
    var _this59 = this;

    return reducer.reduceSpreadProperty(node, { expression: function expression() {
        return _this59[node.expression.type](reducer, node.expression);
      } });
  },
  StaticMemberAssignmentTarget: function StaticMemberAssignmentTarget(reducer, node) {
    var _this60 = this;

    return reducer.reduceStaticMemberAssignmentTarget(node, { object: function object() {
        return _this60[node.object.type](reducer, node.object);
      } });
  },
  StaticMemberExpression: function StaticMemberExpression(reducer, node) {
    var _this61 = this;

    return reducer.reduceStaticMemberExpression(node, { object: function object() {
        return _this61[node.object.type](reducer, node.object);
      } });
  },
  StaticPropertyName: function StaticPropertyName(reducer, node) {
    return reducer.reduceStaticPropertyName(node);
  },
  Super: function Super(reducer, node) {
    return reducer.reduceSuper(node);
  },
  SwitchCase: function SwitchCase(reducer, node) {
    var _this62 = this;

    return reducer.reduceSwitchCase(node, { test: function test() {
        return _this62[node.test.type](reducer, node.test);
      }, consequent: node.consequent.map(function (v) {
        return function () {
          return _this62[v.type](reducer, v);
        };
      }) });
  },
  SwitchDefault: function SwitchDefault(reducer, node) {
    var _this63 = this;

    return reducer.reduceSwitchDefault(node, { consequent: node.consequent.map(function (v) {
        return function () {
          return _this63[v.type](reducer, v);
        };
      }) });
  },
  SwitchStatement: function SwitchStatement(reducer, node) {
    var _this64 = this;

    return reducer.reduceSwitchStatement(node, { discriminant: function discriminant() {
        return _this64[node.discriminant.type](reducer, node.discriminant);
      }, cases: node.cases.map(function (v) {
        return function () {
          return _this64.SwitchCase(reducer, v);
        };
      }) });
  },
  SwitchStatementWithDefault: function SwitchStatementWithDefault(reducer, node) {
    var _this65 = this;

    return reducer.reduceSwitchStatementWithDefault(node, { discriminant: function discriminant() {
        return _this65[node.discriminant.type](reducer, node.discriminant);
      }, preDefaultCases: node.preDefaultCases.map(function (v) {
        return function () {
          return _this65.SwitchCase(reducer, v);
        };
      }), defaultCase: function defaultCase() {
        return _this65.SwitchDefault(reducer, node.defaultCase);
      }, postDefaultCases: node.postDefaultCases.map(function (v) {
        return function () {
          return _this65.SwitchCase(reducer, v);
        };
      }) });
  },
  TemplateElement: function TemplateElement(reducer, node) {
    return reducer.reduceTemplateElement(node);
  },
  TemplateExpression: function TemplateExpression(reducer, node) {
    var _this66 = this;

    return reducer.reduceTemplateExpression(node, { tag: node.tag && function () {
        return _this66[node.tag.type](reducer, node.tag);
      }, elements: node.elements.map(function (v) {
        return function () {
          return _this66[v.type](reducer, v);
        };
      }) });
  },
  ThisExpression: function ThisExpression(reducer, node) {
    return reducer.reduceThisExpression(node);
  },
  ThrowStatement: function ThrowStatement(reducer, node) {
    var _this67 = this;

    return reducer.reduceThrowStatement(node, { expression: function expression() {
        return _this67[node.expression.type](reducer, node.expression);
      } });
  },
  TryCatchStatement: function TryCatchStatement(reducer, node) {
    var _this68 = this;

    return reducer.reduceTryCatchStatement(node, { body: function body() {
        return _this68.Block(reducer, node.body);
      }, catchClause: function catchClause() {
        return _this68.CatchClause(reducer, node.catchClause);
      } });
  },
  TryFinallyStatement: function TryFinallyStatement(reducer, node) {
    var _this69 = this;

    return reducer.reduceTryFinallyStatement(node, { body: function body() {
        return _this69.Block(reducer, node.body);
      }, catchClause: node.catchClause && function () {
        return _this69.CatchClause(reducer, node.catchClause);
      }, finalizer: function finalizer() {
        return _this69.Block(reducer, node.finalizer);
      } });
  },
  UnaryExpression: function UnaryExpression(reducer, node) {
    var _this70 = this;

    return reducer.reduceUnaryExpression(node, { operand: function operand() {
        return _this70[node.operand.type](reducer, node.operand);
      } });
  },
  UpdateExpression: function UpdateExpression(reducer, node) {
    var _this71 = this;

    return reducer.reduceUpdateExpression(node, { operand: function operand() {
        return _this71[node.operand.type](reducer, node.operand);
      } });
  },
  VariableDeclaration: function VariableDeclaration(reducer, node) {
    var _this72 = this;

    return reducer.reduceVariableDeclaration(node, { declarators: node.declarators.map(function (v) {
        return function () {
          return _this72.VariableDeclarator(reducer, v);
        };
      }) });
  },
  VariableDeclarationStatement: function VariableDeclarationStatement(reducer, node) {
    var _this73 = this;

    return reducer.reduceVariableDeclarationStatement(node, { declaration: function declaration() {
        return _this73.VariableDeclaration(reducer, node.declaration);
      } });
  },
  VariableDeclarator: function VariableDeclarator(reducer, node) {
    var _this74 = this;

    return reducer.reduceVariableDeclarator(node, { binding: function binding() {
        return _this74[node.binding.type](reducer, node.binding);
      }, init: node.init && function () {
        return _this74[node.init.type](reducer, node.init);
      } });
  },
  WhileStatement: function WhileStatement(reducer, node) {
    var _this75 = this;

    return reducer.reduceWhileStatement(node, { test: function test() {
        return _this75[node.test.type](reducer, node.test);
      }, body: function body() {
        return _this75[node.body.type](reducer, node.body);
      } });
  },
  WithStatement: function WithStatement(reducer, node) {
    var _this76 = this;

    return reducer.reduceWithStatement(node, { object: function object() {
        return _this76[node.object.type](reducer, node.object);
      }, body: function body() {
        return _this76[node.body.type](reducer, node.body);
      } });
  },
  YieldExpression: function YieldExpression(reducer, node) {
    var _this77 = this;

    return reducer.reduceYieldExpression(node, { expression: node.expression && function () {
        return _this77[node.expression.type](reducer, node.expression);
      } });
  },
  YieldGeneratorExpression: function YieldGeneratorExpression(reducer, node) {
    var _this78 = this;

    return reducer.reduceYieldGeneratorExpression(node, { expression: function expression() {
        return _this78[node.expression.type](reducer, node.expression);
      } });
  }
};

function thunkedReduce(reducer, node) {
  return director[node.type](reducer, node);
}

var thunkify$1 = {};

Object.defineProperty(thunkify$1, "__esModule", {
  value: true
});
thunkify$1.default = thunkify;
// Generated by generate-thunkify.js
/**
 * Copyright 2018 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function thunkify(reducer) {
  return {
    reduceArrayAssignmentTarget: function reduceArrayAssignmentTarget(node, _ref) {
      var elements = _ref.elements,
          rest = _ref.rest;

      return reducer.reduceArrayAssignmentTarget(node, { elements: elements.map(function (n) {
          return n == null ? null : n();
        }), rest: rest == null ? null : rest() });
    },
    reduceArrayBinding: function reduceArrayBinding(node, _ref2) {
      var elements = _ref2.elements,
          rest = _ref2.rest;

      return reducer.reduceArrayBinding(node, { elements: elements.map(function (n) {
          return n == null ? null : n();
        }), rest: rest == null ? null : rest() });
    },
    reduceArrayExpression: function reduceArrayExpression(node, _ref3) {
      var elements = _ref3.elements;

      return reducer.reduceArrayExpression(node, { elements: elements.map(function (n) {
          return n == null ? null : n();
        }) });
    },
    reduceArrowExpression: function reduceArrowExpression(node, _ref4) {
      var params = _ref4.params,
          body = _ref4.body;

      return reducer.reduceArrowExpression(node, { params: params(), body: body() });
    },
    reduceAssignmentExpression: function reduceAssignmentExpression(node, _ref5) {
      var binding = _ref5.binding,
          expression = _ref5.expression;

      return reducer.reduceAssignmentExpression(node, { binding: binding(), expression: expression() });
    },
    reduceAssignmentTargetIdentifier: function reduceAssignmentTargetIdentifier(node) {
      return reducer.reduceAssignmentTargetIdentifier(node);
    },
    reduceAssignmentTargetPropertyIdentifier: function reduceAssignmentTargetPropertyIdentifier(node, _ref6) {
      var binding = _ref6.binding,
          init = _ref6.init;

      return reducer.reduceAssignmentTargetPropertyIdentifier(node, { binding: binding(), init: init == null ? null : init() });
    },
    reduceAssignmentTargetPropertyProperty: function reduceAssignmentTargetPropertyProperty(node, _ref7) {
      var name = _ref7.name,
          binding = _ref7.binding;

      return reducer.reduceAssignmentTargetPropertyProperty(node, { name: name(), binding: binding() });
    },
    reduceAssignmentTargetWithDefault: function reduceAssignmentTargetWithDefault(node, _ref8) {
      var binding = _ref8.binding,
          init = _ref8.init;

      return reducer.reduceAssignmentTargetWithDefault(node, { binding: binding(), init: init() });
    },
    reduceAwaitExpression: function reduceAwaitExpression(node, _ref9) {
      var expression = _ref9.expression;

      return reducer.reduceAwaitExpression(node, { expression: expression() });
    },
    reduceBinaryExpression: function reduceBinaryExpression(node, _ref10) {
      var left = _ref10.left,
          right = _ref10.right;

      return reducer.reduceBinaryExpression(node, { left: left(), right: right() });
    },
    reduceBindingIdentifier: function reduceBindingIdentifier(node) {
      return reducer.reduceBindingIdentifier(node);
    },
    reduceBindingPropertyIdentifier: function reduceBindingPropertyIdentifier(node, _ref11) {
      var binding = _ref11.binding,
          init = _ref11.init;

      return reducer.reduceBindingPropertyIdentifier(node, { binding: binding(), init: init == null ? null : init() });
    },
    reduceBindingPropertyProperty: function reduceBindingPropertyProperty(node, _ref12) {
      var name = _ref12.name,
          binding = _ref12.binding;

      return reducer.reduceBindingPropertyProperty(node, { name: name(), binding: binding() });
    },
    reduceBindingWithDefault: function reduceBindingWithDefault(node, _ref13) {
      var binding = _ref13.binding,
          init = _ref13.init;

      return reducer.reduceBindingWithDefault(node, { binding: binding(), init: init() });
    },
    reduceBlock: function reduceBlock(node, _ref14) {
      var statements = _ref14.statements;

      return reducer.reduceBlock(node, { statements: statements.map(function (n) {
          return n();
        }) });
    },
    reduceBlockStatement: function reduceBlockStatement(node, _ref15) {
      var block = _ref15.block;

      return reducer.reduceBlockStatement(node, { block: block() });
    },
    reduceBreakStatement: function reduceBreakStatement(node) {
      return reducer.reduceBreakStatement(node);
    },
    reduceCallExpression: function reduceCallExpression(node, _ref16) {
      var callee = _ref16.callee,
          _arguments = _ref16.arguments;

      return reducer.reduceCallExpression(node, { callee: callee(), arguments: _arguments.map(function (n) {
          return n();
        }) });
    },
    reduceCatchClause: function reduceCatchClause(node, _ref17) {
      var binding = _ref17.binding,
          body = _ref17.body;

      return reducer.reduceCatchClause(node, { binding: binding(), body: body() });
    },
    reduceClassDeclaration: function reduceClassDeclaration(node, _ref18) {
      var name = _ref18.name,
          _super = _ref18.super,
          elements = _ref18.elements;

      return reducer.reduceClassDeclaration(node, { name: name(), super: _super == null ? null : _super(), elements: elements.map(function (n) {
          return n();
        }) });
    },
    reduceClassElement: function reduceClassElement(node, _ref19) {
      var method = _ref19.method;

      return reducer.reduceClassElement(node, { method: method() });
    },
    reduceClassExpression: function reduceClassExpression(node, _ref20) {
      var name = _ref20.name,
          _super = _ref20.super,
          elements = _ref20.elements;

      return reducer.reduceClassExpression(node, { name: name == null ? null : name(), super: _super == null ? null : _super(), elements: elements.map(function (n) {
          return n();
        }) });
    },
    reduceCompoundAssignmentExpression: function reduceCompoundAssignmentExpression(node, _ref21) {
      var binding = _ref21.binding,
          expression = _ref21.expression;

      return reducer.reduceCompoundAssignmentExpression(node, { binding: binding(), expression: expression() });
    },
    reduceComputedMemberAssignmentTarget: function reduceComputedMemberAssignmentTarget(node, _ref22) {
      var object = _ref22.object,
          expression = _ref22.expression;

      return reducer.reduceComputedMemberAssignmentTarget(node, { object: object(), expression: expression() });
    },
    reduceComputedMemberExpression: function reduceComputedMemberExpression(node, _ref23) {
      var object = _ref23.object,
          expression = _ref23.expression;

      return reducer.reduceComputedMemberExpression(node, { object: object(), expression: expression() });
    },
    reduceComputedPropertyName: function reduceComputedPropertyName(node, _ref24) {
      var expression = _ref24.expression;

      return reducer.reduceComputedPropertyName(node, { expression: expression() });
    },
    reduceConditionalExpression: function reduceConditionalExpression(node, _ref25) {
      var test = _ref25.test,
          consequent = _ref25.consequent,
          alternate = _ref25.alternate;

      return reducer.reduceConditionalExpression(node, { test: test(), consequent: consequent(), alternate: alternate() });
    },
    reduceContinueStatement: function reduceContinueStatement(node) {
      return reducer.reduceContinueStatement(node);
    },
    reduceDataProperty: function reduceDataProperty(node, _ref26) {
      var name = _ref26.name,
          expression = _ref26.expression;

      return reducer.reduceDataProperty(node, { name: name(), expression: expression() });
    },
    reduceDebuggerStatement: function reduceDebuggerStatement(node) {
      return reducer.reduceDebuggerStatement(node);
    },
    reduceDirective: function reduceDirective(node) {
      return reducer.reduceDirective(node);
    },
    reduceDoWhileStatement: function reduceDoWhileStatement(node, _ref27) {
      var body = _ref27.body,
          test = _ref27.test;

      return reducer.reduceDoWhileStatement(node, { body: body(), test: test() });
    },
    reduceEmptyStatement: function reduceEmptyStatement(node) {
      return reducer.reduceEmptyStatement(node);
    },
    reduceExport: function reduceExport(node, _ref28) {
      var declaration = _ref28.declaration;

      return reducer.reduceExport(node, { declaration: declaration() });
    },
    reduceExportAllFrom: function reduceExportAllFrom(node) {
      return reducer.reduceExportAllFrom(node);
    },
    reduceExportDefault: function reduceExportDefault(node, _ref29) {
      var body = _ref29.body;

      return reducer.reduceExportDefault(node, { body: body() });
    },
    reduceExportFrom: function reduceExportFrom(node, _ref30) {
      var namedExports = _ref30.namedExports;

      return reducer.reduceExportFrom(node, { namedExports: namedExports.map(function (n) {
          return n();
        }) });
    },
    reduceExportFromSpecifier: function reduceExportFromSpecifier(node) {
      return reducer.reduceExportFromSpecifier(node);
    },
    reduceExportLocalSpecifier: function reduceExportLocalSpecifier(node, _ref31) {
      var name = _ref31.name;

      return reducer.reduceExportLocalSpecifier(node, { name: name() });
    },
    reduceExportLocals: function reduceExportLocals(node, _ref32) {
      var namedExports = _ref32.namedExports;

      return reducer.reduceExportLocals(node, { namedExports: namedExports.map(function (n) {
          return n();
        }) });
    },
    reduceExpressionStatement: function reduceExpressionStatement(node, _ref33) {
      var expression = _ref33.expression;

      return reducer.reduceExpressionStatement(node, { expression: expression() });
    },
    reduceForAwaitStatement: function reduceForAwaitStatement(node, _ref34) {
      var left = _ref34.left,
          right = _ref34.right,
          body = _ref34.body;

      return reducer.reduceForAwaitStatement(node, { left: left(), right: right(), body: body() });
    },
    reduceForInStatement: function reduceForInStatement(node, _ref35) {
      var left = _ref35.left,
          right = _ref35.right,
          body = _ref35.body;

      return reducer.reduceForInStatement(node, { left: left(), right: right(), body: body() });
    },
    reduceForOfStatement: function reduceForOfStatement(node, _ref36) {
      var left = _ref36.left,
          right = _ref36.right,
          body = _ref36.body;

      return reducer.reduceForOfStatement(node, { left: left(), right: right(), body: body() });
    },
    reduceForStatement: function reduceForStatement(node, _ref37) {
      var init = _ref37.init,
          test = _ref37.test,
          update = _ref37.update,
          body = _ref37.body;

      return reducer.reduceForStatement(node, { init: init == null ? null : init(), test: test == null ? null : test(), update: update == null ? null : update(), body: body() });
    },
    reduceFormalParameters: function reduceFormalParameters(node, _ref38) {
      var items = _ref38.items,
          rest = _ref38.rest;

      return reducer.reduceFormalParameters(node, { items: items.map(function (n) {
          return n();
        }), rest: rest == null ? null : rest() });
    },
    reduceFunctionBody: function reduceFunctionBody(node, _ref39) {
      var directives = _ref39.directives,
          statements = _ref39.statements;

      return reducer.reduceFunctionBody(node, { directives: directives.map(function (n) {
          return n();
        }), statements: statements.map(function (n) {
          return n();
        }) });
    },
    reduceFunctionDeclaration: function reduceFunctionDeclaration(node, _ref40) {
      var name = _ref40.name,
          params = _ref40.params,
          body = _ref40.body;

      return reducer.reduceFunctionDeclaration(node, { name: name(), params: params(), body: body() });
    },
    reduceFunctionExpression: function reduceFunctionExpression(node, _ref41) {
      var name = _ref41.name,
          params = _ref41.params,
          body = _ref41.body;

      return reducer.reduceFunctionExpression(node, { name: name == null ? null : name(), params: params(), body: body() });
    },
    reduceGetter: function reduceGetter(node, _ref42) {
      var name = _ref42.name,
          body = _ref42.body;

      return reducer.reduceGetter(node, { name: name(), body: body() });
    },
    reduceIdentifierExpression: function reduceIdentifierExpression(node) {
      return reducer.reduceIdentifierExpression(node);
    },
    reduceIfStatement: function reduceIfStatement(node, _ref43) {
      var test = _ref43.test,
          consequent = _ref43.consequent,
          alternate = _ref43.alternate;

      return reducer.reduceIfStatement(node, { test: test(), consequent: consequent(), alternate: alternate == null ? null : alternate() });
    },
    reduceImport: function reduceImport(node, _ref44) {
      var defaultBinding = _ref44.defaultBinding,
          namedImports = _ref44.namedImports;

      return reducer.reduceImport(node, { defaultBinding: defaultBinding == null ? null : defaultBinding(), namedImports: namedImports.map(function (n) {
          return n();
        }) });
    },
    reduceImportNamespace: function reduceImportNamespace(node, _ref45) {
      var defaultBinding = _ref45.defaultBinding,
          namespaceBinding = _ref45.namespaceBinding;

      return reducer.reduceImportNamespace(node, { defaultBinding: defaultBinding == null ? null : defaultBinding(), namespaceBinding: namespaceBinding() });
    },
    reduceImportSpecifier: function reduceImportSpecifier(node, _ref46) {
      var binding = _ref46.binding;

      return reducer.reduceImportSpecifier(node, { binding: binding() });
    },
    reduceLabeledStatement: function reduceLabeledStatement(node, _ref47) {
      var body = _ref47.body;

      return reducer.reduceLabeledStatement(node, { body: body() });
    },
    reduceLiteralBooleanExpression: function reduceLiteralBooleanExpression(node) {
      return reducer.reduceLiteralBooleanExpression(node);
    },
    reduceLiteralInfinityExpression: function reduceLiteralInfinityExpression(node) {
      return reducer.reduceLiteralInfinityExpression(node);
    },
    reduceLiteralNullExpression: function reduceLiteralNullExpression(node) {
      return reducer.reduceLiteralNullExpression(node);
    },
    reduceLiteralNumericExpression: function reduceLiteralNumericExpression(node) {
      return reducer.reduceLiteralNumericExpression(node);
    },
    reduceLiteralRegExpExpression: function reduceLiteralRegExpExpression(node) {
      return reducer.reduceLiteralRegExpExpression(node);
    },
    reduceLiteralStringExpression: function reduceLiteralStringExpression(node) {
      return reducer.reduceLiteralStringExpression(node);
    },
    reduceMethod: function reduceMethod(node, _ref48) {
      var name = _ref48.name,
          params = _ref48.params,
          body = _ref48.body;

      return reducer.reduceMethod(node, { name: name(), params: params(), body: body() });
    },
    reduceModule: function reduceModule(node, _ref49) {
      var directives = _ref49.directives,
          items = _ref49.items;

      return reducer.reduceModule(node, { directives: directives.map(function (n) {
          return n();
        }), items: items.map(function (n) {
          return n();
        }) });
    },
    reduceNewExpression: function reduceNewExpression(node, _ref50) {
      var callee = _ref50.callee,
          _arguments = _ref50.arguments;

      return reducer.reduceNewExpression(node, { callee: callee(), arguments: _arguments.map(function (n) {
          return n();
        }) });
    },
    reduceNewTargetExpression: function reduceNewTargetExpression(node) {
      return reducer.reduceNewTargetExpression(node);
    },
    reduceObjectAssignmentTarget: function reduceObjectAssignmentTarget(node, _ref51) {
      var properties = _ref51.properties,
          rest = _ref51.rest;

      return reducer.reduceObjectAssignmentTarget(node, { properties: properties.map(function (n) {
          return n();
        }), rest: rest == null ? null : rest() });
    },
    reduceObjectBinding: function reduceObjectBinding(node, _ref52) {
      var properties = _ref52.properties,
          rest = _ref52.rest;

      return reducer.reduceObjectBinding(node, { properties: properties.map(function (n) {
          return n();
        }), rest: rest == null ? null : rest() });
    },
    reduceObjectExpression: function reduceObjectExpression(node, _ref53) {
      var properties = _ref53.properties;

      return reducer.reduceObjectExpression(node, { properties: properties.map(function (n) {
          return n();
        }) });
    },
    reduceReturnStatement: function reduceReturnStatement(node, _ref54) {
      var expression = _ref54.expression;

      return reducer.reduceReturnStatement(node, { expression: expression == null ? null : expression() });
    },
    reduceScript: function reduceScript(node, _ref55) {
      var directives = _ref55.directives,
          statements = _ref55.statements;

      return reducer.reduceScript(node, { directives: directives.map(function (n) {
          return n();
        }), statements: statements.map(function (n) {
          return n();
        }) });
    },
    reduceSetter: function reduceSetter(node, _ref56) {
      var name = _ref56.name,
          param = _ref56.param,
          body = _ref56.body;

      return reducer.reduceSetter(node, { name: name(), param: param(), body: body() });
    },
    reduceShorthandProperty: function reduceShorthandProperty(node, _ref57) {
      var name = _ref57.name;

      return reducer.reduceShorthandProperty(node, { name: name() });
    },
    reduceSpreadElement: function reduceSpreadElement(node, _ref58) {
      var expression = _ref58.expression;

      return reducer.reduceSpreadElement(node, { expression: expression() });
    },
    reduceSpreadProperty: function reduceSpreadProperty(node, _ref59) {
      var expression = _ref59.expression;

      return reducer.reduceSpreadProperty(node, { expression: expression() });
    },
    reduceStaticMemberAssignmentTarget: function reduceStaticMemberAssignmentTarget(node, _ref60) {
      var object = _ref60.object;

      return reducer.reduceStaticMemberAssignmentTarget(node, { object: object() });
    },
    reduceStaticMemberExpression: function reduceStaticMemberExpression(node, _ref61) {
      var object = _ref61.object;

      return reducer.reduceStaticMemberExpression(node, { object: object() });
    },
    reduceStaticPropertyName: function reduceStaticPropertyName(node) {
      return reducer.reduceStaticPropertyName(node);
    },
    reduceSuper: function reduceSuper(node) {
      return reducer.reduceSuper(node);
    },
    reduceSwitchCase: function reduceSwitchCase(node, _ref62) {
      var test = _ref62.test,
          consequent = _ref62.consequent;

      return reducer.reduceSwitchCase(node, { test: test(), consequent: consequent.map(function (n) {
          return n();
        }) });
    },
    reduceSwitchDefault: function reduceSwitchDefault(node, _ref63) {
      var consequent = _ref63.consequent;

      return reducer.reduceSwitchDefault(node, { consequent: consequent.map(function (n) {
          return n();
        }) });
    },
    reduceSwitchStatement: function reduceSwitchStatement(node, _ref64) {
      var discriminant = _ref64.discriminant,
          cases = _ref64.cases;

      return reducer.reduceSwitchStatement(node, { discriminant: discriminant(), cases: cases.map(function (n) {
          return n();
        }) });
    },
    reduceSwitchStatementWithDefault: function reduceSwitchStatementWithDefault(node, _ref65) {
      var discriminant = _ref65.discriminant,
          preDefaultCases = _ref65.preDefaultCases,
          defaultCase = _ref65.defaultCase,
          postDefaultCases = _ref65.postDefaultCases;

      return reducer.reduceSwitchStatementWithDefault(node, { discriminant: discriminant(), preDefaultCases: preDefaultCases.map(function (n) {
          return n();
        }), defaultCase: defaultCase(), postDefaultCases: postDefaultCases.map(function (n) {
          return n();
        }) });
    },
    reduceTemplateElement: function reduceTemplateElement(node) {
      return reducer.reduceTemplateElement(node);
    },
    reduceTemplateExpression: function reduceTemplateExpression(node, _ref66) {
      var tag = _ref66.tag,
          elements = _ref66.elements;

      return reducer.reduceTemplateExpression(node, { tag: tag == null ? null : tag(), elements: elements.map(function (n) {
          return n();
        }) });
    },
    reduceThisExpression: function reduceThisExpression(node) {
      return reducer.reduceThisExpression(node);
    },
    reduceThrowStatement: function reduceThrowStatement(node, _ref67) {
      var expression = _ref67.expression;

      return reducer.reduceThrowStatement(node, { expression: expression() });
    },
    reduceTryCatchStatement: function reduceTryCatchStatement(node, _ref68) {
      var body = _ref68.body,
          catchClause = _ref68.catchClause;

      return reducer.reduceTryCatchStatement(node, { body: body(), catchClause: catchClause() });
    },
    reduceTryFinallyStatement: function reduceTryFinallyStatement(node, _ref69) {
      var body = _ref69.body,
          catchClause = _ref69.catchClause,
          finalizer = _ref69.finalizer;

      return reducer.reduceTryFinallyStatement(node, { body: body(), catchClause: catchClause == null ? null : catchClause(), finalizer: finalizer() });
    },
    reduceUnaryExpression: function reduceUnaryExpression(node, _ref70) {
      var operand = _ref70.operand;

      return reducer.reduceUnaryExpression(node, { operand: operand() });
    },
    reduceUpdateExpression: function reduceUpdateExpression(node, _ref71) {
      var operand = _ref71.operand;

      return reducer.reduceUpdateExpression(node, { operand: operand() });
    },
    reduceVariableDeclaration: function reduceVariableDeclaration(node, _ref72) {
      var declarators = _ref72.declarators;

      return reducer.reduceVariableDeclaration(node, { declarators: declarators.map(function (n) {
          return n();
        }) });
    },
    reduceVariableDeclarationStatement: function reduceVariableDeclarationStatement(node, _ref73) {
      var declaration = _ref73.declaration;

      return reducer.reduceVariableDeclarationStatement(node, { declaration: declaration() });
    },
    reduceVariableDeclarator: function reduceVariableDeclarator(node, _ref74) {
      var binding = _ref74.binding,
          init = _ref74.init;

      return reducer.reduceVariableDeclarator(node, { binding: binding(), init: init == null ? null : init() });
    },
    reduceWhileStatement: function reduceWhileStatement(node, _ref75) {
      var test = _ref75.test,
          body = _ref75.body;

      return reducer.reduceWhileStatement(node, { test: test(), body: body() });
    },
    reduceWithStatement: function reduceWithStatement(node, _ref76) {
      var object = _ref76.object,
          body = _ref76.body;

      return reducer.reduceWithStatement(node, { object: object(), body: body() });
    },
    reduceYieldExpression: function reduceYieldExpression(node, _ref77) {
      var expression = _ref77.expression;

      return reducer.reduceYieldExpression(node, { expression: expression == null ? null : expression() });
    },
    reduceYieldGeneratorExpression: function reduceYieldGeneratorExpression(node, _ref78) {
      var expression = _ref78.expression;

      return reducer.reduceYieldGeneratorExpression(node, { expression: expression() });
    }
  };
}

var thunkifyClass$1 = {};

Object.defineProperty(thunkifyClass$1, "__esModule", {
  value: true
});

var _createClass$b = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get$3 = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

thunkifyClass$1.default = thunkifyClass;

function _classCallCheck$e(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$6(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$6(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Generated by generate-thunkify.js
/**
 * Copyright 2018 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function thunkifyClass(reducerClass) {
  return function (_reducerClass) {
    _inherits$6(_class, _reducerClass);

    function _class() {
      _classCallCheck$e(this, _class);

      return _possibleConstructorReturn$6(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    _createClass$b(_class, [{
      key: "reduceArrayAssignmentTarget",
      value: function reduceArrayAssignmentTarget(node, _ref) {
        var elements = _ref.elements,
            rest = _ref.rest;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceArrayAssignmentTarget", this).call(this, node, { elements: elements.map(function (n) {
            return n == null ? null : n();
          }), rest: rest == null ? null : rest() });
      }
    }, {
      key: "reduceArrayBinding",
      value: function reduceArrayBinding(node, _ref2) {
        var elements = _ref2.elements,
            rest = _ref2.rest;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceArrayBinding", this).call(this, node, { elements: elements.map(function (n) {
            return n == null ? null : n();
          }), rest: rest == null ? null : rest() });
      }
    }, {
      key: "reduceArrayExpression",
      value: function reduceArrayExpression(node, _ref3) {
        var elements = _ref3.elements;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceArrayExpression", this).call(this, node, { elements: elements.map(function (n) {
            return n == null ? null : n();
          }) });
      }
    }, {
      key: "reduceArrowExpression",
      value: function reduceArrowExpression(node, _ref4) {
        var params = _ref4.params,
            body = _ref4.body;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceArrowExpression", this).call(this, node, { params: params(), body: body() });
      }
    }, {
      key: "reduceAssignmentExpression",
      value: function reduceAssignmentExpression(node, _ref5) {
        var binding = _ref5.binding,
            expression = _ref5.expression;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceAssignmentExpression", this).call(this, node, { binding: binding(), expression: expression() });
      }
    }, {
      key: "reduceAssignmentTargetIdentifier",
      value: function reduceAssignmentTargetIdentifier(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceAssignmentTargetIdentifier", this).call(this, node);
      }
    }, {
      key: "reduceAssignmentTargetPropertyIdentifier",
      value: function reduceAssignmentTargetPropertyIdentifier(node, _ref6) {
        var binding = _ref6.binding,
            init = _ref6.init;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceAssignmentTargetPropertyIdentifier", this).call(this, node, { binding: binding(), init: init == null ? null : init() });
      }
    }, {
      key: "reduceAssignmentTargetPropertyProperty",
      value: function reduceAssignmentTargetPropertyProperty(node, _ref7) {
        var name = _ref7.name,
            binding = _ref7.binding;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceAssignmentTargetPropertyProperty", this).call(this, node, { name: name(), binding: binding() });
      }
    }, {
      key: "reduceAssignmentTargetWithDefault",
      value: function reduceAssignmentTargetWithDefault(node, _ref8) {
        var binding = _ref8.binding,
            init = _ref8.init;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceAssignmentTargetWithDefault", this).call(this, node, { binding: binding(), init: init() });
      }
    }, {
      key: "reduceAwaitExpression",
      value: function reduceAwaitExpression(node, _ref9) {
        var expression = _ref9.expression;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceAwaitExpression", this).call(this, node, { expression: expression() });
      }
    }, {
      key: "reduceBinaryExpression",
      value: function reduceBinaryExpression(node, _ref10) {
        var left = _ref10.left,
            right = _ref10.right;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceBinaryExpression", this).call(this, node, { left: left(), right: right() });
      }
    }, {
      key: "reduceBindingIdentifier",
      value: function reduceBindingIdentifier(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceBindingIdentifier", this).call(this, node);
      }
    }, {
      key: "reduceBindingPropertyIdentifier",
      value: function reduceBindingPropertyIdentifier(node, _ref11) {
        var binding = _ref11.binding,
            init = _ref11.init;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceBindingPropertyIdentifier", this).call(this, node, { binding: binding(), init: init == null ? null : init() });
      }
    }, {
      key: "reduceBindingPropertyProperty",
      value: function reduceBindingPropertyProperty(node, _ref12) {
        var name = _ref12.name,
            binding = _ref12.binding;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceBindingPropertyProperty", this).call(this, node, { name: name(), binding: binding() });
      }
    }, {
      key: "reduceBindingWithDefault",
      value: function reduceBindingWithDefault(node, _ref13) {
        var binding = _ref13.binding,
            init = _ref13.init;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceBindingWithDefault", this).call(this, node, { binding: binding(), init: init() });
      }
    }, {
      key: "reduceBlock",
      value: function reduceBlock(node, _ref14) {
        var statements = _ref14.statements;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceBlock", this).call(this, node, { statements: statements.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceBlockStatement",
      value: function reduceBlockStatement(node, _ref15) {
        var block = _ref15.block;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceBlockStatement", this).call(this, node, { block: block() });
      }
    }, {
      key: "reduceBreakStatement",
      value: function reduceBreakStatement(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceBreakStatement", this).call(this, node);
      }
    }, {
      key: "reduceCallExpression",
      value: function reduceCallExpression(node, _ref16) {
        var callee = _ref16.callee,
            _arguments = _ref16.arguments;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceCallExpression", this).call(this, node, { callee: callee(), arguments: _arguments.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceCatchClause",
      value: function reduceCatchClause(node, _ref17) {
        var binding = _ref17.binding,
            body = _ref17.body;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceCatchClause", this).call(this, node, { binding: binding(), body: body() });
      }
    }, {
      key: "reduceClassDeclaration",
      value: function reduceClassDeclaration(node, _ref18) {
        var name = _ref18.name,
            _super = _ref18.super,
            elements = _ref18.elements;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceClassDeclaration", this).call(this, node, { name: name(), super: _super == null ? null : _super(), elements: elements.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceClassElement",
      value: function reduceClassElement(node, _ref19) {
        var method = _ref19.method;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceClassElement", this).call(this, node, { method: method() });
      }
    }, {
      key: "reduceClassExpression",
      value: function reduceClassExpression(node, _ref20) {
        var name = _ref20.name,
            _super = _ref20.super,
            elements = _ref20.elements;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceClassExpression", this).call(this, node, { name: name == null ? null : name(), super: _super == null ? null : _super(), elements: elements.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceCompoundAssignmentExpression",
      value: function reduceCompoundAssignmentExpression(node, _ref21) {
        var binding = _ref21.binding,
            expression = _ref21.expression;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceCompoundAssignmentExpression", this).call(this, node, { binding: binding(), expression: expression() });
      }
    }, {
      key: "reduceComputedMemberAssignmentTarget",
      value: function reduceComputedMemberAssignmentTarget(node, _ref22) {
        var object = _ref22.object,
            expression = _ref22.expression;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceComputedMemberAssignmentTarget", this).call(this, node, { object: object(), expression: expression() });
      }
    }, {
      key: "reduceComputedMemberExpression",
      value: function reduceComputedMemberExpression(node, _ref23) {
        var object = _ref23.object,
            expression = _ref23.expression;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceComputedMemberExpression", this).call(this, node, { object: object(), expression: expression() });
      }
    }, {
      key: "reduceComputedPropertyName",
      value: function reduceComputedPropertyName(node, _ref24) {
        var expression = _ref24.expression;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceComputedPropertyName", this).call(this, node, { expression: expression() });
      }
    }, {
      key: "reduceConditionalExpression",
      value: function reduceConditionalExpression(node, _ref25) {
        var test = _ref25.test,
            consequent = _ref25.consequent,
            alternate = _ref25.alternate;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceConditionalExpression", this).call(this, node, { test: test(), consequent: consequent(), alternate: alternate() });
      }
    }, {
      key: "reduceContinueStatement",
      value: function reduceContinueStatement(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceContinueStatement", this).call(this, node);
      }
    }, {
      key: "reduceDataProperty",
      value: function reduceDataProperty(node, _ref26) {
        var name = _ref26.name,
            expression = _ref26.expression;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceDataProperty", this).call(this, node, { name: name(), expression: expression() });
      }
    }, {
      key: "reduceDebuggerStatement",
      value: function reduceDebuggerStatement(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceDebuggerStatement", this).call(this, node);
      }
    }, {
      key: "reduceDirective",
      value: function reduceDirective(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceDirective", this).call(this, node);
      }
    }, {
      key: "reduceDoWhileStatement",
      value: function reduceDoWhileStatement(node, _ref27) {
        var body = _ref27.body,
            test = _ref27.test;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceDoWhileStatement", this).call(this, node, { body: body(), test: test() });
      }
    }, {
      key: "reduceEmptyStatement",
      value: function reduceEmptyStatement(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceEmptyStatement", this).call(this, node);
      }
    }, {
      key: "reduceExport",
      value: function reduceExport(node, _ref28) {
        var declaration = _ref28.declaration;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceExport", this).call(this, node, { declaration: declaration() });
      }
    }, {
      key: "reduceExportAllFrom",
      value: function reduceExportAllFrom(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceExportAllFrom", this).call(this, node);
      }
    }, {
      key: "reduceExportDefault",
      value: function reduceExportDefault(node, _ref29) {
        var body = _ref29.body;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceExportDefault", this).call(this, node, { body: body() });
      }
    }, {
      key: "reduceExportFrom",
      value: function reduceExportFrom(node, _ref30) {
        var namedExports = _ref30.namedExports;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceExportFrom", this).call(this, node, { namedExports: namedExports.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceExportFromSpecifier",
      value: function reduceExportFromSpecifier(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceExportFromSpecifier", this).call(this, node);
      }
    }, {
      key: "reduceExportLocalSpecifier",
      value: function reduceExportLocalSpecifier(node, _ref31) {
        var name = _ref31.name;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceExportLocalSpecifier", this).call(this, node, { name: name() });
      }
    }, {
      key: "reduceExportLocals",
      value: function reduceExportLocals(node, _ref32) {
        var namedExports = _ref32.namedExports;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceExportLocals", this).call(this, node, { namedExports: namedExports.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceExpressionStatement",
      value: function reduceExpressionStatement(node, _ref33) {
        var expression = _ref33.expression;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceExpressionStatement", this).call(this, node, { expression: expression() });
      }
    }, {
      key: "reduceForAwaitStatement",
      value: function reduceForAwaitStatement(node, _ref34) {
        var left = _ref34.left,
            right = _ref34.right,
            body = _ref34.body;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceForAwaitStatement", this).call(this, node, { left: left(), right: right(), body: body() });
      }
    }, {
      key: "reduceForInStatement",
      value: function reduceForInStatement(node, _ref35) {
        var left = _ref35.left,
            right = _ref35.right,
            body = _ref35.body;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceForInStatement", this).call(this, node, { left: left(), right: right(), body: body() });
      }
    }, {
      key: "reduceForOfStatement",
      value: function reduceForOfStatement(node, _ref36) {
        var left = _ref36.left,
            right = _ref36.right,
            body = _ref36.body;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceForOfStatement", this).call(this, node, { left: left(), right: right(), body: body() });
      }
    }, {
      key: "reduceForStatement",
      value: function reduceForStatement(node, _ref37) {
        var init = _ref37.init,
            test = _ref37.test,
            update = _ref37.update,
            body = _ref37.body;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceForStatement", this).call(this, node, { init: init == null ? null : init(), test: test == null ? null : test(), update: update == null ? null : update(), body: body() });
      }
    }, {
      key: "reduceFormalParameters",
      value: function reduceFormalParameters(node, _ref38) {
        var items = _ref38.items,
            rest = _ref38.rest;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceFormalParameters", this).call(this, node, { items: items.map(function (n) {
            return n();
          }), rest: rest == null ? null : rest() });
      }
    }, {
      key: "reduceFunctionBody",
      value: function reduceFunctionBody(node, _ref39) {
        var directives = _ref39.directives,
            statements = _ref39.statements;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceFunctionBody", this).call(this, node, { directives: directives.map(function (n) {
            return n();
          }), statements: statements.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceFunctionDeclaration",
      value: function reduceFunctionDeclaration(node, _ref40) {
        var name = _ref40.name,
            params = _ref40.params,
            body = _ref40.body;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceFunctionDeclaration", this).call(this, node, { name: name(), params: params(), body: body() });
      }
    }, {
      key: "reduceFunctionExpression",
      value: function reduceFunctionExpression(node, _ref41) {
        var name = _ref41.name,
            params = _ref41.params,
            body = _ref41.body;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceFunctionExpression", this).call(this, node, { name: name == null ? null : name(), params: params(), body: body() });
      }
    }, {
      key: "reduceGetter",
      value: function reduceGetter(node, _ref42) {
        var name = _ref42.name,
            body = _ref42.body;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceGetter", this).call(this, node, { name: name(), body: body() });
      }
    }, {
      key: "reduceIdentifierExpression",
      value: function reduceIdentifierExpression(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceIdentifierExpression", this).call(this, node);
      }
    }, {
      key: "reduceIfStatement",
      value: function reduceIfStatement(node, _ref43) {
        var test = _ref43.test,
            consequent = _ref43.consequent,
            alternate = _ref43.alternate;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceIfStatement", this).call(this, node, { test: test(), consequent: consequent(), alternate: alternate == null ? null : alternate() });
      }
    }, {
      key: "reduceImport",
      value: function reduceImport(node, _ref44) {
        var defaultBinding = _ref44.defaultBinding,
            namedImports = _ref44.namedImports;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceImport", this).call(this, node, { defaultBinding: defaultBinding == null ? null : defaultBinding(), namedImports: namedImports.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceImportNamespace",
      value: function reduceImportNamespace(node, _ref45) {
        var defaultBinding = _ref45.defaultBinding,
            namespaceBinding = _ref45.namespaceBinding;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceImportNamespace", this).call(this, node, { defaultBinding: defaultBinding == null ? null : defaultBinding(), namespaceBinding: namespaceBinding() });
      }
    }, {
      key: "reduceImportSpecifier",
      value: function reduceImportSpecifier(node, _ref46) {
        var binding = _ref46.binding;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceImportSpecifier", this).call(this, node, { binding: binding() });
      }
    }, {
      key: "reduceLabeledStatement",
      value: function reduceLabeledStatement(node, _ref47) {
        var body = _ref47.body;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceLabeledStatement", this).call(this, node, { body: body() });
      }
    }, {
      key: "reduceLiteralBooleanExpression",
      value: function reduceLiteralBooleanExpression(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceLiteralBooleanExpression", this).call(this, node);
      }
    }, {
      key: "reduceLiteralInfinityExpression",
      value: function reduceLiteralInfinityExpression(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceLiteralInfinityExpression", this).call(this, node);
      }
    }, {
      key: "reduceLiteralNullExpression",
      value: function reduceLiteralNullExpression(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceLiteralNullExpression", this).call(this, node);
      }
    }, {
      key: "reduceLiteralNumericExpression",
      value: function reduceLiteralNumericExpression(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceLiteralNumericExpression", this).call(this, node);
      }
    }, {
      key: "reduceLiteralRegExpExpression",
      value: function reduceLiteralRegExpExpression(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceLiteralRegExpExpression", this).call(this, node);
      }
    }, {
      key: "reduceLiteralStringExpression",
      value: function reduceLiteralStringExpression(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceLiteralStringExpression", this).call(this, node);
      }
    }, {
      key: "reduceMethod",
      value: function reduceMethod(node, _ref48) {
        var name = _ref48.name,
            params = _ref48.params,
            body = _ref48.body;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceMethod", this).call(this, node, { name: name(), params: params(), body: body() });
      }
    }, {
      key: "reduceModule",
      value: function reduceModule(node, _ref49) {
        var directives = _ref49.directives,
            items = _ref49.items;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceModule", this).call(this, node, { directives: directives.map(function (n) {
            return n();
          }), items: items.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceNewExpression",
      value: function reduceNewExpression(node, _ref50) {
        var callee = _ref50.callee,
            _arguments = _ref50.arguments;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceNewExpression", this).call(this, node, { callee: callee(), arguments: _arguments.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceNewTargetExpression",
      value: function reduceNewTargetExpression(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceNewTargetExpression", this).call(this, node);
      }
    }, {
      key: "reduceObjectAssignmentTarget",
      value: function reduceObjectAssignmentTarget(node, _ref51) {
        var properties = _ref51.properties,
            rest = _ref51.rest;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceObjectAssignmentTarget", this).call(this, node, { properties: properties.map(function (n) {
            return n();
          }), rest: rest == null ? null : rest() });
      }
    }, {
      key: "reduceObjectBinding",
      value: function reduceObjectBinding(node, _ref52) {
        var properties = _ref52.properties,
            rest = _ref52.rest;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceObjectBinding", this).call(this, node, { properties: properties.map(function (n) {
            return n();
          }), rest: rest == null ? null : rest() });
      }
    }, {
      key: "reduceObjectExpression",
      value: function reduceObjectExpression(node, _ref53) {
        var properties = _ref53.properties;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceObjectExpression", this).call(this, node, { properties: properties.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceReturnStatement",
      value: function reduceReturnStatement(node, _ref54) {
        var expression = _ref54.expression;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceReturnStatement", this).call(this, node, { expression: expression == null ? null : expression() });
      }
    }, {
      key: "reduceScript",
      value: function reduceScript(node, _ref55) {
        var directives = _ref55.directives,
            statements = _ref55.statements;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceScript", this).call(this, node, { directives: directives.map(function (n) {
            return n();
          }), statements: statements.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceSetter",
      value: function reduceSetter(node, _ref56) {
        var name = _ref56.name,
            param = _ref56.param,
            body = _ref56.body;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceSetter", this).call(this, node, { name: name(), param: param(), body: body() });
      }
    }, {
      key: "reduceShorthandProperty",
      value: function reduceShorthandProperty(node, _ref57) {
        var name = _ref57.name;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceShorthandProperty", this).call(this, node, { name: name() });
      }
    }, {
      key: "reduceSpreadElement",
      value: function reduceSpreadElement(node, _ref58) {
        var expression = _ref58.expression;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceSpreadElement", this).call(this, node, { expression: expression() });
      }
    }, {
      key: "reduceSpreadProperty",
      value: function reduceSpreadProperty(node, _ref59) {
        var expression = _ref59.expression;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceSpreadProperty", this).call(this, node, { expression: expression() });
      }
    }, {
      key: "reduceStaticMemberAssignmentTarget",
      value: function reduceStaticMemberAssignmentTarget(node, _ref60) {
        var object = _ref60.object;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceStaticMemberAssignmentTarget", this).call(this, node, { object: object() });
      }
    }, {
      key: "reduceStaticMemberExpression",
      value: function reduceStaticMemberExpression(node, _ref61) {
        var object = _ref61.object;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceStaticMemberExpression", this).call(this, node, { object: object() });
      }
    }, {
      key: "reduceStaticPropertyName",
      value: function reduceStaticPropertyName(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceStaticPropertyName", this).call(this, node);
      }
    }, {
      key: "reduceSuper",
      value: function reduceSuper(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceSuper", this).call(this, node);
      }
    }, {
      key: "reduceSwitchCase",
      value: function reduceSwitchCase(node, _ref62) {
        var test = _ref62.test,
            consequent = _ref62.consequent;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceSwitchCase", this).call(this, node, { test: test(), consequent: consequent.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceSwitchDefault",
      value: function reduceSwitchDefault(node, _ref63) {
        var consequent = _ref63.consequent;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceSwitchDefault", this).call(this, node, { consequent: consequent.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceSwitchStatement",
      value: function reduceSwitchStatement(node, _ref64) {
        var discriminant = _ref64.discriminant,
            cases = _ref64.cases;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceSwitchStatement", this).call(this, node, { discriminant: discriminant(), cases: cases.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceSwitchStatementWithDefault",
      value: function reduceSwitchStatementWithDefault(node, _ref65) {
        var discriminant = _ref65.discriminant,
            preDefaultCases = _ref65.preDefaultCases,
            defaultCase = _ref65.defaultCase,
            postDefaultCases = _ref65.postDefaultCases;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceSwitchStatementWithDefault", this).call(this, node, { discriminant: discriminant(), preDefaultCases: preDefaultCases.map(function (n) {
            return n();
          }), defaultCase: defaultCase(), postDefaultCases: postDefaultCases.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceTemplateElement",
      value: function reduceTemplateElement(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceTemplateElement", this).call(this, node);
      }
    }, {
      key: "reduceTemplateExpression",
      value: function reduceTemplateExpression(node, _ref66) {
        var tag = _ref66.tag,
            elements = _ref66.elements;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceTemplateExpression", this).call(this, node, { tag: tag == null ? null : tag(), elements: elements.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceThisExpression",
      value: function reduceThisExpression(node) {
        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceThisExpression", this).call(this, node);
      }
    }, {
      key: "reduceThrowStatement",
      value: function reduceThrowStatement(node, _ref67) {
        var expression = _ref67.expression;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceThrowStatement", this).call(this, node, { expression: expression() });
      }
    }, {
      key: "reduceTryCatchStatement",
      value: function reduceTryCatchStatement(node, _ref68) {
        var body = _ref68.body,
            catchClause = _ref68.catchClause;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceTryCatchStatement", this).call(this, node, { body: body(), catchClause: catchClause() });
      }
    }, {
      key: "reduceTryFinallyStatement",
      value: function reduceTryFinallyStatement(node, _ref69) {
        var body = _ref69.body,
            catchClause = _ref69.catchClause,
            finalizer = _ref69.finalizer;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceTryFinallyStatement", this).call(this, node, { body: body(), catchClause: catchClause == null ? null : catchClause(), finalizer: finalizer() });
      }
    }, {
      key: "reduceUnaryExpression",
      value: function reduceUnaryExpression(node, _ref70) {
        var operand = _ref70.operand;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceUnaryExpression", this).call(this, node, { operand: operand() });
      }
    }, {
      key: "reduceUpdateExpression",
      value: function reduceUpdateExpression(node, _ref71) {
        var operand = _ref71.operand;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceUpdateExpression", this).call(this, node, { operand: operand() });
      }
    }, {
      key: "reduceVariableDeclaration",
      value: function reduceVariableDeclaration(node, _ref72) {
        var declarators = _ref72.declarators;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceVariableDeclaration", this).call(this, node, { declarators: declarators.map(function (n) {
            return n();
          }) });
      }
    }, {
      key: "reduceVariableDeclarationStatement",
      value: function reduceVariableDeclarationStatement(node, _ref73) {
        var declaration = _ref73.declaration;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceVariableDeclarationStatement", this).call(this, node, { declaration: declaration() });
      }
    }, {
      key: "reduceVariableDeclarator",
      value: function reduceVariableDeclarator(node, _ref74) {
        var binding = _ref74.binding,
            init = _ref74.init;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceVariableDeclarator", this).call(this, node, { binding: binding(), init: init == null ? null : init() });
      }
    }, {
      key: "reduceWhileStatement",
      value: function reduceWhileStatement(node, _ref75) {
        var test = _ref75.test,
            body = _ref75.body;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceWhileStatement", this).call(this, node, { test: test(), body: body() });
      }
    }, {
      key: "reduceWithStatement",
      value: function reduceWithStatement(node, _ref76) {
        var object = _ref76.object,
            body = _ref76.body;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceWithStatement", this).call(this, node, { object: object(), body: body() });
      }
    }, {
      key: "reduceYieldExpression",
      value: function reduceYieldExpression(node, _ref77) {
        var expression = _ref77.expression;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceYieldExpression", this).call(this, node, { expression: expression == null ? null : expression() });
      }
    }, {
      key: "reduceYieldGeneratorExpression",
      value: function reduceYieldGeneratorExpression(node, _ref78) {
        var expression = _ref78.expression;

        return _get$3(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), "reduceYieldGeneratorExpression", this).call(this, node, { expression: expression() });
      }
    }]);

    return _class;
  }(reducerClass);
}

var memoize$1 = {};

var dist$4 = {};

Object.defineProperty(dist$4, "__esModule", {
  value: true
});

function _classCallCheck$d(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by src/generate.js.

/**
 * Copyright 2016 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

dist$4.ArrayAssignmentTarget = function ArrayAssignmentTarget(_ref) {
  var elements = _ref.elements,
      rest = _ref.rest;

  _classCallCheck$d(this, ArrayAssignmentTarget);

  this.type = 'ArrayAssignmentTarget';
  this.elements = elements;
  this.rest = rest;
};

dist$4.ArrayBinding = function ArrayBinding(_ref2) {
  var elements = _ref2.elements,
      rest = _ref2.rest;

  _classCallCheck$d(this, ArrayBinding);

  this.type = 'ArrayBinding';
  this.elements = elements;
  this.rest = rest;
};

dist$4.ArrayExpression = function ArrayExpression(_ref3) {
  var elements = _ref3.elements;

  _classCallCheck$d(this, ArrayExpression);

  this.type = 'ArrayExpression';
  this.elements = elements;
};

dist$4.ArrowExpression = function ArrowExpression(_ref4) {
  var isAsync = _ref4.isAsync,
      params = _ref4.params,
      body = _ref4.body;

  _classCallCheck$d(this, ArrowExpression);

  this.type = 'ArrowExpression';
  this.isAsync = isAsync;
  this.params = params;
  this.body = body;
};

dist$4.AssignmentExpression = function AssignmentExpression(_ref5) {
  var binding = _ref5.binding,
      expression = _ref5.expression;

  _classCallCheck$d(this, AssignmentExpression);

  this.type = 'AssignmentExpression';
  this.binding = binding;
  this.expression = expression;
};

dist$4.AssignmentTargetIdentifier = function AssignmentTargetIdentifier(_ref6) {
  var name = _ref6.name;

  _classCallCheck$d(this, AssignmentTargetIdentifier);

  this.type = 'AssignmentTargetIdentifier';
  this.name = name;
};

dist$4.AssignmentTargetPropertyIdentifier = function AssignmentTargetPropertyIdentifier(_ref7) {
  var binding = _ref7.binding,
      init = _ref7.init;

  _classCallCheck$d(this, AssignmentTargetPropertyIdentifier);

  this.type = 'AssignmentTargetPropertyIdentifier';
  this.binding = binding;
  this.init = init;
};

dist$4.AssignmentTargetPropertyProperty = function AssignmentTargetPropertyProperty(_ref8) {
  var name = _ref8.name,
      binding = _ref8.binding;

  _classCallCheck$d(this, AssignmentTargetPropertyProperty);

  this.type = 'AssignmentTargetPropertyProperty';
  this.name = name;
  this.binding = binding;
};

dist$4.AssignmentTargetWithDefault = function AssignmentTargetWithDefault(_ref9) {
  var binding = _ref9.binding,
      init = _ref9.init;

  _classCallCheck$d(this, AssignmentTargetWithDefault);

  this.type = 'AssignmentTargetWithDefault';
  this.binding = binding;
  this.init = init;
};

dist$4.AwaitExpression = function AwaitExpression(_ref10) {
  var expression = _ref10.expression;

  _classCallCheck$d(this, AwaitExpression);

  this.type = 'AwaitExpression';
  this.expression = expression;
};

dist$4.BinaryExpression = function BinaryExpression(_ref11) {
  var left = _ref11.left,
      operator = _ref11.operator,
      right = _ref11.right;

  _classCallCheck$d(this, BinaryExpression);

  this.type = 'BinaryExpression';
  this.left = left;
  this.operator = operator;
  this.right = right;
};

dist$4.BindingIdentifier = function BindingIdentifier(_ref12) {
  var name = _ref12.name;

  _classCallCheck$d(this, BindingIdentifier);

  this.type = 'BindingIdentifier';
  this.name = name;
};

dist$4.BindingPropertyIdentifier = function BindingPropertyIdentifier(_ref13) {
  var binding = _ref13.binding,
      init = _ref13.init;

  _classCallCheck$d(this, BindingPropertyIdentifier);

  this.type = 'BindingPropertyIdentifier';
  this.binding = binding;
  this.init = init;
};

dist$4.BindingPropertyProperty = function BindingPropertyProperty(_ref14) {
  var name = _ref14.name,
      binding = _ref14.binding;

  _classCallCheck$d(this, BindingPropertyProperty);

  this.type = 'BindingPropertyProperty';
  this.name = name;
  this.binding = binding;
};

dist$4.BindingWithDefault = function BindingWithDefault(_ref15) {
  var binding = _ref15.binding,
      init = _ref15.init;

  _classCallCheck$d(this, BindingWithDefault);

  this.type = 'BindingWithDefault';
  this.binding = binding;
  this.init = init;
};

dist$4.Block = function Block(_ref16) {
  var statements = _ref16.statements;

  _classCallCheck$d(this, Block);

  this.type = 'Block';
  this.statements = statements;
};

dist$4.BlockStatement = function BlockStatement(_ref17) {
  var block = _ref17.block;

  _classCallCheck$d(this, BlockStatement);

  this.type = 'BlockStatement';
  this.block = block;
};

dist$4.BreakStatement = function BreakStatement(_ref18) {
  var label = _ref18.label;

  _classCallCheck$d(this, BreakStatement);

  this.type = 'BreakStatement';
  this.label = label;
};

dist$4.CallExpression = function CallExpression(_ref19) {
  var callee = _ref19.callee,
      _arguments = _ref19.arguments;

  _classCallCheck$d(this, CallExpression);

  this.type = 'CallExpression';
  this.callee = callee;
  this.arguments = _arguments;
};

dist$4.CatchClause = function CatchClause(_ref20) {
  var binding = _ref20.binding,
      body = _ref20.body;

  _classCallCheck$d(this, CatchClause);

  this.type = 'CatchClause';
  this.binding = binding;
  this.body = body;
};

dist$4.ClassDeclaration = function ClassDeclaration(_ref21) {
  var name = _ref21.name,
      _super = _ref21.super,
      elements = _ref21.elements;

  _classCallCheck$d(this, ClassDeclaration);

  this.type = 'ClassDeclaration';
  this.name = name;
  this.super = _super;
  this.elements = elements;
};

dist$4.ClassElement = function ClassElement(_ref22) {
  var isStatic = _ref22.isStatic,
      method = _ref22.method;

  _classCallCheck$d(this, ClassElement);

  this.type = 'ClassElement';
  this.isStatic = isStatic;
  this.method = method;
};

dist$4.ClassExpression = function ClassExpression(_ref23) {
  var name = _ref23.name,
      _super = _ref23.super,
      elements = _ref23.elements;

  _classCallCheck$d(this, ClassExpression);

  this.type = 'ClassExpression';
  this.name = name;
  this.super = _super;
  this.elements = elements;
};

dist$4.CompoundAssignmentExpression = function CompoundAssignmentExpression(_ref24) {
  var binding = _ref24.binding,
      operator = _ref24.operator,
      expression = _ref24.expression;

  _classCallCheck$d(this, CompoundAssignmentExpression);

  this.type = 'CompoundAssignmentExpression';
  this.binding = binding;
  this.operator = operator;
  this.expression = expression;
};

dist$4.ComputedMemberAssignmentTarget = function ComputedMemberAssignmentTarget(_ref25) {
  var object = _ref25.object,
      expression = _ref25.expression;

  _classCallCheck$d(this, ComputedMemberAssignmentTarget);

  this.type = 'ComputedMemberAssignmentTarget';
  this.object = object;
  this.expression = expression;
};

dist$4.ComputedMemberExpression = function ComputedMemberExpression(_ref26) {
  var object = _ref26.object,
      expression = _ref26.expression;

  _classCallCheck$d(this, ComputedMemberExpression);

  this.type = 'ComputedMemberExpression';
  this.object = object;
  this.expression = expression;
};

dist$4.ComputedPropertyName = function ComputedPropertyName(_ref27) {
  var expression = _ref27.expression;

  _classCallCheck$d(this, ComputedPropertyName);

  this.type = 'ComputedPropertyName';
  this.expression = expression;
};

dist$4.ConditionalExpression = function ConditionalExpression(_ref28) {
  var test = _ref28.test,
      consequent = _ref28.consequent,
      alternate = _ref28.alternate;

  _classCallCheck$d(this, ConditionalExpression);

  this.type = 'ConditionalExpression';
  this.test = test;
  this.consequent = consequent;
  this.alternate = alternate;
};

dist$4.ContinueStatement = function ContinueStatement(_ref29) {
  var label = _ref29.label;

  _classCallCheck$d(this, ContinueStatement);

  this.type = 'ContinueStatement';
  this.label = label;
};

dist$4.DataProperty = function DataProperty(_ref30) {
  var name = _ref30.name,
      expression = _ref30.expression;

  _classCallCheck$d(this, DataProperty);

  this.type = 'DataProperty';
  this.name = name;
  this.expression = expression;
};

dist$4.DebuggerStatement = function DebuggerStatement() {
  _classCallCheck$d(this, DebuggerStatement);

  this.type = 'DebuggerStatement';
};

dist$4.Directive = function Directive(_ref31) {
  var rawValue = _ref31.rawValue;

  _classCallCheck$d(this, Directive);

  this.type = 'Directive';
  this.rawValue = rawValue;
};

dist$4.DoWhileStatement = function DoWhileStatement(_ref32) {
  var body = _ref32.body,
      test = _ref32.test;

  _classCallCheck$d(this, DoWhileStatement);

  this.type = 'DoWhileStatement';
  this.body = body;
  this.test = test;
};

dist$4.EmptyStatement = function EmptyStatement() {
  _classCallCheck$d(this, EmptyStatement);

  this.type = 'EmptyStatement';
};

dist$4.Export = function Export(_ref33) {
  var declaration = _ref33.declaration;

  _classCallCheck$d(this, Export);

  this.type = 'Export';
  this.declaration = declaration;
};

dist$4.ExportAllFrom = function ExportAllFrom(_ref34) {
  var moduleSpecifier = _ref34.moduleSpecifier;

  _classCallCheck$d(this, ExportAllFrom);

  this.type = 'ExportAllFrom';
  this.moduleSpecifier = moduleSpecifier;
};

dist$4.ExportDefault = function ExportDefault(_ref35) {
  var body = _ref35.body;

  _classCallCheck$d(this, ExportDefault);

  this.type = 'ExportDefault';
  this.body = body;
};

dist$4.ExportFrom = function ExportFrom(_ref36) {
  var namedExports = _ref36.namedExports,
      moduleSpecifier = _ref36.moduleSpecifier;

  _classCallCheck$d(this, ExportFrom);

  this.type = 'ExportFrom';
  this.namedExports = namedExports;
  this.moduleSpecifier = moduleSpecifier;
};

dist$4.ExportFromSpecifier = function ExportFromSpecifier(_ref37) {
  var name = _ref37.name,
      exportedName = _ref37.exportedName;

  _classCallCheck$d(this, ExportFromSpecifier);

  this.type = 'ExportFromSpecifier';
  this.name = name;
  this.exportedName = exportedName;
};

dist$4.ExportLocalSpecifier = function ExportLocalSpecifier(_ref38) {
  var name = _ref38.name,
      exportedName = _ref38.exportedName;

  _classCallCheck$d(this, ExportLocalSpecifier);

  this.type = 'ExportLocalSpecifier';
  this.name = name;
  this.exportedName = exportedName;
};

dist$4.ExportLocals = function ExportLocals(_ref39) {
  var namedExports = _ref39.namedExports;

  _classCallCheck$d(this, ExportLocals);

  this.type = 'ExportLocals';
  this.namedExports = namedExports;
};

dist$4.ExpressionStatement = function ExpressionStatement(_ref40) {
  var expression = _ref40.expression;

  _classCallCheck$d(this, ExpressionStatement);

  this.type = 'ExpressionStatement';
  this.expression = expression;
};

dist$4.ForAwaitStatement = function ForAwaitStatement(_ref41) {
  var left = _ref41.left,
      right = _ref41.right,
      body = _ref41.body;

  _classCallCheck$d(this, ForAwaitStatement);

  this.type = 'ForAwaitStatement';
  this.left = left;
  this.right = right;
  this.body = body;
};

dist$4.ForInStatement = function ForInStatement(_ref42) {
  var left = _ref42.left,
      right = _ref42.right,
      body = _ref42.body;

  _classCallCheck$d(this, ForInStatement);

  this.type = 'ForInStatement';
  this.left = left;
  this.right = right;
  this.body = body;
};

dist$4.ForOfStatement = function ForOfStatement(_ref43) {
  var left = _ref43.left,
      right = _ref43.right,
      body = _ref43.body;

  _classCallCheck$d(this, ForOfStatement);

  this.type = 'ForOfStatement';
  this.left = left;
  this.right = right;
  this.body = body;
};

dist$4.ForStatement = function ForStatement(_ref44) {
  var init = _ref44.init,
      test = _ref44.test,
      update = _ref44.update,
      body = _ref44.body;

  _classCallCheck$d(this, ForStatement);

  this.type = 'ForStatement';
  this.init = init;
  this.test = test;
  this.update = update;
  this.body = body;
};

dist$4.FormalParameters = function FormalParameters(_ref45) {
  var items = _ref45.items,
      rest = _ref45.rest;

  _classCallCheck$d(this, FormalParameters);

  this.type = 'FormalParameters';
  this.items = items;
  this.rest = rest;
};

dist$4.FunctionBody = function FunctionBody(_ref46) {
  var directives = _ref46.directives,
      statements = _ref46.statements;

  _classCallCheck$d(this, FunctionBody);

  this.type = 'FunctionBody';
  this.directives = directives;
  this.statements = statements;
};

dist$4.FunctionDeclaration = function FunctionDeclaration(_ref47) {
  var isAsync = _ref47.isAsync,
      isGenerator = _ref47.isGenerator,
      name = _ref47.name,
      params = _ref47.params,
      body = _ref47.body;

  _classCallCheck$d(this, FunctionDeclaration);

  this.type = 'FunctionDeclaration';
  this.isAsync = isAsync;
  this.isGenerator = isGenerator;
  this.name = name;
  this.params = params;
  this.body = body;
};

dist$4.FunctionExpression = function FunctionExpression(_ref48) {
  var isAsync = _ref48.isAsync,
      isGenerator = _ref48.isGenerator,
      name = _ref48.name,
      params = _ref48.params,
      body = _ref48.body;

  _classCallCheck$d(this, FunctionExpression);

  this.type = 'FunctionExpression';
  this.isAsync = isAsync;
  this.isGenerator = isGenerator;
  this.name = name;
  this.params = params;
  this.body = body;
};

dist$4.Getter = function Getter(_ref49) {
  var name = _ref49.name,
      body = _ref49.body;

  _classCallCheck$d(this, Getter);

  this.type = 'Getter';
  this.name = name;
  this.body = body;
};

dist$4.IdentifierExpression = function IdentifierExpression(_ref50) {
  var name = _ref50.name;

  _classCallCheck$d(this, IdentifierExpression);

  this.type = 'IdentifierExpression';
  this.name = name;
};

dist$4.IfStatement = function IfStatement(_ref51) {
  var test = _ref51.test,
      consequent = _ref51.consequent,
      alternate = _ref51.alternate;

  _classCallCheck$d(this, IfStatement);

  this.type = 'IfStatement';
  this.test = test;
  this.consequent = consequent;
  this.alternate = alternate;
};

dist$4.Import = function Import(_ref52) {
  var defaultBinding = _ref52.defaultBinding,
      namedImports = _ref52.namedImports,
      moduleSpecifier = _ref52.moduleSpecifier;

  _classCallCheck$d(this, Import);

  this.type = 'Import';
  this.defaultBinding = defaultBinding;
  this.namedImports = namedImports;
  this.moduleSpecifier = moduleSpecifier;
};

dist$4.ImportNamespace = function ImportNamespace(_ref53) {
  var defaultBinding = _ref53.defaultBinding,
      namespaceBinding = _ref53.namespaceBinding,
      moduleSpecifier = _ref53.moduleSpecifier;

  _classCallCheck$d(this, ImportNamespace);

  this.type = 'ImportNamespace';
  this.defaultBinding = defaultBinding;
  this.namespaceBinding = namespaceBinding;
  this.moduleSpecifier = moduleSpecifier;
};

dist$4.ImportSpecifier = function ImportSpecifier(_ref54) {
  var name = _ref54.name,
      binding = _ref54.binding;

  _classCallCheck$d(this, ImportSpecifier);

  this.type = 'ImportSpecifier';
  this.name = name;
  this.binding = binding;
};

dist$4.LabeledStatement = function LabeledStatement(_ref55) {
  var label = _ref55.label,
      body = _ref55.body;

  _classCallCheck$d(this, LabeledStatement);

  this.type = 'LabeledStatement';
  this.label = label;
  this.body = body;
};

dist$4.LiteralBooleanExpression = function LiteralBooleanExpression(_ref56) {
  var value = _ref56.value;

  _classCallCheck$d(this, LiteralBooleanExpression);

  this.type = 'LiteralBooleanExpression';
  this.value = value;
};

dist$4.LiteralInfinityExpression = function LiteralInfinityExpression() {
  _classCallCheck$d(this, LiteralInfinityExpression);

  this.type = 'LiteralInfinityExpression';
};

dist$4.LiteralNullExpression = function LiteralNullExpression() {
  _classCallCheck$d(this, LiteralNullExpression);

  this.type = 'LiteralNullExpression';
};

dist$4.LiteralNumericExpression = function LiteralNumericExpression(_ref57) {
  var value = _ref57.value;

  _classCallCheck$d(this, LiteralNumericExpression);

  this.type = 'LiteralNumericExpression';
  this.value = value;
};

dist$4.LiteralRegExpExpression = function LiteralRegExpExpression(_ref58) {
  var pattern = _ref58.pattern,
      global = _ref58.global,
      ignoreCase = _ref58.ignoreCase,
      multiLine = _ref58.multiLine,
      dotAll = _ref58.dotAll,
      unicode = _ref58.unicode,
      sticky = _ref58.sticky;

  _classCallCheck$d(this, LiteralRegExpExpression);

  this.type = 'LiteralRegExpExpression';
  this.pattern = pattern;
  this.global = global;
  this.ignoreCase = ignoreCase;
  this.multiLine = multiLine;
  this.dotAll = dotAll;
  this.unicode = unicode;
  this.sticky = sticky;
};

dist$4.LiteralStringExpression = function LiteralStringExpression(_ref59) {
  var value = _ref59.value;

  _classCallCheck$d(this, LiteralStringExpression);

  this.type = 'LiteralStringExpression';
  this.value = value;
};

dist$4.Method = function Method(_ref60) {
  var isAsync = _ref60.isAsync,
      isGenerator = _ref60.isGenerator,
      name = _ref60.name,
      params = _ref60.params,
      body = _ref60.body;

  _classCallCheck$d(this, Method);

  this.type = 'Method';
  this.isAsync = isAsync;
  this.isGenerator = isGenerator;
  this.name = name;
  this.params = params;
  this.body = body;
};

dist$4.Module = function Module(_ref61) {
  var directives = _ref61.directives,
      items = _ref61.items;

  _classCallCheck$d(this, Module);

  this.type = 'Module';
  this.directives = directives;
  this.items = items;
};

dist$4.NewExpression = function NewExpression(_ref62) {
  var callee = _ref62.callee,
      _arguments = _ref62.arguments;

  _classCallCheck$d(this, NewExpression);

  this.type = 'NewExpression';
  this.callee = callee;
  this.arguments = _arguments;
};

dist$4.NewTargetExpression = function NewTargetExpression() {
  _classCallCheck$d(this, NewTargetExpression);

  this.type = 'NewTargetExpression';
};

dist$4.ObjectAssignmentTarget = function ObjectAssignmentTarget(_ref63) {
  var properties = _ref63.properties,
      rest = _ref63.rest;

  _classCallCheck$d(this, ObjectAssignmentTarget);

  this.type = 'ObjectAssignmentTarget';
  this.properties = properties;
  this.rest = rest;
};

dist$4.ObjectBinding = function ObjectBinding(_ref64) {
  var properties = _ref64.properties,
      rest = _ref64.rest;

  _classCallCheck$d(this, ObjectBinding);

  this.type = 'ObjectBinding';
  this.properties = properties;
  this.rest = rest;
};

dist$4.ObjectExpression = function ObjectExpression(_ref65) {
  var properties = _ref65.properties;

  _classCallCheck$d(this, ObjectExpression);

  this.type = 'ObjectExpression';
  this.properties = properties;
};

dist$4.ReturnStatement = function ReturnStatement(_ref66) {
  var expression = _ref66.expression;

  _classCallCheck$d(this, ReturnStatement);

  this.type = 'ReturnStatement';
  this.expression = expression;
};

dist$4.Script = function Script(_ref67) {
  var directives = _ref67.directives,
      statements = _ref67.statements;

  _classCallCheck$d(this, Script);

  this.type = 'Script';
  this.directives = directives;
  this.statements = statements;
};

dist$4.Setter = function Setter(_ref68) {
  var name = _ref68.name,
      param = _ref68.param,
      body = _ref68.body;

  _classCallCheck$d(this, Setter);

  this.type = 'Setter';
  this.name = name;
  this.param = param;
  this.body = body;
};

dist$4.ShorthandProperty = function ShorthandProperty(_ref69) {
  var name = _ref69.name;

  _classCallCheck$d(this, ShorthandProperty);

  this.type = 'ShorthandProperty';
  this.name = name;
};

dist$4.SpreadElement = function SpreadElement(_ref70) {
  var expression = _ref70.expression;

  _classCallCheck$d(this, SpreadElement);

  this.type = 'SpreadElement';
  this.expression = expression;
};

dist$4.SpreadProperty = function SpreadProperty(_ref71) {
  var expression = _ref71.expression;

  _classCallCheck$d(this, SpreadProperty);

  this.type = 'SpreadProperty';
  this.expression = expression;
};

dist$4.StaticMemberAssignmentTarget = function StaticMemberAssignmentTarget(_ref72) {
  var object = _ref72.object,
      property = _ref72.property;

  _classCallCheck$d(this, StaticMemberAssignmentTarget);

  this.type = 'StaticMemberAssignmentTarget';
  this.object = object;
  this.property = property;
};

dist$4.StaticMemberExpression = function StaticMemberExpression(_ref73) {
  var object = _ref73.object,
      property = _ref73.property;

  _classCallCheck$d(this, StaticMemberExpression);

  this.type = 'StaticMemberExpression';
  this.object = object;
  this.property = property;
};

dist$4.StaticPropertyName = function StaticPropertyName(_ref74) {
  var value = _ref74.value;

  _classCallCheck$d(this, StaticPropertyName);

  this.type = 'StaticPropertyName';
  this.value = value;
};

dist$4.Super = function Super() {
  _classCallCheck$d(this, Super);

  this.type = 'Super';
};

dist$4.SwitchCase = function SwitchCase(_ref75) {
  var test = _ref75.test,
      consequent = _ref75.consequent;

  _classCallCheck$d(this, SwitchCase);

  this.type = 'SwitchCase';
  this.test = test;
  this.consequent = consequent;
};

dist$4.SwitchDefault = function SwitchDefault(_ref76) {
  var consequent = _ref76.consequent;

  _classCallCheck$d(this, SwitchDefault);

  this.type = 'SwitchDefault';
  this.consequent = consequent;
};

dist$4.SwitchStatement = function SwitchStatement(_ref77) {
  var discriminant = _ref77.discriminant,
      cases = _ref77.cases;

  _classCallCheck$d(this, SwitchStatement);

  this.type = 'SwitchStatement';
  this.discriminant = discriminant;
  this.cases = cases;
};

dist$4.SwitchStatementWithDefault = function SwitchStatementWithDefault(_ref78) {
  var discriminant = _ref78.discriminant,
      preDefaultCases = _ref78.preDefaultCases,
      defaultCase = _ref78.defaultCase,
      postDefaultCases = _ref78.postDefaultCases;

  _classCallCheck$d(this, SwitchStatementWithDefault);

  this.type = 'SwitchStatementWithDefault';
  this.discriminant = discriminant;
  this.preDefaultCases = preDefaultCases;
  this.defaultCase = defaultCase;
  this.postDefaultCases = postDefaultCases;
};

dist$4.TemplateElement = function TemplateElement(_ref79) {
  var rawValue = _ref79.rawValue;

  _classCallCheck$d(this, TemplateElement);

  this.type = 'TemplateElement';
  this.rawValue = rawValue;
};

dist$4.TemplateExpression = function TemplateExpression(_ref80) {
  var tag = _ref80.tag,
      elements = _ref80.elements;

  _classCallCheck$d(this, TemplateExpression);

  this.type = 'TemplateExpression';
  this.tag = tag;
  this.elements = elements;
};

dist$4.ThisExpression = function ThisExpression() {
  _classCallCheck$d(this, ThisExpression);

  this.type = 'ThisExpression';
};

dist$4.ThrowStatement = function ThrowStatement(_ref81) {
  var expression = _ref81.expression;

  _classCallCheck$d(this, ThrowStatement);

  this.type = 'ThrowStatement';
  this.expression = expression;
};

dist$4.TryCatchStatement = function TryCatchStatement(_ref82) {
  var body = _ref82.body,
      catchClause = _ref82.catchClause;

  _classCallCheck$d(this, TryCatchStatement);

  this.type = 'TryCatchStatement';
  this.body = body;
  this.catchClause = catchClause;
};

dist$4.TryFinallyStatement = function TryFinallyStatement(_ref83) {
  var body = _ref83.body,
      catchClause = _ref83.catchClause,
      finalizer = _ref83.finalizer;

  _classCallCheck$d(this, TryFinallyStatement);

  this.type = 'TryFinallyStatement';
  this.body = body;
  this.catchClause = catchClause;
  this.finalizer = finalizer;
};

dist$4.UnaryExpression = function UnaryExpression(_ref84) {
  var operator = _ref84.operator,
      operand = _ref84.operand;

  _classCallCheck$d(this, UnaryExpression);

  this.type = 'UnaryExpression';
  this.operator = operator;
  this.operand = operand;
};

dist$4.UpdateExpression = function UpdateExpression(_ref85) {
  var isPrefix = _ref85.isPrefix,
      operator = _ref85.operator,
      operand = _ref85.operand;

  _classCallCheck$d(this, UpdateExpression);

  this.type = 'UpdateExpression';
  this.isPrefix = isPrefix;
  this.operator = operator;
  this.operand = operand;
};

dist$4.VariableDeclaration = function VariableDeclaration(_ref86) {
  var kind = _ref86.kind,
      declarators = _ref86.declarators;

  _classCallCheck$d(this, VariableDeclaration);

  this.type = 'VariableDeclaration';
  this.kind = kind;
  this.declarators = declarators;
};

dist$4.VariableDeclarationStatement = function VariableDeclarationStatement(_ref87) {
  var declaration = _ref87.declaration;

  _classCallCheck$d(this, VariableDeclarationStatement);

  this.type = 'VariableDeclarationStatement';
  this.declaration = declaration;
};

dist$4.VariableDeclarator = function VariableDeclarator(_ref88) {
  var binding = _ref88.binding,
      init = _ref88.init;

  _classCallCheck$d(this, VariableDeclarator);

  this.type = 'VariableDeclarator';
  this.binding = binding;
  this.init = init;
};

dist$4.WhileStatement = function WhileStatement(_ref89) {
  var test = _ref89.test,
      body = _ref89.body;

  _classCallCheck$d(this, WhileStatement);

  this.type = 'WhileStatement';
  this.test = test;
  this.body = body;
};

dist$4.WithStatement = function WithStatement(_ref90) {
  var object = _ref90.object,
      body = _ref90.body;

  _classCallCheck$d(this, WithStatement);

  this.type = 'WithStatement';
  this.object = object;
  this.body = body;
};

dist$4.YieldExpression = function YieldExpression(_ref91) {
  var expression = _ref91.expression;

  _classCallCheck$d(this, YieldExpression);

  this.type = 'YieldExpression';
  this.expression = expression;
};

dist$4.YieldGeneratorExpression = function YieldGeneratorExpression(_ref92) {
  var expression = _ref92.expression;

  _classCallCheck$d(this, YieldGeneratorExpression);

  this.type = 'YieldGeneratorExpression';
  this.expression = expression;
};

Object.defineProperty(memoize$1, "__esModule", {
  value: true
});
memoize$1.default = memoize;

var _shiftAst$5 = dist$4;

_interopRequireWildcard$3(_shiftAst$5);

function _interopRequireWildcard$3(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function memoize(reducer) {
  var cache = new WeakMap();
  return {
    reduceArrayAssignmentTarget: function reduceArrayAssignmentTarget(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceArrayAssignmentTarget(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceArrayBinding: function reduceArrayBinding(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceArrayBinding(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceArrayExpression: function reduceArrayExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceArrayExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceArrowExpression: function reduceArrowExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceArrowExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceAssignmentExpression: function reduceAssignmentExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceAssignmentExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceAssignmentTargetIdentifier: function reduceAssignmentTargetIdentifier(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceAssignmentTargetIdentifier(node);
      cache.set(node, res);
      return res;
    },
    reduceAssignmentTargetPropertyIdentifier: function reduceAssignmentTargetPropertyIdentifier(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceAssignmentTargetPropertyIdentifier(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceAssignmentTargetPropertyProperty: function reduceAssignmentTargetPropertyProperty(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceAssignmentTargetPropertyProperty(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceAssignmentTargetWithDefault: function reduceAssignmentTargetWithDefault(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceAssignmentTargetWithDefault(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceAwaitExpression: function reduceAwaitExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceAwaitExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceBinaryExpression: function reduceBinaryExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceBinaryExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceBindingIdentifier: function reduceBindingIdentifier(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceBindingIdentifier(node);
      cache.set(node, res);
      return res;
    },
    reduceBindingPropertyIdentifier: function reduceBindingPropertyIdentifier(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceBindingPropertyIdentifier(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceBindingPropertyProperty: function reduceBindingPropertyProperty(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceBindingPropertyProperty(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceBindingWithDefault: function reduceBindingWithDefault(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceBindingWithDefault(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceBlock: function reduceBlock(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceBlock(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceBlockStatement: function reduceBlockStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceBlockStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceBreakStatement: function reduceBreakStatement(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceBreakStatement(node);
      cache.set(node, res);
      return res;
    },
    reduceCallExpression: function reduceCallExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceCallExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceCatchClause: function reduceCatchClause(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceCatchClause(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceClassDeclaration: function reduceClassDeclaration(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceClassDeclaration(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceClassElement: function reduceClassElement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceClassElement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceClassExpression: function reduceClassExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceClassExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceCompoundAssignmentExpression: function reduceCompoundAssignmentExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceCompoundAssignmentExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceComputedMemberAssignmentTarget: function reduceComputedMemberAssignmentTarget(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceComputedMemberAssignmentTarget(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceComputedMemberExpression: function reduceComputedMemberExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceComputedMemberExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceComputedPropertyName: function reduceComputedPropertyName(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceComputedPropertyName(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceConditionalExpression: function reduceConditionalExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceConditionalExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceContinueStatement: function reduceContinueStatement(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceContinueStatement(node);
      cache.set(node, res);
      return res;
    },
    reduceDataProperty: function reduceDataProperty(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceDataProperty(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceDebuggerStatement: function reduceDebuggerStatement(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceDebuggerStatement(node);
      cache.set(node, res);
      return res;
    },
    reduceDirective: function reduceDirective(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceDirective(node);
      cache.set(node, res);
      return res;
    },
    reduceDoWhileStatement: function reduceDoWhileStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceDoWhileStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceEmptyStatement: function reduceEmptyStatement(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceEmptyStatement(node);
      cache.set(node, res);
      return res;
    },
    reduceExport: function reduceExport(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceExport(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceExportAllFrom: function reduceExportAllFrom(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceExportAllFrom(node);
      cache.set(node, res);
      return res;
    },
    reduceExportDefault: function reduceExportDefault(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceExportDefault(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceExportFrom: function reduceExportFrom(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceExportFrom(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceExportFromSpecifier: function reduceExportFromSpecifier(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceExportFromSpecifier(node);
      cache.set(node, res);
      return res;
    },
    reduceExportLocalSpecifier: function reduceExportLocalSpecifier(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceExportLocalSpecifier(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceExportLocals: function reduceExportLocals(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceExportLocals(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceExpressionStatement: function reduceExpressionStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceExpressionStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceForAwaitStatement: function reduceForAwaitStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceForAwaitStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceForInStatement: function reduceForInStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceForInStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceForOfStatement: function reduceForOfStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceForOfStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceForStatement: function reduceForStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceForStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceFormalParameters: function reduceFormalParameters(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceFormalParameters(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceFunctionBody: function reduceFunctionBody(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceFunctionBody(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceFunctionDeclaration: function reduceFunctionDeclaration(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceFunctionDeclaration(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceFunctionExpression: function reduceFunctionExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceFunctionExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceGetter: function reduceGetter(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceGetter(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceIdentifierExpression: function reduceIdentifierExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceIdentifierExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceIfStatement: function reduceIfStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceIfStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceImport: function reduceImport(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceImport(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceImportNamespace: function reduceImportNamespace(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceImportNamespace(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceImportSpecifier: function reduceImportSpecifier(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceImportSpecifier(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceLabeledStatement: function reduceLabeledStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceLabeledStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceLiteralBooleanExpression: function reduceLiteralBooleanExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceLiteralBooleanExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceLiteralInfinityExpression: function reduceLiteralInfinityExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceLiteralInfinityExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceLiteralNullExpression: function reduceLiteralNullExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceLiteralNullExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceLiteralNumericExpression: function reduceLiteralNumericExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceLiteralNumericExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceLiteralRegExpExpression: function reduceLiteralRegExpExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceLiteralRegExpExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceLiteralStringExpression: function reduceLiteralStringExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceLiteralStringExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceMethod: function reduceMethod(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceMethod(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceModule: function reduceModule(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceModule(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceNewExpression: function reduceNewExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceNewExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceNewTargetExpression: function reduceNewTargetExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceNewTargetExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceObjectAssignmentTarget: function reduceObjectAssignmentTarget(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceObjectAssignmentTarget(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceObjectBinding: function reduceObjectBinding(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceObjectBinding(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceObjectExpression: function reduceObjectExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceObjectExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceReturnStatement: function reduceReturnStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceReturnStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceScript: function reduceScript(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceScript(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceSetter: function reduceSetter(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceSetter(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceShorthandProperty: function reduceShorthandProperty(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceShorthandProperty(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceSpreadElement: function reduceSpreadElement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceSpreadElement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceSpreadProperty: function reduceSpreadProperty(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceSpreadProperty(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceStaticMemberAssignmentTarget: function reduceStaticMemberAssignmentTarget(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceStaticMemberAssignmentTarget(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceStaticMemberExpression: function reduceStaticMemberExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceStaticMemberExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceStaticPropertyName: function reduceStaticPropertyName(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceStaticPropertyName(node);
      cache.set(node, res);
      return res;
    },
    reduceSuper: function reduceSuper(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceSuper(node);
      cache.set(node, res);
      return res;
    },
    reduceSwitchCase: function reduceSwitchCase(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceSwitchCase(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceSwitchDefault: function reduceSwitchDefault(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceSwitchDefault(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceSwitchStatement: function reduceSwitchStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceSwitchStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceSwitchStatementWithDefault: function reduceSwitchStatementWithDefault(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceSwitchStatementWithDefault(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceTemplateElement: function reduceTemplateElement(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceTemplateElement(node);
      cache.set(node, res);
      return res;
    },
    reduceTemplateExpression: function reduceTemplateExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceTemplateExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceThisExpression: function reduceThisExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceThisExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceThrowStatement: function reduceThrowStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceThrowStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceTryCatchStatement: function reduceTryCatchStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceTryCatchStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceTryFinallyStatement: function reduceTryFinallyStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceTryFinallyStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceUnaryExpression: function reduceUnaryExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceUnaryExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceUpdateExpression: function reduceUpdateExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceUpdateExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceVariableDeclaration: function reduceVariableDeclaration(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceVariableDeclaration(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceVariableDeclarationStatement: function reduceVariableDeclarationStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceVariableDeclarationStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceVariableDeclarator: function reduceVariableDeclarator(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceVariableDeclarator(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceWhileStatement: function reduceWhileStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceWhileStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceWithStatement: function reduceWithStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceWithStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceYieldExpression: function reduceYieldExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceYieldExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceYieldGeneratorExpression: function reduceYieldGeneratorExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceYieldGeneratorExpression(node, arg);
      cache.set(node, res);
      return res;
    }
  };
} // Generated by generate-memoize.js

var cloneReducer = {};

Object.defineProperty(cloneReducer, "__esModule", {
  value: true
});

var _createClass$a = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Generated by generate-clone-reducer.js
/**
 * Copyright 2018 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var _shiftAst$4 = dist$4;

var Shift$1 = _interopRequireWildcard$2(_shiftAst$4);

function _interopRequireWildcard$2(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck$c(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CloneReducer = function () {
  function CloneReducer() {
    _classCallCheck$c(this, CloneReducer);
  }

  _createClass$a(CloneReducer, [{
    key: 'reduceArrayAssignmentTarget',
    value: function reduceArrayAssignmentTarget(node, _ref) {
      var elements = _ref.elements,
          rest = _ref.rest;

      return new Shift$1.ArrayAssignmentTarget({ elements: elements, rest: rest });
    }
  }, {
    key: 'reduceArrayBinding',
    value: function reduceArrayBinding(node, _ref2) {
      var elements = _ref2.elements,
          rest = _ref2.rest;

      return new Shift$1.ArrayBinding({ elements: elements, rest: rest });
    }
  }, {
    key: 'reduceArrayExpression',
    value: function reduceArrayExpression(node, _ref3) {
      var elements = _ref3.elements;

      return new Shift$1.ArrayExpression({ elements: elements });
    }
  }, {
    key: 'reduceArrowExpression',
    value: function reduceArrowExpression(node, _ref4) {
      var params = _ref4.params,
          body = _ref4.body;

      return new Shift$1.ArrowExpression({ isAsync: node.isAsync, params: params, body: body });
    }
  }, {
    key: 'reduceAssignmentExpression',
    value: function reduceAssignmentExpression(node, _ref5) {
      var binding = _ref5.binding,
          expression = _ref5.expression;

      return new Shift$1.AssignmentExpression({ binding: binding, expression: expression });
    }
  }, {
    key: 'reduceAssignmentTargetIdentifier',
    value: function reduceAssignmentTargetIdentifier(node) {
      return new Shift$1.AssignmentTargetIdentifier({ name: node.name });
    }
  }, {
    key: 'reduceAssignmentTargetPropertyIdentifier',
    value: function reduceAssignmentTargetPropertyIdentifier(node, _ref6) {
      var binding = _ref6.binding,
          init = _ref6.init;

      return new Shift$1.AssignmentTargetPropertyIdentifier({ binding: binding, init: init });
    }
  }, {
    key: 'reduceAssignmentTargetPropertyProperty',
    value: function reduceAssignmentTargetPropertyProperty(node, _ref7) {
      var name = _ref7.name,
          binding = _ref7.binding;

      return new Shift$1.AssignmentTargetPropertyProperty({ name: name, binding: binding });
    }
  }, {
    key: 'reduceAssignmentTargetWithDefault',
    value: function reduceAssignmentTargetWithDefault(node, _ref8) {
      var binding = _ref8.binding,
          init = _ref8.init;

      return new Shift$1.AssignmentTargetWithDefault({ binding: binding, init: init });
    }
  }, {
    key: 'reduceAwaitExpression',
    value: function reduceAwaitExpression(node, _ref9) {
      var expression = _ref9.expression;

      return new Shift$1.AwaitExpression({ expression: expression });
    }
  }, {
    key: 'reduceBinaryExpression',
    value: function reduceBinaryExpression(node, _ref10) {
      var left = _ref10.left,
          right = _ref10.right;

      return new Shift$1.BinaryExpression({ left: left, operator: node.operator, right: right });
    }
  }, {
    key: 'reduceBindingIdentifier',
    value: function reduceBindingIdentifier(node) {
      return new Shift$1.BindingIdentifier({ name: node.name });
    }
  }, {
    key: 'reduceBindingPropertyIdentifier',
    value: function reduceBindingPropertyIdentifier(node, _ref11) {
      var binding = _ref11.binding,
          init = _ref11.init;

      return new Shift$1.BindingPropertyIdentifier({ binding: binding, init: init });
    }
  }, {
    key: 'reduceBindingPropertyProperty',
    value: function reduceBindingPropertyProperty(node, _ref12) {
      var name = _ref12.name,
          binding = _ref12.binding;

      return new Shift$1.BindingPropertyProperty({ name: name, binding: binding });
    }
  }, {
    key: 'reduceBindingWithDefault',
    value: function reduceBindingWithDefault(node, _ref13) {
      var binding = _ref13.binding,
          init = _ref13.init;

      return new Shift$1.BindingWithDefault({ binding: binding, init: init });
    }
  }, {
    key: 'reduceBlock',
    value: function reduceBlock(node, _ref14) {
      var statements = _ref14.statements;

      return new Shift$1.Block({ statements: statements });
    }
  }, {
    key: 'reduceBlockStatement',
    value: function reduceBlockStatement(node, _ref15) {
      var block = _ref15.block;

      return new Shift$1.BlockStatement({ block: block });
    }
  }, {
    key: 'reduceBreakStatement',
    value: function reduceBreakStatement(node) {
      return new Shift$1.BreakStatement({ label: node.label });
    }
  }, {
    key: 'reduceCallExpression',
    value: function reduceCallExpression(node, _ref16) {
      var callee = _ref16.callee,
          _arguments = _ref16.arguments;

      return new Shift$1.CallExpression({ callee: callee, arguments: _arguments });
    }
  }, {
    key: 'reduceCatchClause',
    value: function reduceCatchClause(node, _ref17) {
      var binding = _ref17.binding,
          body = _ref17.body;

      return new Shift$1.CatchClause({ binding: binding, body: body });
    }
  }, {
    key: 'reduceClassDeclaration',
    value: function reduceClassDeclaration(node, _ref18) {
      var name = _ref18.name,
          _super = _ref18.super,
          elements = _ref18.elements;

      return new Shift$1.ClassDeclaration({ name: name, super: _super, elements: elements });
    }
  }, {
    key: 'reduceClassElement',
    value: function reduceClassElement(node, _ref19) {
      var method = _ref19.method;

      return new Shift$1.ClassElement({ isStatic: node.isStatic, method: method });
    }
  }, {
    key: 'reduceClassExpression',
    value: function reduceClassExpression(node, _ref20) {
      var name = _ref20.name,
          _super = _ref20.super,
          elements = _ref20.elements;

      return new Shift$1.ClassExpression({ name: name, super: _super, elements: elements });
    }
  }, {
    key: 'reduceCompoundAssignmentExpression',
    value: function reduceCompoundAssignmentExpression(node, _ref21) {
      var binding = _ref21.binding,
          expression = _ref21.expression;

      return new Shift$1.CompoundAssignmentExpression({ binding: binding, operator: node.operator, expression: expression });
    }
  }, {
    key: 'reduceComputedMemberAssignmentTarget',
    value: function reduceComputedMemberAssignmentTarget(node, _ref22) {
      var object = _ref22.object,
          expression = _ref22.expression;

      return new Shift$1.ComputedMemberAssignmentTarget({ object: object, expression: expression });
    }
  }, {
    key: 'reduceComputedMemberExpression',
    value: function reduceComputedMemberExpression(node, _ref23) {
      var object = _ref23.object,
          expression = _ref23.expression;

      return new Shift$1.ComputedMemberExpression({ object: object, expression: expression });
    }
  }, {
    key: 'reduceComputedPropertyName',
    value: function reduceComputedPropertyName(node, _ref24) {
      var expression = _ref24.expression;

      return new Shift$1.ComputedPropertyName({ expression: expression });
    }
  }, {
    key: 'reduceConditionalExpression',
    value: function reduceConditionalExpression(node, _ref25) {
      var test = _ref25.test,
          consequent = _ref25.consequent,
          alternate = _ref25.alternate;

      return new Shift$1.ConditionalExpression({ test: test, consequent: consequent, alternate: alternate });
    }
  }, {
    key: 'reduceContinueStatement',
    value: function reduceContinueStatement(node) {
      return new Shift$1.ContinueStatement({ label: node.label });
    }
  }, {
    key: 'reduceDataProperty',
    value: function reduceDataProperty(node, _ref26) {
      var name = _ref26.name,
          expression = _ref26.expression;

      return new Shift$1.DataProperty({ name: name, expression: expression });
    }
  }, {
    key: 'reduceDebuggerStatement',
    value: function reduceDebuggerStatement(node) {
      return new Shift$1.DebuggerStatement();
    }
  }, {
    key: 'reduceDirective',
    value: function reduceDirective(node) {
      return new Shift$1.Directive({ rawValue: node.rawValue });
    }
  }, {
    key: 'reduceDoWhileStatement',
    value: function reduceDoWhileStatement(node, _ref27) {
      var body = _ref27.body,
          test = _ref27.test;

      return new Shift$1.DoWhileStatement({ body: body, test: test });
    }
  }, {
    key: 'reduceEmptyStatement',
    value: function reduceEmptyStatement(node) {
      return new Shift$1.EmptyStatement();
    }
  }, {
    key: 'reduceExport',
    value: function reduceExport(node, _ref28) {
      var declaration = _ref28.declaration;

      return new Shift$1.Export({ declaration: declaration });
    }
  }, {
    key: 'reduceExportAllFrom',
    value: function reduceExportAllFrom(node) {
      return new Shift$1.ExportAllFrom({ moduleSpecifier: node.moduleSpecifier });
    }
  }, {
    key: 'reduceExportDefault',
    value: function reduceExportDefault(node, _ref29) {
      var body = _ref29.body;

      return new Shift$1.ExportDefault({ body: body });
    }
  }, {
    key: 'reduceExportFrom',
    value: function reduceExportFrom(node, _ref30) {
      var namedExports = _ref30.namedExports;

      return new Shift$1.ExportFrom({ namedExports: namedExports, moduleSpecifier: node.moduleSpecifier });
    }
  }, {
    key: 'reduceExportFromSpecifier',
    value: function reduceExportFromSpecifier(node) {
      return new Shift$1.ExportFromSpecifier({ name: node.name, exportedName: node.exportedName });
    }
  }, {
    key: 'reduceExportLocalSpecifier',
    value: function reduceExportLocalSpecifier(node, _ref31) {
      var name = _ref31.name;

      return new Shift$1.ExportLocalSpecifier({ name: name, exportedName: node.exportedName });
    }
  }, {
    key: 'reduceExportLocals',
    value: function reduceExportLocals(node, _ref32) {
      var namedExports = _ref32.namedExports;

      return new Shift$1.ExportLocals({ namedExports: namedExports });
    }
  }, {
    key: 'reduceExpressionStatement',
    value: function reduceExpressionStatement(node, _ref33) {
      var expression = _ref33.expression;

      return new Shift$1.ExpressionStatement({ expression: expression });
    }
  }, {
    key: 'reduceForAwaitStatement',
    value: function reduceForAwaitStatement(node, _ref34) {
      var left = _ref34.left,
          right = _ref34.right,
          body = _ref34.body;

      return new Shift$1.ForAwaitStatement({ left: left, right: right, body: body });
    }
  }, {
    key: 'reduceForInStatement',
    value: function reduceForInStatement(node, _ref35) {
      var left = _ref35.left,
          right = _ref35.right,
          body = _ref35.body;

      return new Shift$1.ForInStatement({ left: left, right: right, body: body });
    }
  }, {
    key: 'reduceForOfStatement',
    value: function reduceForOfStatement(node, _ref36) {
      var left = _ref36.left,
          right = _ref36.right,
          body = _ref36.body;

      return new Shift$1.ForOfStatement({ left: left, right: right, body: body });
    }
  }, {
    key: 'reduceForStatement',
    value: function reduceForStatement(node, _ref37) {
      var init = _ref37.init,
          test = _ref37.test,
          update = _ref37.update,
          body = _ref37.body;

      return new Shift$1.ForStatement({ init: init, test: test, update: update, body: body });
    }
  }, {
    key: 'reduceFormalParameters',
    value: function reduceFormalParameters(node, _ref38) {
      var items = _ref38.items,
          rest = _ref38.rest;

      return new Shift$1.FormalParameters({ items: items, rest: rest });
    }
  }, {
    key: 'reduceFunctionBody',
    value: function reduceFunctionBody(node, _ref39) {
      var directives = _ref39.directives,
          statements = _ref39.statements;

      return new Shift$1.FunctionBody({ directives: directives, statements: statements });
    }
  }, {
    key: 'reduceFunctionDeclaration',
    value: function reduceFunctionDeclaration(node, _ref40) {
      var name = _ref40.name,
          params = _ref40.params,
          body = _ref40.body;

      return new Shift$1.FunctionDeclaration({ isAsync: node.isAsync, isGenerator: node.isGenerator, name: name, params: params, body: body });
    }
  }, {
    key: 'reduceFunctionExpression',
    value: function reduceFunctionExpression(node, _ref41) {
      var name = _ref41.name,
          params = _ref41.params,
          body = _ref41.body;

      return new Shift$1.FunctionExpression({ isAsync: node.isAsync, isGenerator: node.isGenerator, name: name, params: params, body: body });
    }
  }, {
    key: 'reduceGetter',
    value: function reduceGetter(node, _ref42) {
      var name = _ref42.name,
          body = _ref42.body;

      return new Shift$1.Getter({ name: name, body: body });
    }
  }, {
    key: 'reduceIdentifierExpression',
    value: function reduceIdentifierExpression(node) {
      return new Shift$1.IdentifierExpression({ name: node.name });
    }
  }, {
    key: 'reduceIfStatement',
    value: function reduceIfStatement(node, _ref43) {
      var test = _ref43.test,
          consequent = _ref43.consequent,
          alternate = _ref43.alternate;

      return new Shift$1.IfStatement({ test: test, consequent: consequent, alternate: alternate });
    }
  }, {
    key: 'reduceImport',
    value: function reduceImport(node, _ref44) {
      var defaultBinding = _ref44.defaultBinding,
          namedImports = _ref44.namedImports;

      return new Shift$1.Import({ defaultBinding: defaultBinding, namedImports: namedImports, moduleSpecifier: node.moduleSpecifier });
    }
  }, {
    key: 'reduceImportNamespace',
    value: function reduceImportNamespace(node, _ref45) {
      var defaultBinding = _ref45.defaultBinding,
          namespaceBinding = _ref45.namespaceBinding;

      return new Shift$1.ImportNamespace({ defaultBinding: defaultBinding, namespaceBinding: namespaceBinding, moduleSpecifier: node.moduleSpecifier });
    }
  }, {
    key: 'reduceImportSpecifier',
    value: function reduceImportSpecifier(node, _ref46) {
      var binding = _ref46.binding;

      return new Shift$1.ImportSpecifier({ name: node.name, binding: binding });
    }
  }, {
    key: 'reduceLabeledStatement',
    value: function reduceLabeledStatement(node, _ref47) {
      var body = _ref47.body;

      return new Shift$1.LabeledStatement({ label: node.label, body: body });
    }
  }, {
    key: 'reduceLiteralBooleanExpression',
    value: function reduceLiteralBooleanExpression(node) {
      return new Shift$1.LiteralBooleanExpression({ value: node.value });
    }
  }, {
    key: 'reduceLiteralInfinityExpression',
    value: function reduceLiteralInfinityExpression(node) {
      return new Shift$1.LiteralInfinityExpression();
    }
  }, {
    key: 'reduceLiteralNullExpression',
    value: function reduceLiteralNullExpression(node) {
      return new Shift$1.LiteralNullExpression();
    }
  }, {
    key: 'reduceLiteralNumericExpression',
    value: function reduceLiteralNumericExpression(node) {
      return new Shift$1.LiteralNumericExpression({ value: node.value });
    }
  }, {
    key: 'reduceLiteralRegExpExpression',
    value: function reduceLiteralRegExpExpression(node) {
      return new Shift$1.LiteralRegExpExpression({ pattern: node.pattern, global: node.global, ignoreCase: node.ignoreCase, multiLine: node.multiLine, dotAll: node.dotAll, unicode: node.unicode, sticky: node.sticky });
    }
  }, {
    key: 'reduceLiteralStringExpression',
    value: function reduceLiteralStringExpression(node) {
      return new Shift$1.LiteralStringExpression({ value: node.value });
    }
  }, {
    key: 'reduceMethod',
    value: function reduceMethod(node, _ref48) {
      var name = _ref48.name,
          params = _ref48.params,
          body = _ref48.body;

      return new Shift$1.Method({ isAsync: node.isAsync, isGenerator: node.isGenerator, name: name, params: params, body: body });
    }
  }, {
    key: 'reduceModule',
    value: function reduceModule(node, _ref49) {
      var directives = _ref49.directives,
          items = _ref49.items;

      return new Shift$1.Module({ directives: directives, items: items });
    }
  }, {
    key: 'reduceNewExpression',
    value: function reduceNewExpression(node, _ref50) {
      var callee = _ref50.callee,
          _arguments = _ref50.arguments;

      return new Shift$1.NewExpression({ callee: callee, arguments: _arguments });
    }
  }, {
    key: 'reduceNewTargetExpression',
    value: function reduceNewTargetExpression(node) {
      return new Shift$1.NewTargetExpression();
    }
  }, {
    key: 'reduceObjectAssignmentTarget',
    value: function reduceObjectAssignmentTarget(node, _ref51) {
      var properties = _ref51.properties,
          rest = _ref51.rest;

      return new Shift$1.ObjectAssignmentTarget({ properties: properties, rest: rest });
    }
  }, {
    key: 'reduceObjectBinding',
    value: function reduceObjectBinding(node, _ref52) {
      var properties = _ref52.properties,
          rest = _ref52.rest;

      return new Shift$1.ObjectBinding({ properties: properties, rest: rest });
    }
  }, {
    key: 'reduceObjectExpression',
    value: function reduceObjectExpression(node, _ref53) {
      var properties = _ref53.properties;

      return new Shift$1.ObjectExpression({ properties: properties });
    }
  }, {
    key: 'reduceReturnStatement',
    value: function reduceReturnStatement(node, _ref54) {
      var expression = _ref54.expression;

      return new Shift$1.ReturnStatement({ expression: expression });
    }
  }, {
    key: 'reduceScript',
    value: function reduceScript(node, _ref55) {
      var directives = _ref55.directives,
          statements = _ref55.statements;

      return new Shift$1.Script({ directives: directives, statements: statements });
    }
  }, {
    key: 'reduceSetter',
    value: function reduceSetter(node, _ref56) {
      var name = _ref56.name,
          param = _ref56.param,
          body = _ref56.body;

      return new Shift$1.Setter({ name: name, param: param, body: body });
    }
  }, {
    key: 'reduceShorthandProperty',
    value: function reduceShorthandProperty(node, _ref57) {
      var name = _ref57.name;

      return new Shift$1.ShorthandProperty({ name: name });
    }
  }, {
    key: 'reduceSpreadElement',
    value: function reduceSpreadElement(node, _ref58) {
      var expression = _ref58.expression;

      return new Shift$1.SpreadElement({ expression: expression });
    }
  }, {
    key: 'reduceSpreadProperty',
    value: function reduceSpreadProperty(node, _ref59) {
      var expression = _ref59.expression;

      return new Shift$1.SpreadProperty({ expression: expression });
    }
  }, {
    key: 'reduceStaticMemberAssignmentTarget',
    value: function reduceStaticMemberAssignmentTarget(node, _ref60) {
      var object = _ref60.object;

      return new Shift$1.StaticMemberAssignmentTarget({ object: object, property: node.property });
    }
  }, {
    key: 'reduceStaticMemberExpression',
    value: function reduceStaticMemberExpression(node, _ref61) {
      var object = _ref61.object;

      return new Shift$1.StaticMemberExpression({ object: object, property: node.property });
    }
  }, {
    key: 'reduceStaticPropertyName',
    value: function reduceStaticPropertyName(node) {
      return new Shift$1.StaticPropertyName({ value: node.value });
    }
  }, {
    key: 'reduceSuper',
    value: function reduceSuper(node) {
      return new Shift$1.Super();
    }
  }, {
    key: 'reduceSwitchCase',
    value: function reduceSwitchCase(node, _ref62) {
      var test = _ref62.test,
          consequent = _ref62.consequent;

      return new Shift$1.SwitchCase({ test: test, consequent: consequent });
    }
  }, {
    key: 'reduceSwitchDefault',
    value: function reduceSwitchDefault(node, _ref63) {
      var consequent = _ref63.consequent;

      return new Shift$1.SwitchDefault({ consequent: consequent });
    }
  }, {
    key: 'reduceSwitchStatement',
    value: function reduceSwitchStatement(node, _ref64) {
      var discriminant = _ref64.discriminant,
          cases = _ref64.cases;

      return new Shift$1.SwitchStatement({ discriminant: discriminant, cases: cases });
    }
  }, {
    key: 'reduceSwitchStatementWithDefault',
    value: function reduceSwitchStatementWithDefault(node, _ref65) {
      var discriminant = _ref65.discriminant,
          preDefaultCases = _ref65.preDefaultCases,
          defaultCase = _ref65.defaultCase,
          postDefaultCases = _ref65.postDefaultCases;

      return new Shift$1.SwitchStatementWithDefault({ discriminant: discriminant, preDefaultCases: preDefaultCases, defaultCase: defaultCase, postDefaultCases: postDefaultCases });
    }
  }, {
    key: 'reduceTemplateElement',
    value: function reduceTemplateElement(node) {
      return new Shift$1.TemplateElement({ rawValue: node.rawValue });
    }
  }, {
    key: 'reduceTemplateExpression',
    value: function reduceTemplateExpression(node, _ref66) {
      var tag = _ref66.tag,
          elements = _ref66.elements;

      return new Shift$1.TemplateExpression({ tag: tag, elements: elements });
    }
  }, {
    key: 'reduceThisExpression',
    value: function reduceThisExpression(node) {
      return new Shift$1.ThisExpression();
    }
  }, {
    key: 'reduceThrowStatement',
    value: function reduceThrowStatement(node, _ref67) {
      var expression = _ref67.expression;

      return new Shift$1.ThrowStatement({ expression: expression });
    }
  }, {
    key: 'reduceTryCatchStatement',
    value: function reduceTryCatchStatement(node, _ref68) {
      var body = _ref68.body,
          catchClause = _ref68.catchClause;

      return new Shift$1.TryCatchStatement({ body: body, catchClause: catchClause });
    }
  }, {
    key: 'reduceTryFinallyStatement',
    value: function reduceTryFinallyStatement(node, _ref69) {
      var body = _ref69.body,
          catchClause = _ref69.catchClause,
          finalizer = _ref69.finalizer;

      return new Shift$1.TryFinallyStatement({ body: body, catchClause: catchClause, finalizer: finalizer });
    }
  }, {
    key: 'reduceUnaryExpression',
    value: function reduceUnaryExpression(node, _ref70) {
      var operand = _ref70.operand;

      return new Shift$1.UnaryExpression({ operator: node.operator, operand: operand });
    }
  }, {
    key: 'reduceUpdateExpression',
    value: function reduceUpdateExpression(node, _ref71) {
      var operand = _ref71.operand;

      return new Shift$1.UpdateExpression({ isPrefix: node.isPrefix, operator: node.operator, operand: operand });
    }
  }, {
    key: 'reduceVariableDeclaration',
    value: function reduceVariableDeclaration(node, _ref72) {
      var declarators = _ref72.declarators;

      return new Shift$1.VariableDeclaration({ kind: node.kind, declarators: declarators });
    }
  }, {
    key: 'reduceVariableDeclarationStatement',
    value: function reduceVariableDeclarationStatement(node, _ref73) {
      var declaration = _ref73.declaration;

      return new Shift$1.VariableDeclarationStatement({ declaration: declaration });
    }
  }, {
    key: 'reduceVariableDeclarator',
    value: function reduceVariableDeclarator(node, _ref74) {
      var binding = _ref74.binding,
          init = _ref74.init;

      return new Shift$1.VariableDeclarator({ binding: binding, init: init });
    }
  }, {
    key: 'reduceWhileStatement',
    value: function reduceWhileStatement(node, _ref75) {
      var test = _ref75.test,
          body = _ref75.body;

      return new Shift$1.WhileStatement({ test: test, body: body });
    }
  }, {
    key: 'reduceWithStatement',
    value: function reduceWithStatement(node, _ref76) {
      var object = _ref76.object,
          body = _ref76.body;

      return new Shift$1.WithStatement({ object: object, body: body });
    }
  }, {
    key: 'reduceYieldExpression',
    value: function reduceYieldExpression(node, _ref77) {
      var expression = _ref77.expression;

      return new Shift$1.YieldExpression({ expression: expression });
    }
  }, {
    key: 'reduceYieldGeneratorExpression',
    value: function reduceYieldGeneratorExpression(node, _ref78) {
      var expression = _ref78.expression;

      return new Shift$1.YieldGeneratorExpression({ expression: expression });
    }
  }]);

  return CloneReducer;
}();

cloneReducer.default = CloneReducer;

var lazyCloneReducer = {};

Object.defineProperty(lazyCloneReducer, "__esModule", {
  value: true
});

var _createClass$9 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Generated by generate-lazy-clone-reducer.js
/**
 * Copyright 2018 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var _shiftAst$3 = dist$4;

var Shift = _interopRequireWildcard$1(_shiftAst$3);

function _interopRequireWildcard$1(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck$b(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LazyCloneReducer = function () {
  function LazyCloneReducer() {
    _classCallCheck$b(this, LazyCloneReducer);
  }

  _createClass$9(LazyCloneReducer, [{
    key: 'reduceArrayAssignmentTarget',
    value: function reduceArrayAssignmentTarget(node, _ref) {
      var elements = _ref.elements,
          rest = _ref.rest;

      if (node.elements.length === elements.length && node.elements.every(function (v, i) {
        return v === elements[i];
      }) && node.rest === rest) {
        return node;
      }
      return new Shift.ArrayAssignmentTarget({ elements: elements, rest: rest });
    }
  }, {
    key: 'reduceArrayBinding',
    value: function reduceArrayBinding(node, _ref2) {
      var elements = _ref2.elements,
          rest = _ref2.rest;

      if (node.elements.length === elements.length && node.elements.every(function (v, i) {
        return v === elements[i];
      }) && node.rest === rest) {
        return node;
      }
      return new Shift.ArrayBinding({ elements: elements, rest: rest });
    }
  }, {
    key: 'reduceArrayExpression',
    value: function reduceArrayExpression(node, _ref3) {
      var elements = _ref3.elements;

      if (node.elements.length === elements.length && node.elements.every(function (v, i) {
        return v === elements[i];
      })) {
        return node;
      }
      return new Shift.ArrayExpression({ elements: elements });
    }
  }, {
    key: 'reduceArrowExpression',
    value: function reduceArrowExpression(node, _ref4) {
      var params = _ref4.params,
          body = _ref4.body;

      if (node.params === params && node.body === body) {
        return node;
      }
      return new Shift.ArrowExpression({ isAsync: node.isAsync, params: params, body: body });
    }
  }, {
    key: 'reduceAssignmentExpression',
    value: function reduceAssignmentExpression(node, _ref5) {
      var binding = _ref5.binding,
          expression = _ref5.expression;

      if (node.binding === binding && node.expression === expression) {
        return node;
      }
      return new Shift.AssignmentExpression({ binding: binding, expression: expression });
    }
  }, {
    key: 'reduceAssignmentTargetIdentifier',
    value: function reduceAssignmentTargetIdentifier(node) {
      return node;
    }
  }, {
    key: 'reduceAssignmentTargetPropertyIdentifier',
    value: function reduceAssignmentTargetPropertyIdentifier(node, _ref6) {
      var binding = _ref6.binding,
          init = _ref6.init;

      if (node.binding === binding && node.init === init) {
        return node;
      }
      return new Shift.AssignmentTargetPropertyIdentifier({ binding: binding, init: init });
    }
  }, {
    key: 'reduceAssignmentTargetPropertyProperty',
    value: function reduceAssignmentTargetPropertyProperty(node, _ref7) {
      var name = _ref7.name,
          binding = _ref7.binding;

      if (node.name === name && node.binding === binding) {
        return node;
      }
      return new Shift.AssignmentTargetPropertyProperty({ name: name, binding: binding });
    }
  }, {
    key: 'reduceAssignmentTargetWithDefault',
    value: function reduceAssignmentTargetWithDefault(node, _ref8) {
      var binding = _ref8.binding,
          init = _ref8.init;

      if (node.binding === binding && node.init === init) {
        return node;
      }
      return new Shift.AssignmentTargetWithDefault({ binding: binding, init: init });
    }
  }, {
    key: 'reduceAwaitExpression',
    value: function reduceAwaitExpression(node, _ref9) {
      var expression = _ref9.expression;

      if (node.expression === expression) {
        return node;
      }
      return new Shift.AwaitExpression({ expression: expression });
    }
  }, {
    key: 'reduceBinaryExpression',
    value: function reduceBinaryExpression(node, _ref10) {
      var left = _ref10.left,
          right = _ref10.right;

      if (node.left === left && node.right === right) {
        return node;
      }
      return new Shift.BinaryExpression({ left: left, operator: node.operator, right: right });
    }
  }, {
    key: 'reduceBindingIdentifier',
    value: function reduceBindingIdentifier(node) {
      return node;
    }
  }, {
    key: 'reduceBindingPropertyIdentifier',
    value: function reduceBindingPropertyIdentifier(node, _ref11) {
      var binding = _ref11.binding,
          init = _ref11.init;

      if (node.binding === binding && node.init === init) {
        return node;
      }
      return new Shift.BindingPropertyIdentifier({ binding: binding, init: init });
    }
  }, {
    key: 'reduceBindingPropertyProperty',
    value: function reduceBindingPropertyProperty(node, _ref12) {
      var name = _ref12.name,
          binding = _ref12.binding;

      if (node.name === name && node.binding === binding) {
        return node;
      }
      return new Shift.BindingPropertyProperty({ name: name, binding: binding });
    }
  }, {
    key: 'reduceBindingWithDefault',
    value: function reduceBindingWithDefault(node, _ref13) {
      var binding = _ref13.binding,
          init = _ref13.init;

      if (node.binding === binding && node.init === init) {
        return node;
      }
      return new Shift.BindingWithDefault({ binding: binding, init: init });
    }
  }, {
    key: 'reduceBlock',
    value: function reduceBlock(node, _ref14) {
      var statements = _ref14.statements;

      if (node.statements.length === statements.length && node.statements.every(function (v, i) {
        return v === statements[i];
      })) {
        return node;
      }
      return new Shift.Block({ statements: statements });
    }
  }, {
    key: 'reduceBlockStatement',
    value: function reduceBlockStatement(node, _ref15) {
      var block = _ref15.block;

      if (node.block === block) {
        return node;
      }
      return new Shift.BlockStatement({ block: block });
    }
  }, {
    key: 'reduceBreakStatement',
    value: function reduceBreakStatement(node) {
      return node;
    }
  }, {
    key: 'reduceCallExpression',
    value: function reduceCallExpression(node, _ref16) {
      var callee = _ref16.callee,
          _arguments = _ref16.arguments;

      if (node.callee === callee && node.arguments.length === _arguments.length && node.arguments.every(function (v, i) {
        return v === _arguments[i];
      })) {
        return node;
      }
      return new Shift.CallExpression({ callee: callee, arguments: _arguments });
    }
  }, {
    key: 'reduceCatchClause',
    value: function reduceCatchClause(node, _ref17) {
      var binding = _ref17.binding,
          body = _ref17.body;

      if (node.binding === binding && node.body === body) {
        return node;
      }
      return new Shift.CatchClause({ binding: binding, body: body });
    }
  }, {
    key: 'reduceClassDeclaration',
    value: function reduceClassDeclaration(node, _ref18) {
      var name = _ref18.name,
          _super = _ref18.super,
          elements = _ref18.elements;

      if (node.name === name && node.super === _super && node.elements.length === elements.length && node.elements.every(function (v, i) {
        return v === elements[i];
      })) {
        return node;
      }
      return new Shift.ClassDeclaration({ name: name, super: _super, elements: elements });
    }
  }, {
    key: 'reduceClassElement',
    value: function reduceClassElement(node, _ref19) {
      var method = _ref19.method;

      if (node.method === method) {
        return node;
      }
      return new Shift.ClassElement({ isStatic: node.isStatic, method: method });
    }
  }, {
    key: 'reduceClassExpression',
    value: function reduceClassExpression(node, _ref20) {
      var name = _ref20.name,
          _super = _ref20.super,
          elements = _ref20.elements;

      if (node.name === name && node.super === _super && node.elements.length === elements.length && node.elements.every(function (v, i) {
        return v === elements[i];
      })) {
        return node;
      }
      return new Shift.ClassExpression({ name: name, super: _super, elements: elements });
    }
  }, {
    key: 'reduceCompoundAssignmentExpression',
    value: function reduceCompoundAssignmentExpression(node, _ref21) {
      var binding = _ref21.binding,
          expression = _ref21.expression;

      if (node.binding === binding && node.expression === expression) {
        return node;
      }
      return new Shift.CompoundAssignmentExpression({ binding: binding, operator: node.operator, expression: expression });
    }
  }, {
    key: 'reduceComputedMemberAssignmentTarget',
    value: function reduceComputedMemberAssignmentTarget(node, _ref22) {
      var object = _ref22.object,
          expression = _ref22.expression;

      if (node.object === object && node.expression === expression) {
        return node;
      }
      return new Shift.ComputedMemberAssignmentTarget({ object: object, expression: expression });
    }
  }, {
    key: 'reduceComputedMemberExpression',
    value: function reduceComputedMemberExpression(node, _ref23) {
      var object = _ref23.object,
          expression = _ref23.expression;

      if (node.object === object && node.expression === expression) {
        return node;
      }
      return new Shift.ComputedMemberExpression({ object: object, expression: expression });
    }
  }, {
    key: 'reduceComputedPropertyName',
    value: function reduceComputedPropertyName(node, _ref24) {
      var expression = _ref24.expression;

      if (node.expression === expression) {
        return node;
      }
      return new Shift.ComputedPropertyName({ expression: expression });
    }
  }, {
    key: 'reduceConditionalExpression',
    value: function reduceConditionalExpression(node, _ref25) {
      var test = _ref25.test,
          consequent = _ref25.consequent,
          alternate = _ref25.alternate;

      if (node.test === test && node.consequent === consequent && node.alternate === alternate) {
        return node;
      }
      return new Shift.ConditionalExpression({ test: test, consequent: consequent, alternate: alternate });
    }
  }, {
    key: 'reduceContinueStatement',
    value: function reduceContinueStatement(node) {
      return node;
    }
  }, {
    key: 'reduceDataProperty',
    value: function reduceDataProperty(node, _ref26) {
      var name = _ref26.name,
          expression = _ref26.expression;

      if (node.name === name && node.expression === expression) {
        return node;
      }
      return new Shift.DataProperty({ name: name, expression: expression });
    }
  }, {
    key: 'reduceDebuggerStatement',
    value: function reduceDebuggerStatement(node) {
      return node;
    }
  }, {
    key: 'reduceDirective',
    value: function reduceDirective(node) {
      return node;
    }
  }, {
    key: 'reduceDoWhileStatement',
    value: function reduceDoWhileStatement(node, _ref27) {
      var body = _ref27.body,
          test = _ref27.test;

      if (node.body === body && node.test === test) {
        return node;
      }
      return new Shift.DoWhileStatement({ body: body, test: test });
    }
  }, {
    key: 'reduceEmptyStatement',
    value: function reduceEmptyStatement(node) {
      return node;
    }
  }, {
    key: 'reduceExport',
    value: function reduceExport(node, _ref28) {
      var declaration = _ref28.declaration;

      if (node.declaration === declaration) {
        return node;
      }
      return new Shift.Export({ declaration: declaration });
    }
  }, {
    key: 'reduceExportAllFrom',
    value: function reduceExportAllFrom(node) {
      return node;
    }
  }, {
    key: 'reduceExportDefault',
    value: function reduceExportDefault(node, _ref29) {
      var body = _ref29.body;

      if (node.body === body) {
        return node;
      }
      return new Shift.ExportDefault({ body: body });
    }
  }, {
    key: 'reduceExportFrom',
    value: function reduceExportFrom(node, _ref30) {
      var namedExports = _ref30.namedExports;

      if (node.namedExports.length === namedExports.length && node.namedExports.every(function (v, i) {
        return v === namedExports[i];
      })) {
        return node;
      }
      return new Shift.ExportFrom({ namedExports: namedExports, moduleSpecifier: node.moduleSpecifier });
    }
  }, {
    key: 'reduceExportFromSpecifier',
    value: function reduceExportFromSpecifier(node) {
      return node;
    }
  }, {
    key: 'reduceExportLocalSpecifier',
    value: function reduceExportLocalSpecifier(node, _ref31) {
      var name = _ref31.name;

      if (node.name === name) {
        return node;
      }
      return new Shift.ExportLocalSpecifier({ name: name, exportedName: node.exportedName });
    }
  }, {
    key: 'reduceExportLocals',
    value: function reduceExportLocals(node, _ref32) {
      var namedExports = _ref32.namedExports;

      if (node.namedExports.length === namedExports.length && node.namedExports.every(function (v, i) {
        return v === namedExports[i];
      })) {
        return node;
      }
      return new Shift.ExportLocals({ namedExports: namedExports });
    }
  }, {
    key: 'reduceExpressionStatement',
    value: function reduceExpressionStatement(node, _ref33) {
      var expression = _ref33.expression;

      if (node.expression === expression) {
        return node;
      }
      return new Shift.ExpressionStatement({ expression: expression });
    }
  }, {
    key: 'reduceForAwaitStatement',
    value: function reduceForAwaitStatement(node, _ref34) {
      var left = _ref34.left,
          right = _ref34.right,
          body = _ref34.body;

      if (node.left === left && node.right === right && node.body === body) {
        return node;
      }
      return new Shift.ForAwaitStatement({ left: left, right: right, body: body });
    }
  }, {
    key: 'reduceForInStatement',
    value: function reduceForInStatement(node, _ref35) {
      var left = _ref35.left,
          right = _ref35.right,
          body = _ref35.body;

      if (node.left === left && node.right === right && node.body === body) {
        return node;
      }
      return new Shift.ForInStatement({ left: left, right: right, body: body });
    }
  }, {
    key: 'reduceForOfStatement',
    value: function reduceForOfStatement(node, _ref36) {
      var left = _ref36.left,
          right = _ref36.right,
          body = _ref36.body;

      if (node.left === left && node.right === right && node.body === body) {
        return node;
      }
      return new Shift.ForOfStatement({ left: left, right: right, body: body });
    }
  }, {
    key: 'reduceForStatement',
    value: function reduceForStatement(node, _ref37) {
      var init = _ref37.init,
          test = _ref37.test,
          update = _ref37.update,
          body = _ref37.body;

      if (node.init === init && node.test === test && node.update === update && node.body === body) {
        return node;
      }
      return new Shift.ForStatement({ init: init, test: test, update: update, body: body });
    }
  }, {
    key: 'reduceFormalParameters',
    value: function reduceFormalParameters(node, _ref38) {
      var items = _ref38.items,
          rest = _ref38.rest;

      if (node.items.length === items.length && node.items.every(function (v, i) {
        return v === items[i];
      }) && node.rest === rest) {
        return node;
      }
      return new Shift.FormalParameters({ items: items, rest: rest });
    }
  }, {
    key: 'reduceFunctionBody',
    value: function reduceFunctionBody(node, _ref39) {
      var directives = _ref39.directives,
          statements = _ref39.statements;

      if (node.directives.length === directives.length && node.directives.every(function (v, i) {
        return v === directives[i];
      }) && node.statements.length === statements.length && node.statements.every(function (v, i) {
        return v === statements[i];
      })) {
        return node;
      }
      return new Shift.FunctionBody({ directives: directives, statements: statements });
    }
  }, {
    key: 'reduceFunctionDeclaration',
    value: function reduceFunctionDeclaration(node, _ref40) {
      var name = _ref40.name,
          params = _ref40.params,
          body = _ref40.body;

      if (node.name === name && node.params === params && node.body === body) {
        return node;
      }
      return new Shift.FunctionDeclaration({ isAsync: node.isAsync, isGenerator: node.isGenerator, name: name, params: params, body: body });
    }
  }, {
    key: 'reduceFunctionExpression',
    value: function reduceFunctionExpression(node, _ref41) {
      var name = _ref41.name,
          params = _ref41.params,
          body = _ref41.body;

      if (node.name === name && node.params === params && node.body === body) {
        return node;
      }
      return new Shift.FunctionExpression({ isAsync: node.isAsync, isGenerator: node.isGenerator, name: name, params: params, body: body });
    }
  }, {
    key: 'reduceGetter',
    value: function reduceGetter(node, _ref42) {
      var name = _ref42.name,
          body = _ref42.body;

      if (node.name === name && node.body === body) {
        return node;
      }
      return new Shift.Getter({ name: name, body: body });
    }
  }, {
    key: 'reduceIdentifierExpression',
    value: function reduceIdentifierExpression(node) {
      return node;
    }
  }, {
    key: 'reduceIfStatement',
    value: function reduceIfStatement(node, _ref43) {
      var test = _ref43.test,
          consequent = _ref43.consequent,
          alternate = _ref43.alternate;

      if (node.test === test && node.consequent === consequent && node.alternate === alternate) {
        return node;
      }
      return new Shift.IfStatement({ test: test, consequent: consequent, alternate: alternate });
    }
  }, {
    key: 'reduceImport',
    value: function reduceImport(node, _ref44) {
      var defaultBinding = _ref44.defaultBinding,
          namedImports = _ref44.namedImports;

      if (node.defaultBinding === defaultBinding && node.namedImports.length === namedImports.length && node.namedImports.every(function (v, i) {
        return v === namedImports[i];
      })) {
        return node;
      }
      return new Shift.Import({ defaultBinding: defaultBinding, namedImports: namedImports, moduleSpecifier: node.moduleSpecifier });
    }
  }, {
    key: 'reduceImportNamespace',
    value: function reduceImportNamespace(node, _ref45) {
      var defaultBinding = _ref45.defaultBinding,
          namespaceBinding = _ref45.namespaceBinding;

      if (node.defaultBinding === defaultBinding && node.namespaceBinding === namespaceBinding) {
        return node;
      }
      return new Shift.ImportNamespace({ defaultBinding: defaultBinding, namespaceBinding: namespaceBinding, moduleSpecifier: node.moduleSpecifier });
    }
  }, {
    key: 'reduceImportSpecifier',
    value: function reduceImportSpecifier(node, _ref46) {
      var binding = _ref46.binding;

      if (node.binding === binding) {
        return node;
      }
      return new Shift.ImportSpecifier({ name: node.name, binding: binding });
    }
  }, {
    key: 'reduceLabeledStatement',
    value: function reduceLabeledStatement(node, _ref47) {
      var body = _ref47.body;

      if (node.body === body) {
        return node;
      }
      return new Shift.LabeledStatement({ label: node.label, body: body });
    }
  }, {
    key: 'reduceLiteralBooleanExpression',
    value: function reduceLiteralBooleanExpression(node) {
      return node;
    }
  }, {
    key: 'reduceLiteralInfinityExpression',
    value: function reduceLiteralInfinityExpression(node) {
      return node;
    }
  }, {
    key: 'reduceLiteralNullExpression',
    value: function reduceLiteralNullExpression(node) {
      return node;
    }
  }, {
    key: 'reduceLiteralNumericExpression',
    value: function reduceLiteralNumericExpression(node) {
      return node;
    }
  }, {
    key: 'reduceLiteralRegExpExpression',
    value: function reduceLiteralRegExpExpression(node) {
      return node;
    }
  }, {
    key: 'reduceLiteralStringExpression',
    value: function reduceLiteralStringExpression(node) {
      return node;
    }
  }, {
    key: 'reduceMethod',
    value: function reduceMethod(node, _ref48) {
      var name = _ref48.name,
          params = _ref48.params,
          body = _ref48.body;

      if (node.name === name && node.params === params && node.body === body) {
        return node;
      }
      return new Shift.Method({ isAsync: node.isAsync, isGenerator: node.isGenerator, name: name, params: params, body: body });
    }
  }, {
    key: 'reduceModule',
    value: function reduceModule(node, _ref49) {
      var directives = _ref49.directives,
          items = _ref49.items;

      if (node.directives.length === directives.length && node.directives.every(function (v, i) {
        return v === directives[i];
      }) && node.items.length === items.length && node.items.every(function (v, i) {
        return v === items[i];
      })) {
        return node;
      }
      return new Shift.Module({ directives: directives, items: items });
    }
  }, {
    key: 'reduceNewExpression',
    value: function reduceNewExpression(node, _ref50) {
      var callee = _ref50.callee,
          _arguments = _ref50.arguments;

      if (node.callee === callee && node.arguments.length === _arguments.length && node.arguments.every(function (v, i) {
        return v === _arguments[i];
      })) {
        return node;
      }
      return new Shift.NewExpression({ callee: callee, arguments: _arguments });
    }
  }, {
    key: 'reduceNewTargetExpression',
    value: function reduceNewTargetExpression(node) {
      return node;
    }
  }, {
    key: 'reduceObjectAssignmentTarget',
    value: function reduceObjectAssignmentTarget(node, _ref51) {
      var properties = _ref51.properties,
          rest = _ref51.rest;

      if (node.properties.length === properties.length && node.properties.every(function (v, i) {
        return v === properties[i];
      }) && node.rest === rest) {
        return node;
      }
      return new Shift.ObjectAssignmentTarget({ properties: properties, rest: rest });
    }
  }, {
    key: 'reduceObjectBinding',
    value: function reduceObjectBinding(node, _ref52) {
      var properties = _ref52.properties,
          rest = _ref52.rest;

      if (node.properties.length === properties.length && node.properties.every(function (v, i) {
        return v === properties[i];
      }) && node.rest === rest) {
        return node;
      }
      return new Shift.ObjectBinding({ properties: properties, rest: rest });
    }
  }, {
    key: 'reduceObjectExpression',
    value: function reduceObjectExpression(node, _ref53) {
      var properties = _ref53.properties;

      if (node.properties.length === properties.length && node.properties.every(function (v, i) {
        return v === properties[i];
      })) {
        return node;
      }
      return new Shift.ObjectExpression({ properties: properties });
    }
  }, {
    key: 'reduceReturnStatement',
    value: function reduceReturnStatement(node, _ref54) {
      var expression = _ref54.expression;

      if (node.expression === expression) {
        return node;
      }
      return new Shift.ReturnStatement({ expression: expression });
    }
  }, {
    key: 'reduceScript',
    value: function reduceScript(node, _ref55) {
      var directives = _ref55.directives,
          statements = _ref55.statements;

      if (node.directives.length === directives.length && node.directives.every(function (v, i) {
        return v === directives[i];
      }) && node.statements.length === statements.length && node.statements.every(function (v, i) {
        return v === statements[i];
      })) {
        return node;
      }
      return new Shift.Script({ directives: directives, statements: statements });
    }
  }, {
    key: 'reduceSetter',
    value: function reduceSetter(node, _ref56) {
      var name = _ref56.name,
          param = _ref56.param,
          body = _ref56.body;

      if (node.name === name && node.param === param && node.body === body) {
        return node;
      }
      return new Shift.Setter({ name: name, param: param, body: body });
    }
  }, {
    key: 'reduceShorthandProperty',
    value: function reduceShorthandProperty(node, _ref57) {
      var name = _ref57.name;

      if (node.name === name) {
        return node;
      }
      return new Shift.ShorthandProperty({ name: name });
    }
  }, {
    key: 'reduceSpreadElement',
    value: function reduceSpreadElement(node, _ref58) {
      var expression = _ref58.expression;

      if (node.expression === expression) {
        return node;
      }
      return new Shift.SpreadElement({ expression: expression });
    }
  }, {
    key: 'reduceSpreadProperty',
    value: function reduceSpreadProperty(node, _ref59) {
      var expression = _ref59.expression;

      if (node.expression === expression) {
        return node;
      }
      return new Shift.SpreadProperty({ expression: expression });
    }
  }, {
    key: 'reduceStaticMemberAssignmentTarget',
    value: function reduceStaticMemberAssignmentTarget(node, _ref60) {
      var object = _ref60.object;

      if (node.object === object) {
        return node;
      }
      return new Shift.StaticMemberAssignmentTarget({ object: object, property: node.property });
    }
  }, {
    key: 'reduceStaticMemberExpression',
    value: function reduceStaticMemberExpression(node, _ref61) {
      var object = _ref61.object;

      if (node.object === object) {
        return node;
      }
      return new Shift.StaticMemberExpression({ object: object, property: node.property });
    }
  }, {
    key: 'reduceStaticPropertyName',
    value: function reduceStaticPropertyName(node) {
      return node;
    }
  }, {
    key: 'reduceSuper',
    value: function reduceSuper(node) {
      return node;
    }
  }, {
    key: 'reduceSwitchCase',
    value: function reduceSwitchCase(node, _ref62) {
      var test = _ref62.test,
          consequent = _ref62.consequent;

      if (node.test === test && node.consequent.length === consequent.length && node.consequent.every(function (v, i) {
        return v === consequent[i];
      })) {
        return node;
      }
      return new Shift.SwitchCase({ test: test, consequent: consequent });
    }
  }, {
    key: 'reduceSwitchDefault',
    value: function reduceSwitchDefault(node, _ref63) {
      var consequent = _ref63.consequent;

      if (node.consequent.length === consequent.length && node.consequent.every(function (v, i) {
        return v === consequent[i];
      })) {
        return node;
      }
      return new Shift.SwitchDefault({ consequent: consequent });
    }
  }, {
    key: 'reduceSwitchStatement',
    value: function reduceSwitchStatement(node, _ref64) {
      var discriminant = _ref64.discriminant,
          cases = _ref64.cases;

      if (node.discriminant === discriminant && node.cases.length === cases.length && node.cases.every(function (v, i) {
        return v === cases[i];
      })) {
        return node;
      }
      return new Shift.SwitchStatement({ discriminant: discriminant, cases: cases });
    }
  }, {
    key: 'reduceSwitchStatementWithDefault',
    value: function reduceSwitchStatementWithDefault(node, _ref65) {
      var discriminant = _ref65.discriminant,
          preDefaultCases = _ref65.preDefaultCases,
          defaultCase = _ref65.defaultCase,
          postDefaultCases = _ref65.postDefaultCases;

      if (node.discriminant === discriminant && node.preDefaultCases.length === preDefaultCases.length && node.preDefaultCases.every(function (v, i) {
        return v === preDefaultCases[i];
      }) && node.defaultCase === defaultCase && node.postDefaultCases.length === postDefaultCases.length && node.postDefaultCases.every(function (v, i) {
        return v === postDefaultCases[i];
      })) {
        return node;
      }
      return new Shift.SwitchStatementWithDefault({ discriminant: discriminant, preDefaultCases: preDefaultCases, defaultCase: defaultCase, postDefaultCases: postDefaultCases });
    }
  }, {
    key: 'reduceTemplateElement',
    value: function reduceTemplateElement(node) {
      return node;
    }
  }, {
    key: 'reduceTemplateExpression',
    value: function reduceTemplateExpression(node, _ref66) {
      var tag = _ref66.tag,
          elements = _ref66.elements;

      if (node.tag === tag && node.elements.length === elements.length && node.elements.every(function (v, i) {
        return v === elements[i];
      })) {
        return node;
      }
      return new Shift.TemplateExpression({ tag: tag, elements: elements });
    }
  }, {
    key: 'reduceThisExpression',
    value: function reduceThisExpression(node) {
      return node;
    }
  }, {
    key: 'reduceThrowStatement',
    value: function reduceThrowStatement(node, _ref67) {
      var expression = _ref67.expression;

      if (node.expression === expression) {
        return node;
      }
      return new Shift.ThrowStatement({ expression: expression });
    }
  }, {
    key: 'reduceTryCatchStatement',
    value: function reduceTryCatchStatement(node, _ref68) {
      var body = _ref68.body,
          catchClause = _ref68.catchClause;

      if (node.body === body && node.catchClause === catchClause) {
        return node;
      }
      return new Shift.TryCatchStatement({ body: body, catchClause: catchClause });
    }
  }, {
    key: 'reduceTryFinallyStatement',
    value: function reduceTryFinallyStatement(node, _ref69) {
      var body = _ref69.body,
          catchClause = _ref69.catchClause,
          finalizer = _ref69.finalizer;

      if (node.body === body && node.catchClause === catchClause && node.finalizer === finalizer) {
        return node;
      }
      return new Shift.TryFinallyStatement({ body: body, catchClause: catchClause, finalizer: finalizer });
    }
  }, {
    key: 'reduceUnaryExpression',
    value: function reduceUnaryExpression(node, _ref70) {
      var operand = _ref70.operand;

      if (node.operand === operand) {
        return node;
      }
      return new Shift.UnaryExpression({ operator: node.operator, operand: operand });
    }
  }, {
    key: 'reduceUpdateExpression',
    value: function reduceUpdateExpression(node, _ref71) {
      var operand = _ref71.operand;

      if (node.operand === operand) {
        return node;
      }
      return new Shift.UpdateExpression({ isPrefix: node.isPrefix, operator: node.operator, operand: operand });
    }
  }, {
    key: 'reduceVariableDeclaration',
    value: function reduceVariableDeclaration(node, _ref72) {
      var declarators = _ref72.declarators;

      if (node.declarators.length === declarators.length && node.declarators.every(function (v, i) {
        return v === declarators[i];
      })) {
        return node;
      }
      return new Shift.VariableDeclaration({ kind: node.kind, declarators: declarators });
    }
  }, {
    key: 'reduceVariableDeclarationStatement',
    value: function reduceVariableDeclarationStatement(node, _ref73) {
      var declaration = _ref73.declaration;

      if (node.declaration === declaration) {
        return node;
      }
      return new Shift.VariableDeclarationStatement({ declaration: declaration });
    }
  }, {
    key: 'reduceVariableDeclarator',
    value: function reduceVariableDeclarator(node, _ref74) {
      var binding = _ref74.binding,
          init = _ref74.init;

      if (node.binding === binding && node.init === init) {
        return node;
      }
      return new Shift.VariableDeclarator({ binding: binding, init: init });
    }
  }, {
    key: 'reduceWhileStatement',
    value: function reduceWhileStatement(node, _ref75) {
      var test = _ref75.test,
          body = _ref75.body;

      if (node.test === test && node.body === body) {
        return node;
      }
      return new Shift.WhileStatement({ test: test, body: body });
    }
  }, {
    key: 'reduceWithStatement',
    value: function reduceWithStatement(node, _ref76) {
      var object = _ref76.object,
          body = _ref76.body;

      if (node.object === object && node.body === body) {
        return node;
      }
      return new Shift.WithStatement({ object: object, body: body });
    }
  }, {
    key: 'reduceYieldExpression',
    value: function reduceYieldExpression(node, _ref77) {
      var expression = _ref77.expression;

      if (node.expression === expression) {
        return node;
      }
      return new Shift.YieldExpression({ expression: expression });
    }
  }, {
    key: 'reduceYieldGeneratorExpression',
    value: function reduceYieldGeneratorExpression(node, _ref78) {
      var expression = _ref78.expression;

      if (node.expression === expression) {
        return node;
      }
      return new Shift.YieldGeneratorExpression({ expression: expression });
    }
  }]);

  return LazyCloneReducer;
}();

lazyCloneReducer.default = LazyCloneReducer;

var monoidalReducer = {};

Object.defineProperty(monoidalReducer, "__esModule", {
  value: true
});

var _createClass$8 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Generated by generate-monoidal-reducer.js
/**
 * Copyright 2018 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var _shiftAst$2 = dist$4;

_interopRequireDefault$e(_shiftAst$2);

function _interopRequireDefault$e(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray$7(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck$a(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MonoidalReducer$1 = function () {
  function MonoidalReducer(monoid) {
    _classCallCheck$a(this, MonoidalReducer);

    var identity = monoid.empty();
    this.identity = identity;
    var concat = void 0;
    if (monoid.prototype && typeof monoid.prototype.concat === 'function') {
      concat = Function.prototype.call.bind(monoid.prototype.concat);
    } else if (typeof monoid.concat === 'function') {
      concat = monoid.concat;
    } else {
      throw new TypeError('Monoid must provide a `concat` method');
    }
    this.append = function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return args.reduce(concat, identity);
    };
  }

  _createClass$8(MonoidalReducer, [{
    key: 'reduceArrayAssignmentTarget',
    value: function reduceArrayAssignmentTarget(node, _ref) {
      var elements = _ref.elements,
          rest = _ref.rest;

      return this.append.apply(this, _toConsumableArray$7(elements.filter(function (n) {
        return n != null;
      })).concat([rest == null ? this.identity : rest]));
    }
  }, {
    key: 'reduceArrayBinding',
    value: function reduceArrayBinding(node, _ref2) {
      var elements = _ref2.elements,
          rest = _ref2.rest;

      return this.append.apply(this, _toConsumableArray$7(elements.filter(function (n) {
        return n != null;
      })).concat([rest == null ? this.identity : rest]));
    }
  }, {
    key: 'reduceArrayExpression',
    value: function reduceArrayExpression(node, _ref3) {
      var elements = _ref3.elements;

      return this.append.apply(this, _toConsumableArray$7(elements.filter(function (n) {
        return n != null;
      })));
    }
  }, {
    key: 'reduceArrowExpression',
    value: function reduceArrowExpression(node, _ref4) {
      var params = _ref4.params,
          body = _ref4.body;

      return this.append(params, body);
    }
  }, {
    key: 'reduceAssignmentExpression',
    value: function reduceAssignmentExpression(node, _ref5) {
      var binding = _ref5.binding,
          expression = _ref5.expression;

      return this.append(binding, expression);
    }
  }, {
    key: 'reduceAssignmentTargetIdentifier',
    value: function reduceAssignmentTargetIdentifier(node) {
      return this.identity;
    }
  }, {
    key: 'reduceAssignmentTargetPropertyIdentifier',
    value: function reduceAssignmentTargetPropertyIdentifier(node, _ref6) {
      var binding = _ref6.binding,
          init = _ref6.init;

      return this.append(binding, init == null ? this.identity : init);
    }
  }, {
    key: 'reduceAssignmentTargetPropertyProperty',
    value: function reduceAssignmentTargetPropertyProperty(node, _ref7) {
      var name = _ref7.name,
          binding = _ref7.binding;

      return this.append(name, binding);
    }
  }, {
    key: 'reduceAssignmentTargetWithDefault',
    value: function reduceAssignmentTargetWithDefault(node, _ref8) {
      var binding = _ref8.binding,
          init = _ref8.init;

      return this.append(binding, init);
    }
  }, {
    key: 'reduceAwaitExpression',
    value: function reduceAwaitExpression(node, _ref9) {
      var expression = _ref9.expression;

      return expression;
    }
  }, {
    key: 'reduceBinaryExpression',
    value: function reduceBinaryExpression(node, _ref10) {
      var left = _ref10.left,
          right = _ref10.right;

      return this.append(left, right);
    }
  }, {
    key: 'reduceBindingIdentifier',
    value: function reduceBindingIdentifier(node) {
      return this.identity;
    }
  }, {
    key: 'reduceBindingPropertyIdentifier',
    value: function reduceBindingPropertyIdentifier(node, _ref11) {
      var binding = _ref11.binding,
          init = _ref11.init;

      return this.append(binding, init == null ? this.identity : init);
    }
  }, {
    key: 'reduceBindingPropertyProperty',
    value: function reduceBindingPropertyProperty(node, _ref12) {
      var name = _ref12.name,
          binding = _ref12.binding;

      return this.append(name, binding);
    }
  }, {
    key: 'reduceBindingWithDefault',
    value: function reduceBindingWithDefault(node, _ref13) {
      var binding = _ref13.binding,
          init = _ref13.init;

      return this.append(binding, init);
    }
  }, {
    key: 'reduceBlock',
    value: function reduceBlock(node, _ref14) {
      var statements = _ref14.statements;

      return this.append.apply(this, _toConsumableArray$7(statements));
    }
  }, {
    key: 'reduceBlockStatement',
    value: function reduceBlockStatement(node, _ref15) {
      var block = _ref15.block;

      return block;
    }
  }, {
    key: 'reduceBreakStatement',
    value: function reduceBreakStatement(node) {
      return this.identity;
    }
  }, {
    key: 'reduceCallExpression',
    value: function reduceCallExpression(node, _ref16) {
      var callee = _ref16.callee,
          _arguments = _ref16.arguments;

      return this.append.apply(this, [callee].concat(_toConsumableArray$7(_arguments)));
    }
  }, {
    key: 'reduceCatchClause',
    value: function reduceCatchClause(node, _ref17) {
      var binding = _ref17.binding,
          body = _ref17.body;

      return this.append(binding, body);
    }
  }, {
    key: 'reduceClassDeclaration',
    value: function reduceClassDeclaration(node, _ref18) {
      var name = _ref18.name,
          _super = _ref18.super,
          elements = _ref18.elements;

      return this.append.apply(this, [name, _super == null ? this.identity : _super].concat(_toConsumableArray$7(elements)));
    }
  }, {
    key: 'reduceClassElement',
    value: function reduceClassElement(node, _ref19) {
      var method = _ref19.method;

      return method;
    }
  }, {
    key: 'reduceClassExpression',
    value: function reduceClassExpression(node, _ref20) {
      var name = _ref20.name,
          _super = _ref20.super,
          elements = _ref20.elements;

      return this.append.apply(this, [name == null ? this.identity : name, _super == null ? this.identity : _super].concat(_toConsumableArray$7(elements)));
    }
  }, {
    key: 'reduceCompoundAssignmentExpression',
    value: function reduceCompoundAssignmentExpression(node, _ref21) {
      var binding = _ref21.binding,
          expression = _ref21.expression;

      return this.append(binding, expression);
    }
  }, {
    key: 'reduceComputedMemberAssignmentTarget',
    value: function reduceComputedMemberAssignmentTarget(node, _ref22) {
      var object = _ref22.object,
          expression = _ref22.expression;

      return this.append(object, expression);
    }
  }, {
    key: 'reduceComputedMemberExpression',
    value: function reduceComputedMemberExpression(node, _ref23) {
      var object = _ref23.object,
          expression = _ref23.expression;

      return this.append(object, expression);
    }
  }, {
    key: 'reduceComputedPropertyName',
    value: function reduceComputedPropertyName(node, _ref24) {
      var expression = _ref24.expression;

      return expression;
    }
  }, {
    key: 'reduceConditionalExpression',
    value: function reduceConditionalExpression(node, _ref25) {
      var test = _ref25.test,
          consequent = _ref25.consequent,
          alternate = _ref25.alternate;

      return this.append(test, consequent, alternate);
    }
  }, {
    key: 'reduceContinueStatement',
    value: function reduceContinueStatement(node) {
      return this.identity;
    }
  }, {
    key: 'reduceDataProperty',
    value: function reduceDataProperty(node, _ref26) {
      var name = _ref26.name,
          expression = _ref26.expression;

      return this.append(name, expression);
    }
  }, {
    key: 'reduceDebuggerStatement',
    value: function reduceDebuggerStatement(node) {
      return this.identity;
    }
  }, {
    key: 'reduceDirective',
    value: function reduceDirective(node) {
      return this.identity;
    }
  }, {
    key: 'reduceDoWhileStatement',
    value: function reduceDoWhileStatement(node, _ref27) {
      var body = _ref27.body,
          test = _ref27.test;

      return this.append(body, test);
    }
  }, {
    key: 'reduceEmptyStatement',
    value: function reduceEmptyStatement(node) {
      return this.identity;
    }
  }, {
    key: 'reduceExport',
    value: function reduceExport(node, _ref28) {
      var declaration = _ref28.declaration;

      return declaration;
    }
  }, {
    key: 'reduceExportAllFrom',
    value: function reduceExportAllFrom(node) {
      return this.identity;
    }
  }, {
    key: 'reduceExportDefault',
    value: function reduceExportDefault(node, _ref29) {
      var body = _ref29.body;

      return body;
    }
  }, {
    key: 'reduceExportFrom',
    value: function reduceExportFrom(node, _ref30) {
      var namedExports = _ref30.namedExports;

      return this.append.apply(this, _toConsumableArray$7(namedExports));
    }
  }, {
    key: 'reduceExportFromSpecifier',
    value: function reduceExportFromSpecifier(node) {
      return this.identity;
    }
  }, {
    key: 'reduceExportLocalSpecifier',
    value: function reduceExportLocalSpecifier(node, _ref31) {
      var name = _ref31.name;

      return name;
    }
  }, {
    key: 'reduceExportLocals',
    value: function reduceExportLocals(node, _ref32) {
      var namedExports = _ref32.namedExports;

      return this.append.apply(this, _toConsumableArray$7(namedExports));
    }
  }, {
    key: 'reduceExpressionStatement',
    value: function reduceExpressionStatement(node, _ref33) {
      var expression = _ref33.expression;

      return expression;
    }
  }, {
    key: 'reduceForAwaitStatement',
    value: function reduceForAwaitStatement(node, _ref34) {
      var left = _ref34.left,
          right = _ref34.right,
          body = _ref34.body;

      return this.append(left, right, body);
    }
  }, {
    key: 'reduceForInStatement',
    value: function reduceForInStatement(node, _ref35) {
      var left = _ref35.left,
          right = _ref35.right,
          body = _ref35.body;

      return this.append(left, right, body);
    }
  }, {
    key: 'reduceForOfStatement',
    value: function reduceForOfStatement(node, _ref36) {
      var left = _ref36.left,
          right = _ref36.right,
          body = _ref36.body;

      return this.append(left, right, body);
    }
  }, {
    key: 'reduceForStatement',
    value: function reduceForStatement(node, _ref37) {
      var init = _ref37.init,
          test = _ref37.test,
          update = _ref37.update,
          body = _ref37.body;

      return this.append(init == null ? this.identity : init, test == null ? this.identity : test, update == null ? this.identity : update, body);
    }
  }, {
    key: 'reduceFormalParameters',
    value: function reduceFormalParameters(node, _ref38) {
      var items = _ref38.items,
          rest = _ref38.rest;

      return this.append.apply(this, _toConsumableArray$7(items).concat([rest == null ? this.identity : rest]));
    }
  }, {
    key: 'reduceFunctionBody',
    value: function reduceFunctionBody(node, _ref39) {
      var directives = _ref39.directives,
          statements = _ref39.statements;

      return this.append.apply(this, _toConsumableArray$7(directives).concat(_toConsumableArray$7(statements)));
    }
  }, {
    key: 'reduceFunctionDeclaration',
    value: function reduceFunctionDeclaration(node, _ref40) {
      var name = _ref40.name,
          params = _ref40.params,
          body = _ref40.body;

      return this.append(name, params, body);
    }
  }, {
    key: 'reduceFunctionExpression',
    value: function reduceFunctionExpression(node, _ref41) {
      var name = _ref41.name,
          params = _ref41.params,
          body = _ref41.body;

      return this.append(name == null ? this.identity : name, params, body);
    }
  }, {
    key: 'reduceGetter',
    value: function reduceGetter(node, _ref42) {
      var name = _ref42.name,
          body = _ref42.body;

      return this.append(name, body);
    }
  }, {
    key: 'reduceIdentifierExpression',
    value: function reduceIdentifierExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceIfStatement',
    value: function reduceIfStatement(node, _ref43) {
      var test = _ref43.test,
          consequent = _ref43.consequent,
          alternate = _ref43.alternate;

      return this.append(test, consequent, alternate == null ? this.identity : alternate);
    }
  }, {
    key: 'reduceImport',
    value: function reduceImport(node, _ref44) {
      var defaultBinding = _ref44.defaultBinding,
          namedImports = _ref44.namedImports;

      return this.append.apply(this, [defaultBinding == null ? this.identity : defaultBinding].concat(_toConsumableArray$7(namedImports)));
    }
  }, {
    key: 'reduceImportNamespace',
    value: function reduceImportNamespace(node, _ref45) {
      var defaultBinding = _ref45.defaultBinding,
          namespaceBinding = _ref45.namespaceBinding;

      return this.append(defaultBinding == null ? this.identity : defaultBinding, namespaceBinding);
    }
  }, {
    key: 'reduceImportSpecifier',
    value: function reduceImportSpecifier(node, _ref46) {
      var binding = _ref46.binding;

      return binding;
    }
  }, {
    key: 'reduceLabeledStatement',
    value: function reduceLabeledStatement(node, _ref47) {
      var body = _ref47.body;

      return body;
    }
  }, {
    key: 'reduceLiteralBooleanExpression',
    value: function reduceLiteralBooleanExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceLiteralInfinityExpression',
    value: function reduceLiteralInfinityExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceLiteralNullExpression',
    value: function reduceLiteralNullExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceLiteralNumericExpression',
    value: function reduceLiteralNumericExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceLiteralRegExpExpression',
    value: function reduceLiteralRegExpExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceLiteralStringExpression',
    value: function reduceLiteralStringExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceMethod',
    value: function reduceMethod(node, _ref48) {
      var name = _ref48.name,
          params = _ref48.params,
          body = _ref48.body;

      return this.append(name, params, body);
    }
  }, {
    key: 'reduceModule',
    value: function reduceModule(node, _ref49) {
      var directives = _ref49.directives,
          items = _ref49.items;

      return this.append.apply(this, _toConsumableArray$7(directives).concat(_toConsumableArray$7(items)));
    }
  }, {
    key: 'reduceNewExpression',
    value: function reduceNewExpression(node, _ref50) {
      var callee = _ref50.callee,
          _arguments = _ref50.arguments;

      return this.append.apply(this, [callee].concat(_toConsumableArray$7(_arguments)));
    }
  }, {
    key: 'reduceNewTargetExpression',
    value: function reduceNewTargetExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceObjectAssignmentTarget',
    value: function reduceObjectAssignmentTarget(node, _ref51) {
      var properties = _ref51.properties,
          rest = _ref51.rest;

      return this.append.apply(this, _toConsumableArray$7(properties).concat([rest == null ? this.identity : rest]));
    }
  }, {
    key: 'reduceObjectBinding',
    value: function reduceObjectBinding(node, _ref52) {
      var properties = _ref52.properties,
          rest = _ref52.rest;

      return this.append.apply(this, _toConsumableArray$7(properties).concat([rest == null ? this.identity : rest]));
    }
  }, {
    key: 'reduceObjectExpression',
    value: function reduceObjectExpression(node, _ref53) {
      var properties = _ref53.properties;

      return this.append.apply(this, _toConsumableArray$7(properties));
    }
  }, {
    key: 'reduceReturnStatement',
    value: function reduceReturnStatement(node, _ref54) {
      var expression = _ref54.expression;

      return expression == null ? this.identity : expression;
    }
  }, {
    key: 'reduceScript',
    value: function reduceScript(node, _ref55) {
      var directives = _ref55.directives,
          statements = _ref55.statements;

      return this.append.apply(this, _toConsumableArray$7(directives).concat(_toConsumableArray$7(statements)));
    }
  }, {
    key: 'reduceSetter',
    value: function reduceSetter(node, _ref56) {
      var name = _ref56.name,
          param = _ref56.param,
          body = _ref56.body;

      return this.append(name, param, body);
    }
  }, {
    key: 'reduceShorthandProperty',
    value: function reduceShorthandProperty(node, _ref57) {
      var name = _ref57.name;

      return name;
    }
  }, {
    key: 'reduceSpreadElement',
    value: function reduceSpreadElement(node, _ref58) {
      var expression = _ref58.expression;

      return expression;
    }
  }, {
    key: 'reduceSpreadProperty',
    value: function reduceSpreadProperty(node, _ref59) {
      var expression = _ref59.expression;

      return expression;
    }
  }, {
    key: 'reduceStaticMemberAssignmentTarget',
    value: function reduceStaticMemberAssignmentTarget(node, _ref60) {
      var object = _ref60.object;

      return object;
    }
  }, {
    key: 'reduceStaticMemberExpression',
    value: function reduceStaticMemberExpression(node, _ref61) {
      var object = _ref61.object;

      return object;
    }
  }, {
    key: 'reduceStaticPropertyName',
    value: function reduceStaticPropertyName(node) {
      return this.identity;
    }
  }, {
    key: 'reduceSuper',
    value: function reduceSuper(node) {
      return this.identity;
    }
  }, {
    key: 'reduceSwitchCase',
    value: function reduceSwitchCase(node, _ref62) {
      var test = _ref62.test,
          consequent = _ref62.consequent;

      return this.append.apply(this, [test].concat(_toConsumableArray$7(consequent)));
    }
  }, {
    key: 'reduceSwitchDefault',
    value: function reduceSwitchDefault(node, _ref63) {
      var consequent = _ref63.consequent;

      return this.append.apply(this, _toConsumableArray$7(consequent));
    }
  }, {
    key: 'reduceSwitchStatement',
    value: function reduceSwitchStatement(node, _ref64) {
      var discriminant = _ref64.discriminant,
          cases = _ref64.cases;

      return this.append.apply(this, [discriminant].concat(_toConsumableArray$7(cases)));
    }
  }, {
    key: 'reduceSwitchStatementWithDefault',
    value: function reduceSwitchStatementWithDefault(node, _ref65) {
      var discriminant = _ref65.discriminant,
          preDefaultCases = _ref65.preDefaultCases,
          defaultCase = _ref65.defaultCase,
          postDefaultCases = _ref65.postDefaultCases;

      return this.append.apply(this, [discriminant].concat(_toConsumableArray$7(preDefaultCases), [defaultCase], _toConsumableArray$7(postDefaultCases)));
    }
  }, {
    key: 'reduceTemplateElement',
    value: function reduceTemplateElement(node) {
      return this.identity;
    }
  }, {
    key: 'reduceTemplateExpression',
    value: function reduceTemplateExpression(node, _ref66) {
      var tag = _ref66.tag,
          elements = _ref66.elements;

      return this.append.apply(this, [tag == null ? this.identity : tag].concat(_toConsumableArray$7(elements)));
    }
  }, {
    key: 'reduceThisExpression',
    value: function reduceThisExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceThrowStatement',
    value: function reduceThrowStatement(node, _ref67) {
      var expression = _ref67.expression;

      return expression;
    }
  }, {
    key: 'reduceTryCatchStatement',
    value: function reduceTryCatchStatement(node, _ref68) {
      var body = _ref68.body,
          catchClause = _ref68.catchClause;

      return this.append(body, catchClause);
    }
  }, {
    key: 'reduceTryFinallyStatement',
    value: function reduceTryFinallyStatement(node, _ref69) {
      var body = _ref69.body,
          catchClause = _ref69.catchClause,
          finalizer = _ref69.finalizer;

      return this.append(body, catchClause == null ? this.identity : catchClause, finalizer);
    }
  }, {
    key: 'reduceUnaryExpression',
    value: function reduceUnaryExpression(node, _ref70) {
      var operand = _ref70.operand;

      return operand;
    }
  }, {
    key: 'reduceUpdateExpression',
    value: function reduceUpdateExpression(node, _ref71) {
      var operand = _ref71.operand;

      return operand;
    }
  }, {
    key: 'reduceVariableDeclaration',
    value: function reduceVariableDeclaration(node, _ref72) {
      var declarators = _ref72.declarators;

      return this.append.apply(this, _toConsumableArray$7(declarators));
    }
  }, {
    key: 'reduceVariableDeclarationStatement',
    value: function reduceVariableDeclarationStatement(node, _ref73) {
      var declaration = _ref73.declaration;

      return declaration;
    }
  }, {
    key: 'reduceVariableDeclarator',
    value: function reduceVariableDeclarator(node, _ref74) {
      var binding = _ref74.binding,
          init = _ref74.init;

      return this.append(binding, init == null ? this.identity : init);
    }
  }, {
    key: 'reduceWhileStatement',
    value: function reduceWhileStatement(node, _ref75) {
      var test = _ref75.test,
          body = _ref75.body;

      return this.append(test, body);
    }
  }, {
    key: 'reduceWithStatement',
    value: function reduceWithStatement(node, _ref76) {
      var object = _ref76.object,
          body = _ref76.body;

      return this.append(object, body);
    }
  }, {
    key: 'reduceYieldExpression',
    value: function reduceYieldExpression(node, _ref77) {
      var expression = _ref77.expression;

      return expression == null ? this.identity : expression;
    }
  }, {
    key: 'reduceYieldGeneratorExpression',
    value: function reduceYieldGeneratorExpression(node, _ref78) {
      var expression = _ref78.expression;

      return expression;
    }
  }]);

  return MonoidalReducer;
}();

monoidalReducer.default = MonoidalReducer$1;

var thunkedMonoidalReducer = {};

Object.defineProperty(thunkedMonoidalReducer, "__esModule", {
  value: true
});

var _createClass$7 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Generated by generate-monoidal-reducer.js
/**
 * Copyright 2018 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var _shiftAst$1 = dist$4;

_interopRequireDefault$d(_shiftAst$1);

function _interopRequireDefault$d(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray$6(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck$9(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MonoidalReducer = function () {
  function MonoidalReducer(monoid) {
    _classCallCheck$9(this, MonoidalReducer);

    var identity = monoid.empty();
    this.identity = identity;

    var concatThunk = void 0;
    if (monoid.prototype && typeof monoid.prototype.concatThunk === 'function') {
      concatThunk = Function.prototype.call.bind(monoid.prototype.concatThunk);
    } else if (typeof monoid.concatThunk === 'function') {
      concatThunk = monoid.concatThunk;
    } else {
      var concat = void 0;
      if (monoid.prototype && typeof monoid.prototype.concat === 'function') {
        concat = Function.prototype.call.bind(monoid.prototype.concat);
      } else if (typeof monoid.concat === 'function') {
        concat = monoid.concat;
      } else {
        throw new TypeError('Monoid must provide a `concatThunk` or `concat` method');
      }
      if (typeof monoid.isAbsorbing === 'function') {
        var isAbsorbing = monoid.isAbsorbing;
        concatThunk = function concatThunk(a, b) {
          return isAbsorbing(a) ? a : concat(a, b());
        };
      } else {
        concatThunk = function concatThunk(a, b) {
          return concat(a, b());
        };
      }
    }
    this.append = function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return args.reduce(concatThunk, identity);
    };
  }

  _createClass$7(MonoidalReducer, [{
    key: 'reduceArrayAssignmentTarget',
    value: function reduceArrayAssignmentTarget(node, _ref) {
      var _this = this;

      var elements = _ref.elements,
          rest = _ref.rest;

      return this.append.apply(this, _toConsumableArray$6(elements.filter(function (n) {
        return n != null;
      })).concat([rest == null ? function () {
        return _this.identity;
      } : rest]));
    }
  }, {
    key: 'reduceArrayBinding',
    value: function reduceArrayBinding(node, _ref2) {
      var _this2 = this;

      var elements = _ref2.elements,
          rest = _ref2.rest;

      return this.append.apply(this, _toConsumableArray$6(elements.filter(function (n) {
        return n != null;
      })).concat([rest == null ? function () {
        return _this2.identity;
      } : rest]));
    }
  }, {
    key: 'reduceArrayExpression',
    value: function reduceArrayExpression(node, _ref3) {
      var elements = _ref3.elements;

      return this.append.apply(this, _toConsumableArray$6(elements.filter(function (n) {
        return n != null;
      })));
    }
  }, {
    key: 'reduceArrowExpression',
    value: function reduceArrowExpression(node, _ref4) {
      var params = _ref4.params,
          body = _ref4.body;

      return this.append(params, body);
    }
  }, {
    key: 'reduceAssignmentExpression',
    value: function reduceAssignmentExpression(node, _ref5) {
      var binding = _ref5.binding,
          expression = _ref5.expression;

      return this.append(binding, expression);
    }
  }, {
    key: 'reduceAssignmentTargetIdentifier',
    value: function reduceAssignmentTargetIdentifier(node) {
      return this.identity;
    }
  }, {
    key: 'reduceAssignmentTargetPropertyIdentifier',
    value: function reduceAssignmentTargetPropertyIdentifier(node, _ref6) {
      var _this3 = this;

      var binding = _ref6.binding,
          init = _ref6.init;

      return this.append(binding, init == null ? function () {
        return _this3.identity;
      } : init);
    }
  }, {
    key: 'reduceAssignmentTargetPropertyProperty',
    value: function reduceAssignmentTargetPropertyProperty(node, _ref7) {
      var name = _ref7.name,
          binding = _ref7.binding;

      return this.append(name, binding);
    }
  }, {
    key: 'reduceAssignmentTargetWithDefault',
    value: function reduceAssignmentTargetWithDefault(node, _ref8) {
      var binding = _ref8.binding,
          init = _ref8.init;

      return this.append(binding, init);
    }
  }, {
    key: 'reduceAwaitExpression',
    value: function reduceAwaitExpression(node, _ref9) {
      var expression = _ref9.expression;

      return expression();
    }
  }, {
    key: 'reduceBinaryExpression',
    value: function reduceBinaryExpression(node, _ref10) {
      var left = _ref10.left,
          right = _ref10.right;

      return this.append(left, right);
    }
  }, {
    key: 'reduceBindingIdentifier',
    value: function reduceBindingIdentifier(node) {
      return this.identity;
    }
  }, {
    key: 'reduceBindingPropertyIdentifier',
    value: function reduceBindingPropertyIdentifier(node, _ref11) {
      var _this4 = this;

      var binding = _ref11.binding,
          init = _ref11.init;

      return this.append(binding, init == null ? function () {
        return _this4.identity;
      } : init);
    }
  }, {
    key: 'reduceBindingPropertyProperty',
    value: function reduceBindingPropertyProperty(node, _ref12) {
      var name = _ref12.name,
          binding = _ref12.binding;

      return this.append(name, binding);
    }
  }, {
    key: 'reduceBindingWithDefault',
    value: function reduceBindingWithDefault(node, _ref13) {
      var binding = _ref13.binding,
          init = _ref13.init;

      return this.append(binding, init);
    }
  }, {
    key: 'reduceBlock',
    value: function reduceBlock(node, _ref14) {
      var statements = _ref14.statements;

      return this.append.apply(this, _toConsumableArray$6(statements));
    }
  }, {
    key: 'reduceBlockStatement',
    value: function reduceBlockStatement(node, _ref15) {
      var block = _ref15.block;

      return block();
    }
  }, {
    key: 'reduceBreakStatement',
    value: function reduceBreakStatement(node) {
      return this.identity;
    }
  }, {
    key: 'reduceCallExpression',
    value: function reduceCallExpression(node, _ref16) {
      var callee = _ref16.callee,
          _arguments = _ref16.arguments;

      return this.append.apply(this, [callee].concat(_toConsumableArray$6(_arguments)));
    }
  }, {
    key: 'reduceCatchClause',
    value: function reduceCatchClause(node, _ref17) {
      var binding = _ref17.binding,
          body = _ref17.body;

      return this.append(binding, body);
    }
  }, {
    key: 'reduceClassDeclaration',
    value: function reduceClassDeclaration(node, _ref18) {
      var _this5 = this;

      var name = _ref18.name,
          _super = _ref18.super,
          elements = _ref18.elements;

      return this.append.apply(this, [name, _super == null ? function () {
        return _this5.identity;
      } : _super].concat(_toConsumableArray$6(elements)));
    }
  }, {
    key: 'reduceClassElement',
    value: function reduceClassElement(node, _ref19) {
      var method = _ref19.method;

      return method();
    }
  }, {
    key: 'reduceClassExpression',
    value: function reduceClassExpression(node, _ref20) {
      var _this6 = this;

      var name = _ref20.name,
          _super = _ref20.super,
          elements = _ref20.elements;

      return this.append.apply(this, [name == null ? function () {
        return _this6.identity;
      } : name, _super == null ? function () {
        return _this6.identity;
      } : _super].concat(_toConsumableArray$6(elements)));
    }
  }, {
    key: 'reduceCompoundAssignmentExpression',
    value: function reduceCompoundAssignmentExpression(node, _ref21) {
      var binding = _ref21.binding,
          expression = _ref21.expression;

      return this.append(binding, expression);
    }
  }, {
    key: 'reduceComputedMemberAssignmentTarget',
    value: function reduceComputedMemberAssignmentTarget(node, _ref22) {
      var object = _ref22.object,
          expression = _ref22.expression;

      return this.append(object, expression);
    }
  }, {
    key: 'reduceComputedMemberExpression',
    value: function reduceComputedMemberExpression(node, _ref23) {
      var object = _ref23.object,
          expression = _ref23.expression;

      return this.append(object, expression);
    }
  }, {
    key: 'reduceComputedPropertyName',
    value: function reduceComputedPropertyName(node, _ref24) {
      var expression = _ref24.expression;

      return expression();
    }
  }, {
    key: 'reduceConditionalExpression',
    value: function reduceConditionalExpression(node, _ref25) {
      var test = _ref25.test,
          consequent = _ref25.consequent,
          alternate = _ref25.alternate;

      return this.append(test, consequent, alternate);
    }
  }, {
    key: 'reduceContinueStatement',
    value: function reduceContinueStatement(node) {
      return this.identity;
    }
  }, {
    key: 'reduceDataProperty',
    value: function reduceDataProperty(node, _ref26) {
      var name = _ref26.name,
          expression = _ref26.expression;

      return this.append(name, expression);
    }
  }, {
    key: 'reduceDebuggerStatement',
    value: function reduceDebuggerStatement(node) {
      return this.identity;
    }
  }, {
    key: 'reduceDirective',
    value: function reduceDirective(node) {
      return this.identity;
    }
  }, {
    key: 'reduceDoWhileStatement',
    value: function reduceDoWhileStatement(node, _ref27) {
      var body = _ref27.body,
          test = _ref27.test;

      return this.append(body, test);
    }
  }, {
    key: 'reduceEmptyStatement',
    value: function reduceEmptyStatement(node) {
      return this.identity;
    }
  }, {
    key: 'reduceExport',
    value: function reduceExport(node, _ref28) {
      var declaration = _ref28.declaration;

      return declaration();
    }
  }, {
    key: 'reduceExportAllFrom',
    value: function reduceExportAllFrom(node) {
      return this.identity;
    }
  }, {
    key: 'reduceExportDefault',
    value: function reduceExportDefault(node, _ref29) {
      var body = _ref29.body;

      return body();
    }
  }, {
    key: 'reduceExportFrom',
    value: function reduceExportFrom(node, _ref30) {
      var namedExports = _ref30.namedExports;

      return this.append.apply(this, _toConsumableArray$6(namedExports));
    }
  }, {
    key: 'reduceExportFromSpecifier',
    value: function reduceExportFromSpecifier(node) {
      return this.identity;
    }
  }, {
    key: 'reduceExportLocalSpecifier',
    value: function reduceExportLocalSpecifier(node, _ref31) {
      var name = _ref31.name;

      return name();
    }
  }, {
    key: 'reduceExportLocals',
    value: function reduceExportLocals(node, _ref32) {
      var namedExports = _ref32.namedExports;

      return this.append.apply(this, _toConsumableArray$6(namedExports));
    }
  }, {
    key: 'reduceExpressionStatement',
    value: function reduceExpressionStatement(node, _ref33) {
      var expression = _ref33.expression;

      return expression();
    }
  }, {
    key: 'reduceForAwaitStatement',
    value: function reduceForAwaitStatement(node, _ref34) {
      var left = _ref34.left,
          right = _ref34.right,
          body = _ref34.body;

      return this.append(left, right, body);
    }
  }, {
    key: 'reduceForInStatement',
    value: function reduceForInStatement(node, _ref35) {
      var left = _ref35.left,
          right = _ref35.right,
          body = _ref35.body;

      return this.append(left, right, body);
    }
  }, {
    key: 'reduceForOfStatement',
    value: function reduceForOfStatement(node, _ref36) {
      var left = _ref36.left,
          right = _ref36.right,
          body = _ref36.body;

      return this.append(left, right, body);
    }
  }, {
    key: 'reduceForStatement',
    value: function reduceForStatement(node, _ref37) {
      var _this7 = this;

      var init = _ref37.init,
          test = _ref37.test,
          update = _ref37.update,
          body = _ref37.body;

      return this.append(init == null ? function () {
        return _this7.identity;
      } : init, test == null ? function () {
        return _this7.identity;
      } : test, update == null ? function () {
        return _this7.identity;
      } : update, body);
    }
  }, {
    key: 'reduceFormalParameters',
    value: function reduceFormalParameters(node, _ref38) {
      var _this8 = this;

      var items = _ref38.items,
          rest = _ref38.rest;

      return this.append.apply(this, _toConsumableArray$6(items).concat([rest == null ? function () {
        return _this8.identity;
      } : rest]));
    }
  }, {
    key: 'reduceFunctionBody',
    value: function reduceFunctionBody(node, _ref39) {
      var directives = _ref39.directives,
          statements = _ref39.statements;

      return this.append.apply(this, _toConsumableArray$6(directives).concat(_toConsumableArray$6(statements)));
    }
  }, {
    key: 'reduceFunctionDeclaration',
    value: function reduceFunctionDeclaration(node, _ref40) {
      var name = _ref40.name,
          params = _ref40.params,
          body = _ref40.body;

      return this.append(name, params, body);
    }
  }, {
    key: 'reduceFunctionExpression',
    value: function reduceFunctionExpression(node, _ref41) {
      var _this9 = this;

      var name = _ref41.name,
          params = _ref41.params,
          body = _ref41.body;

      return this.append(name == null ? function () {
        return _this9.identity;
      } : name, params, body);
    }
  }, {
    key: 'reduceGetter',
    value: function reduceGetter(node, _ref42) {
      var name = _ref42.name,
          body = _ref42.body;

      return this.append(name, body);
    }
  }, {
    key: 'reduceIdentifierExpression',
    value: function reduceIdentifierExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceIfStatement',
    value: function reduceIfStatement(node, _ref43) {
      var _this10 = this;

      var test = _ref43.test,
          consequent = _ref43.consequent,
          alternate = _ref43.alternate;

      return this.append(test, consequent, alternate == null ? function () {
        return _this10.identity;
      } : alternate);
    }
  }, {
    key: 'reduceImport',
    value: function reduceImport(node, _ref44) {
      var _this11 = this;

      var defaultBinding = _ref44.defaultBinding,
          namedImports = _ref44.namedImports;

      return this.append.apply(this, [defaultBinding == null ? function () {
        return _this11.identity;
      } : defaultBinding].concat(_toConsumableArray$6(namedImports)));
    }
  }, {
    key: 'reduceImportNamespace',
    value: function reduceImportNamespace(node, _ref45) {
      var _this12 = this;

      var defaultBinding = _ref45.defaultBinding,
          namespaceBinding = _ref45.namespaceBinding;

      return this.append(defaultBinding == null ? function () {
        return _this12.identity;
      } : defaultBinding, namespaceBinding);
    }
  }, {
    key: 'reduceImportSpecifier',
    value: function reduceImportSpecifier(node, _ref46) {
      var binding = _ref46.binding;

      return binding();
    }
  }, {
    key: 'reduceLabeledStatement',
    value: function reduceLabeledStatement(node, _ref47) {
      var body = _ref47.body;

      return body();
    }
  }, {
    key: 'reduceLiteralBooleanExpression',
    value: function reduceLiteralBooleanExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceLiteralInfinityExpression',
    value: function reduceLiteralInfinityExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceLiteralNullExpression',
    value: function reduceLiteralNullExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceLiteralNumericExpression',
    value: function reduceLiteralNumericExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceLiteralRegExpExpression',
    value: function reduceLiteralRegExpExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceLiteralStringExpression',
    value: function reduceLiteralStringExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceMethod',
    value: function reduceMethod(node, _ref48) {
      var name = _ref48.name,
          params = _ref48.params,
          body = _ref48.body;

      return this.append(name, params, body);
    }
  }, {
    key: 'reduceModule',
    value: function reduceModule(node, _ref49) {
      var directives = _ref49.directives,
          items = _ref49.items;

      return this.append.apply(this, _toConsumableArray$6(directives).concat(_toConsumableArray$6(items)));
    }
  }, {
    key: 'reduceNewExpression',
    value: function reduceNewExpression(node, _ref50) {
      var callee = _ref50.callee,
          _arguments = _ref50.arguments;

      return this.append.apply(this, [callee].concat(_toConsumableArray$6(_arguments)));
    }
  }, {
    key: 'reduceNewTargetExpression',
    value: function reduceNewTargetExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceObjectAssignmentTarget',
    value: function reduceObjectAssignmentTarget(node, _ref51) {
      var _this13 = this;

      var properties = _ref51.properties,
          rest = _ref51.rest;

      return this.append.apply(this, _toConsumableArray$6(properties).concat([rest == null ? function () {
        return _this13.identity;
      } : rest]));
    }
  }, {
    key: 'reduceObjectBinding',
    value: function reduceObjectBinding(node, _ref52) {
      var _this14 = this;

      var properties = _ref52.properties,
          rest = _ref52.rest;

      return this.append.apply(this, _toConsumableArray$6(properties).concat([rest == null ? function () {
        return _this14.identity;
      } : rest]));
    }
  }, {
    key: 'reduceObjectExpression',
    value: function reduceObjectExpression(node, _ref53) {
      var properties = _ref53.properties;

      return this.append.apply(this, _toConsumableArray$6(properties));
    }
  }, {
    key: 'reduceReturnStatement',
    value: function reduceReturnStatement(node, _ref54) {
      var expression = _ref54.expression;

      return expression == null ? this.identity : expression();
    }
  }, {
    key: 'reduceScript',
    value: function reduceScript(node, _ref55) {
      var directives = _ref55.directives,
          statements = _ref55.statements;

      return this.append.apply(this, _toConsumableArray$6(directives).concat(_toConsumableArray$6(statements)));
    }
  }, {
    key: 'reduceSetter',
    value: function reduceSetter(node, _ref56) {
      var name = _ref56.name,
          param = _ref56.param,
          body = _ref56.body;

      return this.append(name, param, body);
    }
  }, {
    key: 'reduceShorthandProperty',
    value: function reduceShorthandProperty(node, _ref57) {
      var name = _ref57.name;

      return name();
    }
  }, {
    key: 'reduceSpreadElement',
    value: function reduceSpreadElement(node, _ref58) {
      var expression = _ref58.expression;

      return expression();
    }
  }, {
    key: 'reduceSpreadProperty',
    value: function reduceSpreadProperty(node, _ref59) {
      var expression = _ref59.expression;

      return expression();
    }
  }, {
    key: 'reduceStaticMemberAssignmentTarget',
    value: function reduceStaticMemberAssignmentTarget(node, _ref60) {
      var object = _ref60.object;

      return object();
    }
  }, {
    key: 'reduceStaticMemberExpression',
    value: function reduceStaticMemberExpression(node, _ref61) {
      var object = _ref61.object;

      return object();
    }
  }, {
    key: 'reduceStaticPropertyName',
    value: function reduceStaticPropertyName(node) {
      return this.identity;
    }
  }, {
    key: 'reduceSuper',
    value: function reduceSuper(node) {
      return this.identity;
    }
  }, {
    key: 'reduceSwitchCase',
    value: function reduceSwitchCase(node, _ref62) {
      var test = _ref62.test,
          consequent = _ref62.consequent;

      return this.append.apply(this, [test].concat(_toConsumableArray$6(consequent)));
    }
  }, {
    key: 'reduceSwitchDefault',
    value: function reduceSwitchDefault(node, _ref63) {
      var consequent = _ref63.consequent;

      return this.append.apply(this, _toConsumableArray$6(consequent));
    }
  }, {
    key: 'reduceSwitchStatement',
    value: function reduceSwitchStatement(node, _ref64) {
      var discriminant = _ref64.discriminant,
          cases = _ref64.cases;

      return this.append.apply(this, [discriminant].concat(_toConsumableArray$6(cases)));
    }
  }, {
    key: 'reduceSwitchStatementWithDefault',
    value: function reduceSwitchStatementWithDefault(node, _ref65) {
      var discriminant = _ref65.discriminant,
          preDefaultCases = _ref65.preDefaultCases,
          defaultCase = _ref65.defaultCase,
          postDefaultCases = _ref65.postDefaultCases;

      return this.append.apply(this, [discriminant].concat(_toConsumableArray$6(preDefaultCases), [defaultCase], _toConsumableArray$6(postDefaultCases)));
    }
  }, {
    key: 'reduceTemplateElement',
    value: function reduceTemplateElement(node) {
      return this.identity;
    }
  }, {
    key: 'reduceTemplateExpression',
    value: function reduceTemplateExpression(node, _ref66) {
      var _this15 = this;

      var tag = _ref66.tag,
          elements = _ref66.elements;

      return this.append.apply(this, [tag == null ? function () {
        return _this15.identity;
      } : tag].concat(_toConsumableArray$6(elements)));
    }
  }, {
    key: 'reduceThisExpression',
    value: function reduceThisExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceThrowStatement',
    value: function reduceThrowStatement(node, _ref67) {
      var expression = _ref67.expression;

      return expression();
    }
  }, {
    key: 'reduceTryCatchStatement',
    value: function reduceTryCatchStatement(node, _ref68) {
      var body = _ref68.body,
          catchClause = _ref68.catchClause;

      return this.append(body, catchClause);
    }
  }, {
    key: 'reduceTryFinallyStatement',
    value: function reduceTryFinallyStatement(node, _ref69) {
      var _this16 = this;

      var body = _ref69.body,
          catchClause = _ref69.catchClause,
          finalizer = _ref69.finalizer;

      return this.append(body, catchClause == null ? function () {
        return _this16.identity;
      } : catchClause, finalizer);
    }
  }, {
    key: 'reduceUnaryExpression',
    value: function reduceUnaryExpression(node, _ref70) {
      var operand = _ref70.operand;

      return operand();
    }
  }, {
    key: 'reduceUpdateExpression',
    value: function reduceUpdateExpression(node, _ref71) {
      var operand = _ref71.operand;

      return operand();
    }
  }, {
    key: 'reduceVariableDeclaration',
    value: function reduceVariableDeclaration(node, _ref72) {
      var declarators = _ref72.declarators;

      return this.append.apply(this, _toConsumableArray$6(declarators));
    }
  }, {
    key: 'reduceVariableDeclarationStatement',
    value: function reduceVariableDeclarationStatement(node, _ref73) {
      var declaration = _ref73.declaration;

      return declaration();
    }
  }, {
    key: 'reduceVariableDeclarator',
    value: function reduceVariableDeclarator(node, _ref74) {
      var _this17 = this;

      var binding = _ref74.binding,
          init = _ref74.init;

      return this.append(binding, init == null ? function () {
        return _this17.identity;
      } : init);
    }
  }, {
    key: 'reduceWhileStatement',
    value: function reduceWhileStatement(node, _ref75) {
      var test = _ref75.test,
          body = _ref75.body;

      return this.append(test, body);
    }
  }, {
    key: 'reduceWithStatement',
    value: function reduceWithStatement(node, _ref76) {
      var object = _ref76.object,
          body = _ref76.body;

      return this.append(object, body);
    }
  }, {
    key: 'reduceYieldExpression',
    value: function reduceYieldExpression(node, _ref77) {
      var expression = _ref77.expression;

      return expression == null ? this.identity : expression();
    }
  }, {
    key: 'reduceYieldGeneratorExpression',
    value: function reduceYieldGeneratorExpression(node, _ref78) {
      var expression = _ref78.expression;

      return expression();
    }
  }]);

  return MonoidalReducer;
}();

thunkedMonoidalReducer.default = MonoidalReducer;

var adapt = {};

Object.defineProperty(adapt, "__esModule", {
  value: true
});

var _get$2 = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } }; // Generated by generate-adapt.js
/**
 * Copyright 2018 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var _shiftAst = dist$4;

_interopRequireWildcard(_shiftAst);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

adapt.default = function (fn, reducer) {
  var _obj;

  return _obj = {
    __proto__: reducer,

    reduceArrayAssignmentTarget: function reduceArrayAssignmentTarget(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceArrayAssignmentTarget', this).call(this, node, data), node);
    },
    reduceArrayBinding: function reduceArrayBinding(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceArrayBinding', this).call(this, node, data), node);
    },
    reduceArrayExpression: function reduceArrayExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceArrayExpression', this).call(this, node, data), node);
    },
    reduceArrowExpression: function reduceArrowExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceArrowExpression', this).call(this, node, data), node);
    },
    reduceAssignmentExpression: function reduceAssignmentExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceAssignmentExpression', this).call(this, node, data), node);
    },
    reduceAssignmentTargetIdentifier: function reduceAssignmentTargetIdentifier(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceAssignmentTargetIdentifier', this).call(this, node, data), node);
    },
    reduceAssignmentTargetPropertyIdentifier: function reduceAssignmentTargetPropertyIdentifier(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceAssignmentTargetPropertyIdentifier', this).call(this, node, data), node);
    },
    reduceAssignmentTargetPropertyProperty: function reduceAssignmentTargetPropertyProperty(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceAssignmentTargetPropertyProperty', this).call(this, node, data), node);
    },
    reduceAssignmentTargetWithDefault: function reduceAssignmentTargetWithDefault(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceAssignmentTargetWithDefault', this).call(this, node, data), node);
    },
    reduceAwaitExpression: function reduceAwaitExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceAwaitExpression', this).call(this, node, data), node);
    },
    reduceBinaryExpression: function reduceBinaryExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceBinaryExpression', this).call(this, node, data), node);
    },
    reduceBindingIdentifier: function reduceBindingIdentifier(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceBindingIdentifier', this).call(this, node, data), node);
    },
    reduceBindingPropertyIdentifier: function reduceBindingPropertyIdentifier(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceBindingPropertyIdentifier', this).call(this, node, data), node);
    },
    reduceBindingPropertyProperty: function reduceBindingPropertyProperty(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceBindingPropertyProperty', this).call(this, node, data), node);
    },
    reduceBindingWithDefault: function reduceBindingWithDefault(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceBindingWithDefault', this).call(this, node, data), node);
    },
    reduceBlock: function reduceBlock(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceBlock', this).call(this, node, data), node);
    },
    reduceBlockStatement: function reduceBlockStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceBlockStatement', this).call(this, node, data), node);
    },
    reduceBreakStatement: function reduceBreakStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceBreakStatement', this).call(this, node, data), node);
    },
    reduceCallExpression: function reduceCallExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceCallExpression', this).call(this, node, data), node);
    },
    reduceCatchClause: function reduceCatchClause(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceCatchClause', this).call(this, node, data), node);
    },
    reduceClassDeclaration: function reduceClassDeclaration(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceClassDeclaration', this).call(this, node, data), node);
    },
    reduceClassElement: function reduceClassElement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceClassElement', this).call(this, node, data), node);
    },
    reduceClassExpression: function reduceClassExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceClassExpression', this).call(this, node, data), node);
    },
    reduceCompoundAssignmentExpression: function reduceCompoundAssignmentExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceCompoundAssignmentExpression', this).call(this, node, data), node);
    },
    reduceComputedMemberAssignmentTarget: function reduceComputedMemberAssignmentTarget(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceComputedMemberAssignmentTarget', this).call(this, node, data), node);
    },
    reduceComputedMemberExpression: function reduceComputedMemberExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceComputedMemberExpression', this).call(this, node, data), node);
    },
    reduceComputedPropertyName: function reduceComputedPropertyName(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceComputedPropertyName', this).call(this, node, data), node);
    },
    reduceConditionalExpression: function reduceConditionalExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceConditionalExpression', this).call(this, node, data), node);
    },
    reduceContinueStatement: function reduceContinueStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceContinueStatement', this).call(this, node, data), node);
    },
    reduceDataProperty: function reduceDataProperty(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceDataProperty', this).call(this, node, data), node);
    },
    reduceDebuggerStatement: function reduceDebuggerStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceDebuggerStatement', this).call(this, node, data), node);
    },
    reduceDirective: function reduceDirective(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceDirective', this).call(this, node, data), node);
    },
    reduceDoWhileStatement: function reduceDoWhileStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceDoWhileStatement', this).call(this, node, data), node);
    },
    reduceEmptyStatement: function reduceEmptyStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceEmptyStatement', this).call(this, node, data), node);
    },
    reduceExport: function reduceExport(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceExport', this).call(this, node, data), node);
    },
    reduceExportAllFrom: function reduceExportAllFrom(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceExportAllFrom', this).call(this, node, data), node);
    },
    reduceExportDefault: function reduceExportDefault(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceExportDefault', this).call(this, node, data), node);
    },
    reduceExportFrom: function reduceExportFrom(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceExportFrom', this).call(this, node, data), node);
    },
    reduceExportFromSpecifier: function reduceExportFromSpecifier(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceExportFromSpecifier', this).call(this, node, data), node);
    },
    reduceExportLocalSpecifier: function reduceExportLocalSpecifier(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceExportLocalSpecifier', this).call(this, node, data), node);
    },
    reduceExportLocals: function reduceExportLocals(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceExportLocals', this).call(this, node, data), node);
    },
    reduceExpressionStatement: function reduceExpressionStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceExpressionStatement', this).call(this, node, data), node);
    },
    reduceForAwaitStatement: function reduceForAwaitStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceForAwaitStatement', this).call(this, node, data), node);
    },
    reduceForInStatement: function reduceForInStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceForInStatement', this).call(this, node, data), node);
    },
    reduceForOfStatement: function reduceForOfStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceForOfStatement', this).call(this, node, data), node);
    },
    reduceForStatement: function reduceForStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceForStatement', this).call(this, node, data), node);
    },
    reduceFormalParameters: function reduceFormalParameters(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceFormalParameters', this).call(this, node, data), node);
    },
    reduceFunctionBody: function reduceFunctionBody(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceFunctionBody', this).call(this, node, data), node);
    },
    reduceFunctionDeclaration: function reduceFunctionDeclaration(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceFunctionDeclaration', this).call(this, node, data), node);
    },
    reduceFunctionExpression: function reduceFunctionExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceFunctionExpression', this).call(this, node, data), node);
    },
    reduceGetter: function reduceGetter(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceGetter', this).call(this, node, data), node);
    },
    reduceIdentifierExpression: function reduceIdentifierExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceIdentifierExpression', this).call(this, node, data), node);
    },
    reduceIfStatement: function reduceIfStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceIfStatement', this).call(this, node, data), node);
    },
    reduceImport: function reduceImport(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceImport', this).call(this, node, data), node);
    },
    reduceImportNamespace: function reduceImportNamespace(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceImportNamespace', this).call(this, node, data), node);
    },
    reduceImportSpecifier: function reduceImportSpecifier(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceImportSpecifier', this).call(this, node, data), node);
    },
    reduceLabeledStatement: function reduceLabeledStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceLabeledStatement', this).call(this, node, data), node);
    },
    reduceLiteralBooleanExpression: function reduceLiteralBooleanExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceLiteralBooleanExpression', this).call(this, node, data), node);
    },
    reduceLiteralInfinityExpression: function reduceLiteralInfinityExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceLiteralInfinityExpression', this).call(this, node, data), node);
    },
    reduceLiteralNullExpression: function reduceLiteralNullExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceLiteralNullExpression', this).call(this, node, data), node);
    },
    reduceLiteralNumericExpression: function reduceLiteralNumericExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceLiteralNumericExpression', this).call(this, node, data), node);
    },
    reduceLiteralRegExpExpression: function reduceLiteralRegExpExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceLiteralRegExpExpression', this).call(this, node, data), node);
    },
    reduceLiteralStringExpression: function reduceLiteralStringExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceLiteralStringExpression', this).call(this, node, data), node);
    },
    reduceMethod: function reduceMethod(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceMethod', this).call(this, node, data), node);
    },
    reduceModule: function reduceModule(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceModule', this).call(this, node, data), node);
    },
    reduceNewExpression: function reduceNewExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceNewExpression', this).call(this, node, data), node);
    },
    reduceNewTargetExpression: function reduceNewTargetExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceNewTargetExpression', this).call(this, node, data), node);
    },
    reduceObjectAssignmentTarget: function reduceObjectAssignmentTarget(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceObjectAssignmentTarget', this).call(this, node, data), node);
    },
    reduceObjectBinding: function reduceObjectBinding(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceObjectBinding', this).call(this, node, data), node);
    },
    reduceObjectExpression: function reduceObjectExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceObjectExpression', this).call(this, node, data), node);
    },
    reduceReturnStatement: function reduceReturnStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceReturnStatement', this).call(this, node, data), node);
    },
    reduceScript: function reduceScript(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceScript', this).call(this, node, data), node);
    },
    reduceSetter: function reduceSetter(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceSetter', this).call(this, node, data), node);
    },
    reduceShorthandProperty: function reduceShorthandProperty(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceShorthandProperty', this).call(this, node, data), node);
    },
    reduceSpreadElement: function reduceSpreadElement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceSpreadElement', this).call(this, node, data), node);
    },
    reduceSpreadProperty: function reduceSpreadProperty(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceSpreadProperty', this).call(this, node, data), node);
    },
    reduceStaticMemberAssignmentTarget: function reduceStaticMemberAssignmentTarget(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceStaticMemberAssignmentTarget', this).call(this, node, data), node);
    },
    reduceStaticMemberExpression: function reduceStaticMemberExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceStaticMemberExpression', this).call(this, node, data), node);
    },
    reduceStaticPropertyName: function reduceStaticPropertyName(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceStaticPropertyName', this).call(this, node, data), node);
    },
    reduceSuper: function reduceSuper(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceSuper', this).call(this, node, data), node);
    },
    reduceSwitchCase: function reduceSwitchCase(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceSwitchCase', this).call(this, node, data), node);
    },
    reduceSwitchDefault: function reduceSwitchDefault(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceSwitchDefault', this).call(this, node, data), node);
    },
    reduceSwitchStatement: function reduceSwitchStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceSwitchStatement', this).call(this, node, data), node);
    },
    reduceSwitchStatementWithDefault: function reduceSwitchStatementWithDefault(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceSwitchStatementWithDefault', this).call(this, node, data), node);
    },
    reduceTemplateElement: function reduceTemplateElement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceTemplateElement', this).call(this, node, data), node);
    },
    reduceTemplateExpression: function reduceTemplateExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceTemplateExpression', this).call(this, node, data), node);
    },
    reduceThisExpression: function reduceThisExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceThisExpression', this).call(this, node, data), node);
    },
    reduceThrowStatement: function reduceThrowStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceThrowStatement', this).call(this, node, data), node);
    },
    reduceTryCatchStatement: function reduceTryCatchStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceTryCatchStatement', this).call(this, node, data), node);
    },
    reduceTryFinallyStatement: function reduceTryFinallyStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceTryFinallyStatement', this).call(this, node, data), node);
    },
    reduceUnaryExpression: function reduceUnaryExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceUnaryExpression', this).call(this, node, data), node);
    },
    reduceUpdateExpression: function reduceUpdateExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceUpdateExpression', this).call(this, node, data), node);
    },
    reduceVariableDeclaration: function reduceVariableDeclaration(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceVariableDeclaration', this).call(this, node, data), node);
    },
    reduceVariableDeclarationStatement: function reduceVariableDeclarationStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceVariableDeclarationStatement', this).call(this, node, data), node);
    },
    reduceVariableDeclarator: function reduceVariableDeclarator(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceVariableDeclarator', this).call(this, node, data), node);
    },
    reduceWhileStatement: function reduceWhileStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceWhileStatement', this).call(this, node, data), node);
    },
    reduceWithStatement: function reduceWithStatement(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceWithStatement', this).call(this, node, data), node);
    },
    reduceYieldExpression: function reduceYieldExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceYieldExpression', this).call(this, node, data), node);
    },
    reduceYieldGeneratorExpression: function reduceYieldGeneratorExpression(node, data) {
      return fn(_get$2(_obj.__proto__ || Object.getPrototypeOf(_obj), 'reduceYieldGeneratorExpression', this).call(this, node, data), node);
    }
  };
};

var reducers = {};

/*
 * Copyright 2018 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(reducers, "__esModule", {
  value: true
});
reducers.ThunkedOrReducer = reducers.OrReducer = reducers.ThunkedAndReducer = reducers.AndReducer = reducers.ThunkedConcatReducer = reducers.ConcatReducer = reducers.ThunkedPlusReducer = reducers.PlusReducer = undefined;

var _monoidalReducer = monoidalReducer;

var _monoidalReducer2 = _interopRequireDefault$c(_monoidalReducer);

var _thunkedMonoidalReducer = thunkedMonoidalReducer;

var _thunkedMonoidalReducer2 = _interopRequireDefault$c(_thunkedMonoidalReducer);

function _interopRequireDefault$c(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck$8(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$5(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$5(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PlusMonoid = {
  empty: function empty() {
    return 0;
  },
  concat: function concat(a, b) {
    return a + b;
  }
};

var ConcatMonoid = {
  empty: function empty() {
    return [];
  },
  concat: function concat(a, b) {
    return a.concat(b);
  }
};

var AndMonoid = {
  empty: function empty() {
    return true;
  },
  concat: function concat(a, b) {
    return a && b;
  },
  concatThunk: function concatThunk(a, b) {
    return a && b();
  }
};

var OrMonoid = {
  empty: function empty() {
    return false;
  },
  concat: function concat(a, b) {
    return a || b;
  },
  concatThunk: function concatThunk(a, b) {
    return a || b();
  }
};

reducers.PlusReducer = function (_MonoidalReducer) {
  _inherits$5(PlusReducer, _MonoidalReducer);

  function PlusReducer() {
    _classCallCheck$8(this, PlusReducer);

    return _possibleConstructorReturn$5(this, (PlusReducer.__proto__ || Object.getPrototypeOf(PlusReducer)).call(this, PlusMonoid));
  }

  return PlusReducer;
}(_monoidalReducer2.default);

reducers.ThunkedPlusReducer = function (_ThunkedMonoidalReduc) {
  _inherits$5(ThunkedPlusReducer, _ThunkedMonoidalReduc);

  function ThunkedPlusReducer() {
    _classCallCheck$8(this, ThunkedPlusReducer);

    return _possibleConstructorReturn$5(this, (ThunkedPlusReducer.__proto__ || Object.getPrototypeOf(ThunkedPlusReducer)).call(this, PlusMonoid));
  }

  return ThunkedPlusReducer;
}(_thunkedMonoidalReducer2.default);

reducers.ConcatReducer = function (_MonoidalReducer2) {
  _inherits$5(ConcatReducer, _MonoidalReducer2);

  function ConcatReducer() {
    _classCallCheck$8(this, ConcatReducer);

    return _possibleConstructorReturn$5(this, (ConcatReducer.__proto__ || Object.getPrototypeOf(ConcatReducer)).call(this, ConcatMonoid));
  }

  return ConcatReducer;
}(_monoidalReducer2.default);

reducers.ThunkedConcatReducer = function (_ThunkedMonoidalReduc2) {
  _inherits$5(ThunkedConcatReducer, _ThunkedMonoidalReduc2);

  function ThunkedConcatReducer() {
    _classCallCheck$8(this, ThunkedConcatReducer);

    return _possibleConstructorReturn$5(this, (ThunkedConcatReducer.__proto__ || Object.getPrototypeOf(ThunkedConcatReducer)).call(this, ConcatMonoid));
  }

  return ThunkedConcatReducer;
}(_thunkedMonoidalReducer2.default);

reducers.AndReducer = function (_MonoidalReducer3) {
  _inherits$5(AndReducer, _MonoidalReducer3);

  function AndReducer() {
    _classCallCheck$8(this, AndReducer);

    return _possibleConstructorReturn$5(this, (AndReducer.__proto__ || Object.getPrototypeOf(AndReducer)).call(this, AndMonoid));
  }

  return AndReducer;
}(_monoidalReducer2.default);

reducers.ThunkedAndReducer = function (_ThunkedMonoidalReduc3) {
  _inherits$5(ThunkedAndReducer, _ThunkedMonoidalReduc3);

  function ThunkedAndReducer() {
    _classCallCheck$8(this, ThunkedAndReducer);

    return _possibleConstructorReturn$5(this, (ThunkedAndReducer.__proto__ || Object.getPrototypeOf(ThunkedAndReducer)).call(this, AndMonoid));
  }

  return ThunkedAndReducer;
}(_thunkedMonoidalReducer2.default);

reducers.OrReducer = function (_MonoidalReducer4) {
  _inherits$5(OrReducer, _MonoidalReducer4);

  function OrReducer() {
    _classCallCheck$8(this, OrReducer);

    return _possibleConstructorReturn$5(this, (OrReducer.__proto__ || Object.getPrototypeOf(OrReducer)).call(this, OrMonoid));
  }

  return OrReducer;
}(_monoidalReducer2.default);

reducers.ThunkedOrReducer = function (_ThunkedMonoidalReduc4) {
  _inherits$5(ThunkedOrReducer, _ThunkedMonoidalReduc4);

  function ThunkedOrReducer() {
    _classCallCheck$8(this, ThunkedOrReducer);

    return _possibleConstructorReturn$5(this, (ThunkedOrReducer.__proto__ || Object.getPrototypeOf(ThunkedOrReducer)).call(this, OrMonoid));
  }

  return ThunkedOrReducer;
}(_thunkedMonoidalReducer2.default);

(function (exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _director = director$2;

Object.defineProperty(exports, 'reduce', {
  enumerable: true,
  get: function get() {
    return _director.reduce;
  }
});
Object.defineProperty(exports, 'default', {
  enumerable: true,
  get: function get() {
    return _director.reduce;
  }
});

var _thunkedDirector = thunkedDirector;

Object.defineProperty(exports, 'thunkedReduce', {
  enumerable: true,
  get: function get() {
    return _thunkedDirector.thunkedReduce;
  }
});

var _thunkify = thunkify$1;

Object.defineProperty(exports, 'thunkify', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_thunkify).default;
  }
});

var _thunkifyClass = thunkifyClass$1;

Object.defineProperty(exports, 'thunkifyClass', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_thunkifyClass).default;
  }
});

var _memoize = memoize$1;

Object.defineProperty(exports, 'memoize', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_memoize).default;
  }
});

var _cloneReducer = cloneReducer;

Object.defineProperty(exports, 'CloneReducer', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_cloneReducer).default;
  }
});

var _lazyCloneReducer = lazyCloneReducer;

Object.defineProperty(exports, 'LazyCloneReducer', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_lazyCloneReducer).default;
  }
});

var _monoidalReducer = monoidalReducer;

Object.defineProperty(exports, 'MonoidalReducer', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_monoidalReducer).default;
  }
});

var _thunkedMonoidalReducer = thunkedMonoidalReducer;

Object.defineProperty(exports, 'ThunkedMonoidalReducer', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_thunkedMonoidalReducer).default;
  }
});

var _adapt = adapt;

Object.defineProperty(exports, 'adapt', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_adapt).default;
  }
});

var _reducers = reducers;

Object.defineProperty(exports, 'PlusReducer', {
  enumerable: true,
  get: function get() {
    return _reducers.PlusReducer;
  }
});
Object.defineProperty(exports, 'ThunkedPlusReducer', {
  enumerable: true,
  get: function get() {
    return _reducers.ThunkedPlusReducer;
  }
});
Object.defineProperty(exports, 'ConcatReducer', {
  enumerable: true,
  get: function get() {
    return _reducers.ConcatReducer;
  }
});
Object.defineProperty(exports, 'ThunkedConcatReducer', {
  enumerable: true,
  get: function get() {
    return _reducers.ThunkedConcatReducer;
  }
});
Object.defineProperty(exports, 'AndReducer', {
  enumerable: true,
  get: function get() {
    return _reducers.AndReducer;
  }
});
Object.defineProperty(exports, 'ThunkedAndReducer', {
  enumerable: true,
  get: function get() {
    return _reducers.ThunkedAndReducer;
  }
});
Object.defineProperty(exports, 'OrReducer', {
  enumerable: true,
  get: function get() {
    return _reducers.OrReducer;
  }
});
Object.defineProperty(exports, 'ThunkedOrReducer', {
  enumerable: true,
  get: function get() {
    return _reducers.ThunkedOrReducer;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
}(dist$5));

var earlyErrorState = {};

var multimap$1 = {exports: {}};

(function (module, exports) {

/* global module, define */

function mapEach(map, operation){
  var keys = map.keys();
  var next;
  while(!(next = keys.next()).done) {
    operation(map.get(next.value), next.value, map);
  }
}

var Multimap = (function() {
  var mapCtor;
  if (typeof Map !== 'undefined') {
    mapCtor = Map;

    if (!Map.prototype.keys) {
      Map.prototype.keys = function() {
        var keys = [];
        this.forEach(function(item, key) {
          keys.push(key);
        });
        return keys;
      };
    }
  }

  function Multimap(iterable) {
    var self = this;

    self._map = mapCtor;

    if (Multimap.Map) {
      self._map = Multimap.Map;
    }

    self._ = self._map ? new self._map() : {};

    if (iterable) {
      iterable.forEach(function(i) {
        self.set(i[0], i[1]);
      });
    }
  }

  /**
   * @param {Object} key
   * @return {Array} An array of values, undefined if no such a key;
   */
  Multimap.prototype.get = function(key) {
    return this._map ? this._.get(key) : this._[key];
  };

  /**
   * @param {Object} key
   * @param {Object} val...
   */
  Multimap.prototype.set = function(key, val) {
    var args = Array.prototype.slice.call(arguments);

    key = args.shift();

    var entry = this.get(key);
    if (!entry) {
      entry = [];
      if (this._map)
        this._.set(key, entry);
      else
        this._[key] = entry;
    }

    Array.prototype.push.apply(entry, args);
    return this;
  };

  /**
   * @param {Object} key
   * @param {Object=} val
   * @return {boolean} true if any thing changed
   */
  Multimap.prototype.delete = function(key, val) {
    if (!this.has(key))
      return false;

    if (arguments.length == 1) {
      this._map ? (this._.delete(key)) : (delete this._[key]);
      return true;
    } else {
      var entry = this.get(key);
      var idx = entry.indexOf(val);
      if (idx != -1) {
        entry.splice(idx, 1);
        return true;
      }
    }

    return false;
  };

  /**
   * @param {Object} key
   * @param {Object=} val
   * @return {boolean} whether the map contains 'key' or 'key=>val' pair
   */
  Multimap.prototype.has = function(key, val) {
    var hasKey = this._map ? this._.has(key) : this._.hasOwnProperty(key);

    if (arguments.length == 1 || !hasKey)
      return hasKey;

    var entry = this.get(key) || [];
    return entry.indexOf(val) != -1;
  };


  /**
   * @return {Array} all the keys in the map
   */
  Multimap.prototype.keys = function() {
    if (this._map)
      return makeIterator(this._.keys());

    return makeIterator(Object.keys(this._));
  };

  /**
   * @return {Array} all the values in the map
   */
  Multimap.prototype.values = function() {
    var vals = [];
    this.forEachEntry(function(entry) {
      Array.prototype.push.apply(vals, entry);
    });

    return makeIterator(vals);
  };

  /**
   *
   */
  Multimap.prototype.forEachEntry = function(iter) {
    mapEach(this, iter);
  };

  Multimap.prototype.forEach = function(iter) {
    var self = this;
    self.forEachEntry(function(entry, key) {
      entry.forEach(function(item) {
        iter(item, key, self);
      });
    });
  };


  Multimap.prototype.clear = function() {
    if (this._map) {
      this._.clear();
    } else {
      this._ = {};
    }
  };

  Object.defineProperty(
    Multimap.prototype,
    "size", {
      configurable: false,
      enumerable: true,
      get: function() {
        var total = 0;

        mapEach(this, function(value){
          total += value.length;
        });

        return total;
      }
    });

  Object.defineProperty(
    Multimap.prototype,
    "count", {
      configurable: false,
      enumerable: true,
      get: function() {
        return this._.size;
      }
    });

  var safariNext;

  try{
    safariNext = new Function('iterator', 'makeIterator', 'var keysArray = []; for(var key of iterator){keysArray.push(key);} return makeIterator(keysArray).next;');
  }catch(error){
    // for of not implemented;
  }

  function makeIterator(iterator){
    if(Array.isArray(iterator)){
      var nextIndex = 0;

      return {
        next: function(){
          return nextIndex < iterator.length ?
            {value: iterator[nextIndex++], done: false} :
          {done: true};
        }
      };
    }

    // Only an issue in safari
    if(!iterator.next && safariNext){
      iterator.next = safariNext(iterator, makeIterator);
    }

    return iterator;
  }

  return Multimap;
})();


if(module && module.exports)
  module.exports = Multimap;
}(multimap$1));

Object.defineProperty(earlyErrorState, "__esModule", {
  value: true
});
earlyErrorState.EarlyError = earlyErrorState.EarlyErrorState = undefined;

var _createClass$6 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2014 Shape Security, Inc.

icensed under the Apache License, Version 2.0 (the "License")
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _multimap$3 = multimap$1.exports;

var _multimap2$3 = _interopRequireDefault$b(_multimap$3);

function _interopRequireDefault$b(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn$4(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$4(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck$7(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function addEach(thisMap) {
  for (var _len = arguments.length, otherMaps = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    otherMaps[_key - 1] = arguments[_key];
  }

  otherMaps.forEach(function (otherMap) {
    otherMap.forEachEntry(function (v, k) {
      thisMap.set.apply(thisMap, [k].concat(v));
    });
  });
  return thisMap;
}

var identity = void 0; // initialised below EarlyErrorState

var EarlyErrorState = earlyErrorState.EarlyErrorState = function () {
  function EarlyErrorState() {
    _classCallCheck$7(this, EarlyErrorState);

    this.errors = [];
    // errors that are only errors in strict mode code
    this.strictErrors = [];

    // Label values used in LabeledStatement nodes; cleared at function boundaries
    this.usedLabelNames = [];

    // BreakStatement nodes; cleared at iteration; switch; and function boundaries
    this.freeBreakStatements = [];
    // ContinueStatement nodes; cleared at
    this.freeContinueStatements = [];

    // labeled BreakStatement nodes; cleared at LabeledStatement with same Label and function boundaries
    this.freeLabeledBreakStatements = [];
    // labeled ContinueStatement nodes; cleared at labeled iteration statement with same Label and function boundaries
    this.freeLabeledContinueStatements = [];

    // NewTargetExpression nodes; cleared at function (besides arrow expression) boundaries
    this.newTargetExpressions = [];

    // BindingIdentifier nodes; cleared at containing declaration node
    this.boundNames = new _multimap2$3.default();
    // BindingIdentifiers that were found to be in a lexical binding position
    this.lexicallyDeclaredNames = new _multimap2$3.default();
    // BindingIdentifiers that were the name of a FunctionDeclaration
    this.functionDeclarationNames = new _multimap2$3.default();
    // BindingIdentifiers that were found to be in a variable binding position
    this.varDeclaredNames = new _multimap2$3.default();
    // BindingIdentifiers that were found to be in a variable binding position
    this.forOfVarDeclaredNames = [];

    // Names that this module exports
    this.exportedNames = new _multimap2$3.default();
    // Locally declared names that are referenced in export declarations
    this.exportedBindings = new _multimap2$3.default();

    // CallExpressions with Super callee
    this.superCallExpressions = [];
    // SuperCall expressions in the context of a Method named "constructor"
    this.superCallExpressionsInConstructorMethod = [];
    // MemberExpressions with Super object
    this.superPropertyExpressions = [];

    // YieldExpression and YieldGeneratorExpression nodes; cleared at function boundaries
    this.yieldExpressions = [];
    // AwaitExpression nodes; cleared at function boundaries
    this.awaitExpressions = [];
  }

  _createClass$6(EarlyErrorState, [{
    key: 'addFreeBreakStatement',
    value: function addFreeBreakStatement(s) {
      this.freeBreakStatements.push(s);
      return this;
    }
  }, {
    key: 'addFreeLabeledBreakStatement',
    value: function addFreeLabeledBreakStatement(s) {
      this.freeLabeledBreakStatements.push(s);
      return this;
    }
  }, {
    key: 'clearFreeBreakStatements',
    value: function clearFreeBreakStatements() {
      this.freeBreakStatements = [];
      return this;
    }
  }, {
    key: 'addFreeContinueStatement',
    value: function addFreeContinueStatement(s) {
      this.freeContinueStatements.push(s);
      return this;
    }
  }, {
    key: 'addFreeLabeledContinueStatement',
    value: function addFreeLabeledContinueStatement(s) {
      this.freeLabeledContinueStatements.push(s);
      return this;
    }
  }, {
    key: 'clearFreeContinueStatements',
    value: function clearFreeContinueStatements() {
      this.freeContinueStatements = [];
      return this;
    }
  }, {
    key: 'enforceFreeBreakStatementErrors',
    value: function enforceFreeBreakStatementErrors(createError) {
      [].push.apply(this.errors, this.freeBreakStatements.map(createError));
      this.freeBreakStatements = [];
      return this;
    }
  }, {
    key: 'enforceFreeLabeledBreakStatementErrors',
    value: function enforceFreeLabeledBreakStatementErrors(createError) {
      [].push.apply(this.errors, this.freeLabeledBreakStatements.map(createError));
      this.freeLabeledBreakStatements = [];
      return this;
    }
  }, {
    key: 'enforceFreeContinueStatementErrors',
    value: function enforceFreeContinueStatementErrors(createError) {
      [].push.apply(this.errors, this.freeContinueStatements.map(createError));
      this.freeContinueStatements = [];
      return this;
    }
  }, {
    key: 'enforceFreeLabeledContinueStatementErrors',
    value: function enforceFreeLabeledContinueStatementErrors(createError) {
      [].push.apply(this.errors, this.freeLabeledContinueStatements.map(createError));
      this.freeLabeledContinueStatements = [];
      return this;
    }
  }, {
    key: 'observeIterationLabel',
    value: function observeIterationLabel(label) {
      this.usedLabelNames.push(label);
      this.freeLabeledBreakStatements = this.freeLabeledBreakStatements.filter(function (s) {
        return s.label !== label;
      });
      this.freeLabeledContinueStatements = this.freeLabeledContinueStatements.filter(function (s) {
        return s.label !== label;
      });
      return this;
    }
  }, {
    key: 'observeNonIterationLabel',
    value: function observeNonIterationLabel(label) {
      this.usedLabelNames.push(label);
      this.freeLabeledBreakStatements = this.freeLabeledBreakStatements.filter(function (s) {
        return s.label !== label;
      });
      return this;
    }
  }, {
    key: 'clearUsedLabelNames',
    value: function clearUsedLabelNames() {
      this.usedLabelNames = [];
      return this;
    }
  }, {
    key: 'observeSuperCallExpression',
    value: function observeSuperCallExpression(node) {
      this.superCallExpressions.push(node);
      return this;
    }
  }, {
    key: 'observeConstructorMethod',
    value: function observeConstructorMethod() {
      this.superCallExpressionsInConstructorMethod = this.superCallExpressions;
      this.superCallExpressions = [];
      return this;
    }
  }, {
    key: 'clearSuperCallExpressionsInConstructorMethod',
    value: function clearSuperCallExpressionsInConstructorMethod() {
      this.superCallExpressionsInConstructorMethod = [];
      return this;
    }
  }, {
    key: 'enforceSuperCallExpressions',
    value: function enforceSuperCallExpressions(createError) {
      [].push.apply(this.errors, this.superCallExpressions.map(createError));
      [].push.apply(this.errors, this.superCallExpressionsInConstructorMethod.map(createError));
      this.superCallExpressions = [];
      this.superCallExpressionsInConstructorMethod = [];
      return this;
    }
  }, {
    key: 'enforceSuperCallExpressionsInConstructorMethod',
    value: function enforceSuperCallExpressionsInConstructorMethod(createError) {
      [].push.apply(this.errors, this.superCallExpressionsInConstructorMethod.map(createError));
      this.superCallExpressionsInConstructorMethod = [];
      return this;
    }
  }, {
    key: 'observeSuperPropertyExpression',
    value: function observeSuperPropertyExpression(node) {
      this.superPropertyExpressions.push(node);
      return this;
    }
  }, {
    key: 'clearSuperPropertyExpressions',
    value: function clearSuperPropertyExpressions() {
      this.superPropertyExpressions = [];
      return this;
    }
  }, {
    key: 'enforceSuperPropertyExpressions',
    value: function enforceSuperPropertyExpressions(createError) {
      [].push.apply(this.errors, this.superPropertyExpressions.map(createError));
      this.superPropertyExpressions = [];
      return this;
    }
  }, {
    key: 'observeNewTargetExpression',
    value: function observeNewTargetExpression(node) {
      this.newTargetExpressions.push(node);
      return this;
    }
  }, {
    key: 'clearNewTargetExpressions',
    value: function clearNewTargetExpressions() {
      this.newTargetExpressions = [];
      return this;
    }
  }, {
    key: 'bindName',
    value: function bindName(name, node) {
      this.boundNames.set(name, node);
      return this;
    }
  }, {
    key: 'clearBoundNames',
    value: function clearBoundNames() {
      this.boundNames = new _multimap2$3.default();
      return this;
    }
  }, {
    key: 'observeLexicalDeclaration',
    value: function observeLexicalDeclaration() {
      addEach(this.lexicallyDeclaredNames, this.boundNames);
      this.boundNames = new _multimap2$3.default();
      return this;
    }
  }, {
    key: 'observeLexicalBoundary',
    value: function observeLexicalBoundary() {
      this.previousLexicallyDeclaredNames = this.lexicallyDeclaredNames;
      this.lexicallyDeclaredNames = new _multimap2$3.default();
      this.functionDeclarationNames = new _multimap2$3.default();
      return this;
    }
  }, {
    key: 'enforceDuplicateLexicallyDeclaredNames',
    value: function enforceDuplicateLexicallyDeclaredNames(createError) {
      var _this = this;

      this.lexicallyDeclaredNames.forEachEntry(function (nodes) {
        if (nodes.length > 1) {
          nodes.slice(1).forEach(function (dupeNode) {
            _this.addError(createError(dupeNode));
          });
        }
      });
      return this;
    }
  }, {
    key: 'enforceConflictingLexicallyDeclaredNames',
    value: function enforceConflictingLexicallyDeclaredNames(otherNames, createError) {
      var _this2 = this;

      this.lexicallyDeclaredNames.forEachEntry(function (nodes, bindingName) {
        if (otherNames.has(bindingName)) {
          nodes.forEach(function (conflictingNode) {
            _this2.addError(createError(conflictingNode));
          });
        }
      });
      return this;
    }
  }, {
    key: 'observeFunctionDeclaration',
    value: function observeFunctionDeclaration() {
      this.observeVarBoundary();
      addEach(this.functionDeclarationNames, this.boundNames);
      this.boundNames = new _multimap2$3.default();
      return this;
    }
  }, {
    key: 'functionDeclarationNamesAreLexical',
    value: function functionDeclarationNamesAreLexical() {
      addEach(this.lexicallyDeclaredNames, this.functionDeclarationNames);
      this.functionDeclarationNames = new _multimap2$3.default();
      return this;
    }
  }, {
    key: 'observeVarDeclaration',
    value: function observeVarDeclaration() {
      addEach(this.varDeclaredNames, this.boundNames);
      this.boundNames = new _multimap2$3.default();
      return this;
    }
  }, {
    key: 'recordForOfVars',
    value: function recordForOfVars() {
      var _this3 = this;

      this.varDeclaredNames.forEach(function (bindingIdentifier) {
        _this3.forOfVarDeclaredNames.push(bindingIdentifier);
      });
      return this;
    }
  }, {
    key: 'observeVarBoundary',
    value: function observeVarBoundary() {
      this.lexicallyDeclaredNames = new _multimap2$3.default();
      this.functionDeclarationNames = new _multimap2$3.default();
      this.varDeclaredNames = new _multimap2$3.default();
      this.forOfVarDeclaredNames = [];
      return this;
    }
  }, {
    key: 'exportName',
    value: function exportName(name, node) {
      this.exportedNames.set(name, node);
      return this;
    }
  }, {
    key: 'exportDeclaredNames',
    value: function exportDeclaredNames() {
      addEach(this.exportedNames, this.lexicallyDeclaredNames, this.varDeclaredNames);
      addEach(this.exportedBindings, this.lexicallyDeclaredNames, this.varDeclaredNames);
      return this;
    }
  }, {
    key: 'exportBinding',
    value: function exportBinding(name, node) {
      this.exportedBindings.set(name, node);
      return this;
    }
  }, {
    key: 'clearExportedBindings',
    value: function clearExportedBindings() {
      this.exportedBindings = new _multimap2$3.default();
      return this;
    }
  }, {
    key: 'observeYieldExpression',
    value: function observeYieldExpression(node) {
      this.yieldExpressions.push(node);
      return this;
    }
  }, {
    key: 'clearYieldExpressions',
    value: function clearYieldExpressions() {
      this.yieldExpressions = [];
      return this;
    }
  }, {
    key: 'observeAwaitExpression',
    value: function observeAwaitExpression(node) {
      this.awaitExpressions.push(node);
      return this;
    }
  }, {
    key: 'clearAwaitExpressions',
    value: function clearAwaitExpressions() {
      this.awaitExpressions = [];
      return this;
    }
  }, {
    key: 'addError',
    value: function addError(e) {
      this.errors.push(e);
      return this;
    }
  }, {
    key: 'addStrictError',
    value: function addStrictError(e) {
      this.strictErrors.push(e);
      return this;
    }
  }, {
    key: 'enforceStrictErrors',
    value: function enforceStrictErrors() {
      [].push.apply(this.errors, this.strictErrors);
      this.strictErrors = [];
      return this;
    }

    // MONOID IMPLEMENTATION

  }, {
    key: 'concat',
    value: function concat(s) {
      if (this === identity) return s;
      if (s === identity) return this;
      [].push.apply(this.errors, s.errors);
      [].push.apply(this.strictErrors, s.strictErrors);
      [].push.apply(this.usedLabelNames, s.usedLabelNames);
      [].push.apply(this.freeBreakStatements, s.freeBreakStatements);
      [].push.apply(this.freeContinueStatements, s.freeContinueStatements);
      [].push.apply(this.freeLabeledBreakStatements, s.freeLabeledBreakStatements);
      [].push.apply(this.freeLabeledContinueStatements, s.freeLabeledContinueStatements);
      [].push.apply(this.newTargetExpressions, s.newTargetExpressions);
      addEach(this.boundNames, s.boundNames);
      addEach(this.lexicallyDeclaredNames, s.lexicallyDeclaredNames);
      addEach(this.functionDeclarationNames, s.functionDeclarationNames);
      addEach(this.varDeclaredNames, s.varDeclaredNames);
      [].push.apply(this.forOfVarDeclaredNames, s.forOfVarDeclaredNames);
      addEach(this.exportedNames, s.exportedNames);
      addEach(this.exportedBindings, s.exportedBindings);
      [].push.apply(this.superCallExpressions, s.superCallExpressions);
      [].push.apply(this.superCallExpressionsInConstructorMethod, s.superCallExpressionsInConstructorMethod);
      [].push.apply(this.superPropertyExpressions, s.superPropertyExpressions);
      [].push.apply(this.yieldExpressions, s.yieldExpressions);
      [].push.apply(this.awaitExpressions, s.awaitExpressions);
      return this;
    }
  }], [{
    key: 'empty',
    value: function empty() {
      return identity;
    }
  }]);

  return EarlyErrorState;
}();

identity = new EarlyErrorState();
Object.getOwnPropertyNames(EarlyErrorState.prototype).forEach(function (methodName) {
  if (methodName === 'constructor') return;
  Object.defineProperty(identity, methodName, {
    value: function value() {
      return EarlyErrorState.prototype[methodName].apply(new EarlyErrorState(), arguments);
    },

    enumerable: false,
    writable: true,
    configurable: true
  });
});

earlyErrorState.EarlyError = function (_Error) {
  _inherits$4(EarlyError, _Error);

  function EarlyError(node, message) {
    _classCallCheck$7(this, EarlyError);

    var _this4 = _possibleConstructorReturn$4(this, (EarlyError.__proto__ || Object.getPrototypeOf(EarlyError)).call(this, message));

    _this4.node = node;
    _this4.message = message;
    return _this4;
  }

  return EarlyError;
}(Error);

Object.defineProperty(earlyErrors, "__esModule", {
  value: true
});
earlyErrors.EarlyErrorChecker = undefined;

var _createClass$5 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get$1 = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _shiftReducer$4 = dist$5;

var _shiftReducer2$3 = _interopRequireDefault$a(_shiftReducer$4);

var _utils = utils$1;

var _errors = errors;

var _earlyErrorState = earlyErrorState;

function _interopRequireDefault$a(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray$5(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck$6(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$3(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$3(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2014 Shape Security, Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

function isStrictFunctionBody(_ref) {
  var directives = _ref.directives;

  return directives.some(function (directive) {
    return directive.rawValue === 'use strict';
  });
}

function isLabelledFunction(node) {
  return node.type === 'LabeledStatement' && (node.body.type === 'FunctionDeclaration' || isLabelledFunction(node.body));
}

function isIterationStatement(node) {
  switch (node.type) {
    case 'LabeledStatement':
      return isIterationStatement(node.body);
    case 'DoWhileStatement':
    case 'ForInStatement':
    case 'ForOfStatement':
    case 'ForStatement':
    case 'WhileStatement':
      return true;
  }
  return false;
}

function isSpecialMethod(methodDefinition) {
  if (methodDefinition.name.type !== 'StaticPropertyName' || methodDefinition.name.value !== 'constructor') {
    return false;
  }
  switch (methodDefinition.type) {
    case 'Getter':
    case 'Setter':
      return true;
    case 'Method':
      return methodDefinition.isGenerator || methodDefinition.isAsync;
  }
  /* istanbul ignore next */
  throw new Error('not reached');
}

function enforceDuplicateConstructorMethods(node, s) {
  var ctors = node.elements.filter(function (e) {
    return !e.isStatic && e.method.type === 'Method' && !e.method.isGenerator && e.method.name.type === 'StaticPropertyName' && e.method.name.value === 'constructor';
  });
  if (ctors.length > 1) {
    ctors.slice(1).forEach(function (ctor) {
      s = s.addError(new _earlyErrorState.EarlyError(ctor, 'Duplicate constructor method in class'));
    });
  }
  return s;
}

var SUPERCALL_ERROR = function SUPERCALL_ERROR(node) {
  return new _earlyErrorState.EarlyError(node, _errors.ErrorMessages.ILLEGAL_SUPER_CALL);
};
var SUPERPROPERTY_ERROR = function SUPERPROPERTY_ERROR(node) {
  return new _earlyErrorState.EarlyError(node, 'Member access on super must be in a method');
};
var DUPLICATE_BINDING = function DUPLICATE_BINDING(node) {
  return new _earlyErrorState.EarlyError(node, 'Duplicate binding ' + JSON.stringify(node.name));
};
var FREE_CONTINUE = function FREE_CONTINUE(node) {
  return new _earlyErrorState.EarlyError(node, 'Continue statement must be nested within an iteration statement');
};
var UNBOUND_CONTINUE = function UNBOUND_CONTINUE(node) {
  return new _earlyErrorState.EarlyError(node, 'Continue statement must be nested within an iteration statement with label ' + JSON.stringify(node.label));
};
var FREE_BREAK = function FREE_BREAK(node) {
  return new _earlyErrorState.EarlyError(node, 'Break statement must be nested within an iteration statement or a switch statement');
};
var UNBOUND_BREAK = function UNBOUND_BREAK(node) {
  return new _earlyErrorState.EarlyError(node, 'Break statement must be nested within a statement with label ' + JSON.stringify(node.label));
};

earlyErrors.EarlyErrorChecker = function (_MonoidalReducer) {
  _inherits$3(EarlyErrorChecker, _MonoidalReducer);

  function EarlyErrorChecker() {
    _classCallCheck$6(this, EarlyErrorChecker);

    return _possibleConstructorReturn$3(this, (EarlyErrorChecker.__proto__ || Object.getPrototypeOf(EarlyErrorChecker)).call(this, _earlyErrorState.EarlyErrorState));
  }

  _createClass$5(EarlyErrorChecker, [{
    key: 'reduceAssignmentExpression',
    value: function reduceAssignmentExpression() {
      return _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceAssignmentExpression', this).apply(this, arguments).clearBoundNames();
    }
  }, {
    key: 'reduceAssignmentTargetIdentifier',
    value: function reduceAssignmentTargetIdentifier(node) {
      var s = this.identity;
      if (node.name === 'eval' || node.name === 'arguments' || (0, _utils.isStrictModeReservedWord)(node.name)) {
        s = s.addStrictError(new _earlyErrorState.EarlyError(node, 'The identifier ' + JSON.stringify(node.name) + ' must not be in binding position in strict mode'));
      }
      return s;
    }
  }, {
    key: 'reduceArrowExpression',
    value: function reduceArrowExpression(node, _ref2) {
      var params = _ref2.params,
          body = _ref2.body;

      var isSimpleParameterList = node.params.rest == null && node.params.items.every(function (i) {
        return i.type === 'BindingIdentifier';
      });
      params = params.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);
      if (node.body.type === 'FunctionBody') {
        body = body.enforceConflictingLexicallyDeclaredNames(params.lexicallyDeclaredNames, DUPLICATE_BINDING);
        if (isStrictFunctionBody(node.body)) {
          params = params.enforceStrictErrors();
          body = body.enforceStrictErrors();
        }
      }
      params.yieldExpressions.forEach(function (n) {
        params = params.addError(new _earlyErrorState.EarlyError(n, 'Arrow parameters must not contain yield expressions'));
      });
      params.awaitExpressions.forEach(function (n) {
        params = params.addError(new _earlyErrorState.EarlyError(n, 'Arrow parameters must not contain await expressions'));
      });
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceArrowExpression', this).call(this, node, { params: params, body: body });
      if (!isSimpleParameterList && node.body.type === 'FunctionBody' && isStrictFunctionBody(node.body)) {
        s = s.addError(new _earlyErrorState.EarlyError(node, 'Functions with non-simple parameter lists may not contain a "use strict" directive'));
      }
      s = s.clearYieldExpressions();
      s = s.clearAwaitExpressions();
      s = s.observeVarBoundary();
      return s;
    }
  }, {
    key: 'reduceAwaitExpression',
    value: function reduceAwaitExpression(node, _ref3) {
      var expression = _ref3.expression;

      return expression.observeAwaitExpression(node);
    }
  }, {
    key: 'reduceBindingIdentifier',
    value: function reduceBindingIdentifier(node) {
      var s = this.identity;
      if (node.name === 'eval' || node.name === 'arguments' || (0, _utils.isStrictModeReservedWord)(node.name)) {
        s = s.addStrictError(new _earlyErrorState.EarlyError(node, 'The identifier ' + JSON.stringify(node.name) + ' must not be in binding position in strict mode'));
      }
      s = s.bindName(node.name, node);
      return s;
    }
  }, {
    key: 'reduceBlock',
    value: function reduceBlock() {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceBlock', this).apply(this, arguments);
      s = s.functionDeclarationNamesAreLexical();
      s = s.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);
      s = s.enforceConflictingLexicallyDeclaredNames(s.varDeclaredNames, DUPLICATE_BINDING);
      s = s.observeLexicalBoundary();
      return s;
    }
  }, {
    key: 'reduceBreakStatement',
    value: function reduceBreakStatement(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceBreakStatement', this).apply(this, arguments);
      s = node.label == null ? s.addFreeBreakStatement(node) : s.addFreeLabeledBreakStatement(node);
      return s;
    }
  }, {
    key: 'reduceCallExpression',
    value: function reduceCallExpression(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceCallExpression', this).apply(this, arguments);
      if (node.callee.type === 'Super') {
        s = s.observeSuperCallExpression(node);
      }
      return s;
    }
  }, {
    key: 'reduceCatchClause',
    value: function reduceCatchClause(node, _ref4) {
      var binding = _ref4.binding,
          body = _ref4.body;

      binding = binding.observeLexicalDeclaration();
      binding = binding.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);
      binding = binding.enforceConflictingLexicallyDeclaredNames(body.previousLexicallyDeclaredNames, DUPLICATE_BINDING);
      binding.lexicallyDeclaredNames.forEachEntry(function (nodes, bindingName) {
        if (body.varDeclaredNames.has(bindingName)) {
          body.varDeclaredNames.get(bindingName).forEach(function (conflictingNode) {
            if (body.forOfVarDeclaredNames.indexOf(conflictingNode) >= 0) {
              binding = binding.addError(DUPLICATE_BINDING(conflictingNode));
            }
          });
        }
      });
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceCatchClause', this).call(this, node, { binding: binding, body: body });
      s = s.observeLexicalBoundary();
      return s;
    }
  }, {
    key: 'reduceClassDeclaration',
    value: function reduceClassDeclaration(node, _ref5) {
      var name = _ref5.name,
          _super = _ref5.super,
          elements = _ref5.elements;

      var s = name.enforceStrictErrors();
      var sElements = this.append.apply(this, _toConsumableArray$5(elements));
      sElements = sElements.enforceStrictErrors();
      if (node.super != null) {
        _super = _super.enforceStrictErrors();
        s = this.append(s, _super);
        sElements = sElements.clearSuperCallExpressionsInConstructorMethod();
      }
      s = this.append(s, sElements);
      s = enforceDuplicateConstructorMethods(node, s);
      s = s.observeLexicalDeclaration();
      return s;
    }
  }, {
    key: 'reduceClassElement',
    value: function reduceClassElement(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceClassElement', this).apply(this, arguments);
      if (!node.isStatic && isSpecialMethod(node.method)) {
        s = s.addError(new _earlyErrorState.EarlyError(node, _errors.ErrorMessages.ILLEGAL_CONSTRUCTORS));
      }
      if (node.isStatic && node.method.name.type === 'StaticPropertyName' && node.method.name.value === 'prototype') {
        s = s.addError(new _earlyErrorState.EarlyError(node, 'Static class methods cannot be named "prototype"'));
      }
      return s;
    }
  }, {
    key: 'reduceClassExpression',
    value: function reduceClassExpression(node, _ref6) {
      var name = _ref6.name,
          _super = _ref6.super,
          elements = _ref6.elements;

      var s = node.name == null ? this.identity : name.enforceStrictErrors();
      var sElements = this.append.apply(this, _toConsumableArray$5(elements));
      sElements = sElements.enforceStrictErrors();
      if (node.super != null) {
        _super = _super.enforceStrictErrors();
        s = this.append(s, _super);
        sElements = sElements.clearSuperCallExpressionsInConstructorMethod();
      }
      s = this.append(s, sElements);
      s = enforceDuplicateConstructorMethods(node, s);
      s = s.clearBoundNames();
      return s;
    }
  }, {
    key: 'reduceCompoundAssignmentExpression',
    value: function reduceCompoundAssignmentExpression() {
      return _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceCompoundAssignmentExpression', this).apply(this, arguments).clearBoundNames();
    }
  }, {
    key: 'reduceComputedMemberExpression',
    value: function reduceComputedMemberExpression(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceComputedMemberExpression', this).apply(this, arguments);
      if (node.object.type === 'Super') {
        s = s.observeSuperPropertyExpression(node);
      }
      return s;
    }
  }, {
    key: 'reduceContinueStatement',
    value: function reduceContinueStatement(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceContinueStatement', this).apply(this, arguments);
      s = node.label == null ? s.addFreeContinueStatement(node) : s.addFreeLabeledContinueStatement(node);
      return s;
    }
  }, {
    key: 'reduceDoWhileStatement',
    value: function reduceDoWhileStatement(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceDoWhileStatement', this).apply(this, arguments);
      if (isLabelledFunction(node.body)) {
        s = s.addError(new _earlyErrorState.EarlyError(node.body, 'The body of a do-while statement must not be a labeled function declaration'));
      }
      s = s.clearFreeContinueStatements();
      s = s.clearFreeBreakStatements();
      return s;
    }
  }, {
    key: 'reduceExport',
    value: function reduceExport() {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceExport', this).apply(this, arguments);
      s = s.functionDeclarationNamesAreLexical();
      s = s.exportDeclaredNames();
      return s;
    }
  }, {
    key: 'reduceExportFrom',
    value: function reduceExportFrom() {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceExportFrom', this).apply(this, arguments);
      s = s.clearExportedBindings();
      return s;
    }
  }, {
    key: 'reduceExportFromSpecifier',
    value: function reduceExportFromSpecifier(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceExportFromSpecifier', this).apply(this, arguments);
      s = s.exportName(node.exportedName || node.name, node);
      s = s.exportBinding(node.name, node);
      return s;
    }
  }, {
    key: 'reduceExportLocalSpecifier',
    value: function reduceExportLocalSpecifier(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceExportLocalSpecifier', this).apply(this, arguments);
      s = s.exportName(node.exportedName || node.name.name, node);
      s = s.exportBinding(node.name.name, node);
      return s;
    }
  }, {
    key: 'reduceExportDefault',
    value: function reduceExportDefault(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceExportDefault', this).apply(this, arguments);
      s = s.functionDeclarationNamesAreLexical();
      s = s.exportName('default', node);
      return s;
    }
  }, {
    key: 'reduceFormalParameters',
    value: function reduceFormalParameters() {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceFormalParameters', this).apply(this, arguments);
      s = s.observeLexicalDeclaration();
      return s;
    }
  }, {
    key: 'reduceForStatement',
    value: function reduceForStatement(node, _ref7) {
      var init = _ref7.init,
          test = _ref7.test,
          update = _ref7.update,
          body = _ref7.body;

      if (init != null) {
        init = init.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);
        init = init.enforceConflictingLexicallyDeclaredNames(body.varDeclaredNames, DUPLICATE_BINDING);
      }
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceForStatement', this).call(this, node, { init: init, test: test, update: update, body: body });
      if (node.init != null && node.init.type === 'VariableDeclaration' && node.init.kind === 'const') {
        node.init.declarators.forEach(function (declarator) {
          if (declarator.init == null) {
            s = s.addError(new _earlyErrorState.EarlyError(declarator, 'Constant lexical declarations must have an initialiser'));
          }
        });
      }
      if (isLabelledFunction(node.body)) {
        s = s.addError(new _earlyErrorState.EarlyError(node.body, 'The body of a for statement must not be a labeled function declaration'));
      }
      s = s.clearFreeContinueStatements();
      s = s.clearFreeBreakStatements();
      s = s.observeLexicalBoundary();
      return s;
    }
  }, {
    key: 'reduceForInStatement',
    value: function reduceForInStatement(node, _ref8) {
      var left = _ref8.left,
          right = _ref8.right,
          body = _ref8.body;

      left = left.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);
      left = left.enforceConflictingLexicallyDeclaredNames(body.varDeclaredNames, DUPLICATE_BINDING);
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceForInStatement', this).call(this, node, { left: left, right: right, body: body });
      if (isLabelledFunction(node.body)) {
        s = s.addError(new _earlyErrorState.EarlyError(node.body, 'The body of a for-in statement must not be a labeled function declaration'));
      }
      s = s.clearFreeContinueStatements();
      s = s.clearFreeBreakStatements();
      s = s.observeLexicalBoundary();
      return s;
    }
  }, {
    key: 'reduceForOfStatement',
    value: function reduceForOfStatement(node, _ref9) {
      var left = _ref9.left,
          right = _ref9.right,
          body = _ref9.body;

      left = left.recordForOfVars();
      left = left.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);
      left = left.enforceConflictingLexicallyDeclaredNames(body.varDeclaredNames, DUPLICATE_BINDING);
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceForOfStatement', this).call(this, node, { left: left, right: right, body: body });
      if (isLabelledFunction(node.body)) {
        s = s.addError(new _earlyErrorState.EarlyError(node.body, 'The body of a for-of statement must not be a labeled function declaration'));
      }
      s = s.clearFreeContinueStatements();
      s = s.clearFreeBreakStatements();
      s = s.observeLexicalBoundary();
      return s;
    }
  }, {
    key: 'reduceForAwaitStatement',
    value: function reduceForAwaitStatement(node, _ref10) {
      var left = _ref10.left,
          right = _ref10.right,
          body = _ref10.body;

      left = left.recordForOfVars();
      left = left.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);
      left = left.enforceConflictingLexicallyDeclaredNames(body.varDeclaredNames, DUPLICATE_BINDING);
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceForOfStatement', this).call(this, node, { left: left, right: right, body: body });
      if (isLabelledFunction(node.body)) {
        s = s.addError(new _earlyErrorState.EarlyError(node.body, 'The body of a for-await statement must not be a labeled function declaration'));
      }
      s = s.clearFreeContinueStatements();
      s = s.clearFreeBreakStatements();
      s = s.observeLexicalBoundary();
      return s;
    }
  }, {
    key: 'reduceFunctionBody',
    value: function reduceFunctionBody(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceFunctionBody', this).apply(this, arguments);
      s = s.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);
      s = s.enforceConflictingLexicallyDeclaredNames(s.varDeclaredNames, DUPLICATE_BINDING);
      s = s.enforceFreeContinueStatementErrors(FREE_CONTINUE);
      s = s.enforceFreeLabeledContinueStatementErrors(UNBOUND_CONTINUE);
      s = s.enforceFreeBreakStatementErrors(FREE_BREAK);
      s = s.enforceFreeLabeledBreakStatementErrors(UNBOUND_BREAK);
      s = s.clearUsedLabelNames();
      s = s.clearYieldExpressions();
      s = s.clearAwaitExpressions();
      if (isStrictFunctionBody(node)) {
        s = s.enforceStrictErrors();
      }
      return s;
    }
  }, {
    key: 'reduceFunctionDeclaration',
    value: function reduceFunctionDeclaration(node, _ref11) {
      var name = _ref11.name,
          params = _ref11.params,
          body = _ref11.body;

      var isSimpleParameterList = node.params.rest == null && node.params.items.every(function (i) {
        return i.type === 'BindingIdentifier';
      });
      var addError = !isSimpleParameterList || node.isGenerator ? 'addError' : 'addStrictError';
      params.lexicallyDeclaredNames.forEachEntry(function (nodes) {
        if (nodes.length > 1) {
          nodes.slice(1).forEach(function (dupeNode) {
            params = params[addError](DUPLICATE_BINDING(dupeNode));
          });
        }
      });
      body = body.enforceConflictingLexicallyDeclaredNames(params.lexicallyDeclaredNames, DUPLICATE_BINDING);
      body = body.enforceSuperCallExpressions(SUPERCALL_ERROR);
      body = body.enforceSuperPropertyExpressions(SUPERPROPERTY_ERROR);
      params = params.enforceSuperCallExpressions(SUPERCALL_ERROR);
      params = params.enforceSuperPropertyExpressions(SUPERPROPERTY_ERROR);
      if (node.isGenerator) {
        params.yieldExpressions.forEach(function (n) {
          params = params.addError(new _earlyErrorState.EarlyError(n, 'Generator parameters must not contain yield expressions'));
        });
      }
      if (node.isAsync) {
        params.awaitExpressions.forEach(function (n) {
          params = params.addError(new _earlyErrorState.EarlyError(n, 'Async function parameters must not contain await expressions'));
        });
      }
      params = params.clearNewTargetExpressions();
      body = body.clearNewTargetExpressions();
      if (isStrictFunctionBody(node.body)) {
        params = params.enforceStrictErrors();
        body = body.enforceStrictErrors();
      }
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceFunctionDeclaration', this).call(this, node, { name: name, params: params, body: body });
      if (!isSimpleParameterList && isStrictFunctionBody(node.body)) {
        s = s.addError(new _earlyErrorState.EarlyError(node, 'Functions with non-simple parameter lists may not contain a "use strict" directive'));
      }
      s = s.clearYieldExpressions();
      s = s.clearAwaitExpressions();
      s = s.observeFunctionDeclaration();
      return s;
    }
  }, {
    key: 'reduceFunctionExpression',
    value: function reduceFunctionExpression(node, _ref12) {
      var name = _ref12.name,
          params = _ref12.params,
          body = _ref12.body;

      var isSimpleParameterList = node.params.rest == null && node.params.items.every(function (i) {
        return i.type === 'BindingIdentifier';
      });
      var addError = !isSimpleParameterList || node.isGenerator ? 'addError' : 'addStrictError';
      params.lexicallyDeclaredNames.forEachEntry(function (nodes, bindingName) {
        if (nodes.length > 1) {
          nodes.slice(1).forEach(function (dupeNode) {
            params = params[addError](new _earlyErrorState.EarlyError(dupeNode, 'Duplicate binding ' + JSON.stringify(bindingName)));
          });
        }
      });
      body = body.enforceConflictingLexicallyDeclaredNames(params.lexicallyDeclaredNames, DUPLICATE_BINDING);
      body = body.enforceSuperCallExpressions(SUPERCALL_ERROR);
      body = body.enforceSuperPropertyExpressions(SUPERPROPERTY_ERROR);
      params = params.enforceSuperCallExpressions(SUPERCALL_ERROR);
      params = params.enforceSuperPropertyExpressions(SUPERPROPERTY_ERROR);
      if (node.isGenerator) {
        params.yieldExpressions.forEach(function (n) {
          params = params.addError(new _earlyErrorState.EarlyError(n, 'Generator parameters must not contain yield expressions'));
        });
      }
      if (node.isAsync) {
        params.awaitExpressions.forEach(function (n) {
          params = params.addError(new _earlyErrorState.EarlyError(n, 'Async function parameters must not contain await expressions'));
        });
      }
      params = params.clearNewTargetExpressions();
      body = body.clearNewTargetExpressions();
      if (isStrictFunctionBody(node.body)) {
        params = params.enforceStrictErrors();
        body = body.enforceStrictErrors();
      }
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceFunctionExpression', this).call(this, node, { name: name, params: params, body: body });
      if (!isSimpleParameterList && isStrictFunctionBody(node.body)) {
        s = s.addError(new _earlyErrorState.EarlyError(node, 'Functions with non-simple parameter lists may not contain a "use strict" directive'));
      }
      s = s.clearBoundNames();
      s = s.clearYieldExpressions();
      s = s.clearAwaitExpressions();
      s = s.observeVarBoundary();
      return s;
    }
  }, {
    key: 'reduceGetter',
    value: function reduceGetter(node, _ref13) {
      var name = _ref13.name,
          body = _ref13.body;

      body = body.enforceSuperCallExpressions(SUPERCALL_ERROR);
      body = body.clearSuperPropertyExpressions();
      body = body.clearNewTargetExpressions();
      if (isStrictFunctionBody(node.body)) {
        body = body.enforceStrictErrors();
      }
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceGetter', this).call(this, node, { name: name, body: body });
      s = s.observeVarBoundary();
      return s;
    }
  }, {
    key: 'reduceIdentifierExpression',
    value: function reduceIdentifierExpression(node) {
      var s = this.identity;
      if ((0, _utils.isStrictModeReservedWord)(node.name)) {
        s = s.addStrictError(new _earlyErrorState.EarlyError(node, 'The identifier ' + JSON.stringify(node.name) + ' must not be in expression position in strict mode'));
      }
      return s;
    }
  }, {
    key: 'reduceIfStatement',
    value: function reduceIfStatement(node, _ref14) {
      var test = _ref14.test,
          consequent = _ref14.consequent,
          alternate = _ref14.alternate;

      if (isLabelledFunction(node.consequent)) {
        consequent = consequent.addError(new _earlyErrorState.EarlyError(node.consequent, 'The consequent of an if statement must not be a labeled function declaration'));
      }
      if (node.alternate != null && isLabelledFunction(node.alternate)) {
        alternate = alternate.addError(new _earlyErrorState.EarlyError(node.alternate, 'The alternate of an if statement must not be a labeled function declaration'));
      }
      if (node.consequent.type === 'FunctionDeclaration') {
        consequent = consequent.addStrictError(new _earlyErrorState.EarlyError(node.consequent, 'FunctionDeclarations in IfStatements are disallowed in strict mode'));
        consequent = consequent.observeLexicalBoundary();
      }
      if (node.alternate != null && node.alternate.type === 'FunctionDeclaration') {
        alternate = alternate.addStrictError(new _earlyErrorState.EarlyError(node.alternate, 'FunctionDeclarations in IfStatements are disallowed in strict mode'));
        alternate = alternate.observeLexicalBoundary();
      }
      return _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceIfStatement', this).call(this, node, { test: test, consequent: consequent, alternate: alternate });
    }
  }, {
    key: 'reduceImport',
    value: function reduceImport() {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceImport', this).apply(this, arguments);
      s = s.observeLexicalDeclaration();
      return s;
    }
  }, {
    key: 'reduceImportNamespace',
    value: function reduceImportNamespace() {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceImportNamespace', this).apply(this, arguments);
      s = s.observeLexicalDeclaration();
      return s;
    }
  }, {
    key: 'reduceLabeledStatement',
    value: function reduceLabeledStatement(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceLabeledStatement', this).apply(this, arguments);
      if (node.label === 'yield' || (0, _utils.isStrictModeReservedWord)(node.label)) {
        s = s.addStrictError(new _earlyErrorState.EarlyError(node, 'The identifier ' + JSON.stringify(node.label) + ' must not be in label position in strict mode'));
      }
      if (s.usedLabelNames.indexOf(node.label) >= 0) {
        s = s.addError(new _earlyErrorState.EarlyError(node, 'Label ' + JSON.stringify(node.label) + ' has already been declared'));
      }
      if (node.body.type === 'FunctionDeclaration') {
        s = s.addStrictError(new _earlyErrorState.EarlyError(node, 'Labeled FunctionDeclarations are disallowed in strict mode'));
      }
      s = isIterationStatement(node.body) ? s.observeIterationLabel(node.label) : s.observeNonIterationLabel(node.label);
      return s;
    }
  }, {
    key: 'reduceLiteralRegExpExpression',
    value: function reduceLiteralRegExpExpression() {
      var s = this.identity;
      // NOTE: the RegExp pattern acceptor is disabled until we have more confidence in its correctness (more tests)
      // if (!PatternAcceptor.test(node.pattern, node.flags.indexOf("u") >= 0)) {
      //  s = s.addError(new EarlyError(node, "Invalid regular expression pattern"));
      // }
      return s;
    }
  }, {
    key: 'reduceMethod',
    value: function reduceMethod(node, _ref15) {
      var name = _ref15.name,
          params = _ref15.params,
          body = _ref15.body;

      var isSimpleParameterList = node.params.rest == null && node.params.items.every(function (i) {
        return i.type === 'BindingIdentifier';
      });
      params = params.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);
      body = body.enforceConflictingLexicallyDeclaredNames(params.lexicallyDeclaredNames, DUPLICATE_BINDING);
      if (node.name.type === 'StaticPropertyName' && node.name.value === 'constructor') {
        body = body.observeConstructorMethod();
        params = params.observeConstructorMethod();
      } else {
        body = body.enforceSuperCallExpressions(SUPERCALL_ERROR);
        params = params.enforceSuperCallExpressions(SUPERCALL_ERROR);
      }
      if (node.isGenerator) {
        params.yieldExpressions.forEach(function (n) {
          params = params.addError(new _earlyErrorState.EarlyError(n, 'Generator parameters must not contain yield expressions'));
        });
      }
      if (node.isAsync) {
        params.awaitExpressions.forEach(function (n) {
          params = params.addError(new _earlyErrorState.EarlyError(n, 'Async function parameters must not contain await expressions'));
        });
      }
      body = body.clearSuperPropertyExpressions();
      params = params.clearSuperPropertyExpressions();
      params = params.clearNewTargetExpressions();
      body = body.clearNewTargetExpressions();
      if (isStrictFunctionBody(node.body)) {
        params = params.enforceStrictErrors();
        body = body.enforceStrictErrors();
      }
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceMethod', this).call(this, node, { name: name, params: params, body: body });
      if (!isSimpleParameterList && isStrictFunctionBody(node.body)) {
        s = s.addError(new _earlyErrorState.EarlyError(node, 'Functions with non-simple parameter lists may not contain a "use strict" directive'));
      }
      s = s.clearYieldExpressions();
      s = s.clearAwaitExpressions();
      s = s.observeVarBoundary();
      return s;
    }
  }, {
    key: 'reduceModule',
    value: function reduceModule() {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceModule', this).apply(this, arguments);
      s = s.functionDeclarationNamesAreLexical();
      s = s.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);
      s = s.enforceConflictingLexicallyDeclaredNames(s.varDeclaredNames, DUPLICATE_BINDING);
      s.exportedNames.forEachEntry(function (nodes, bindingName) {
        if (nodes.length > 1) {
          nodes.slice(1).forEach(function (dupeNode) {
            s = s.addError(new _earlyErrorState.EarlyError(dupeNode, 'Duplicate export ' + JSON.stringify(bindingName)));
          });
        }
      });
      s.exportedBindings.forEachEntry(function (nodes, bindingName) {
        if (!s.lexicallyDeclaredNames.has(bindingName) && !s.varDeclaredNames.has(bindingName)) {
          nodes.forEach(function (undeclaredNode) {
            s = s.addError(new _earlyErrorState.EarlyError(undeclaredNode, 'Exported binding ' + JSON.stringify(bindingName) + ' is not declared'));
          });
        }
      });
      s.newTargetExpressions.forEach(function (node) {
        s = s.addError(new _earlyErrorState.EarlyError(node, 'new.target must be within function (but not arrow expression) code'));
      });
      s = s.enforceFreeContinueStatementErrors(FREE_CONTINUE);
      s = s.enforceFreeLabeledContinueStatementErrors(UNBOUND_CONTINUE);
      s = s.enforceFreeBreakStatementErrors(FREE_BREAK);
      s = s.enforceFreeLabeledBreakStatementErrors(UNBOUND_BREAK);
      s = s.enforceSuperCallExpressions(SUPERCALL_ERROR);
      s = s.enforceSuperPropertyExpressions(SUPERPROPERTY_ERROR);
      s = s.enforceStrictErrors();
      return s;
    }
  }, {
    key: 'reduceNewTargetExpression',
    value: function reduceNewTargetExpression(node) {
      return this.identity.observeNewTargetExpression(node);
    }
  }, {
    key: 'reduceObjectExpression',
    value: function reduceObjectExpression(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceObjectExpression', this).apply(this, arguments);
      s = s.enforceSuperCallExpressionsInConstructorMethod(SUPERCALL_ERROR);
      var protos = node.properties.filter(function (p) {
        return p.type === 'DataProperty' && p.name.type === 'StaticPropertyName' && p.name.value === '__proto__';
      });
      protos.slice(1).forEach(function (n) {
        s = s.addError(new _earlyErrorState.EarlyError(n, 'Duplicate __proto__ property in object literal not allowed'));
      });
      return s;
    }
  }, {
    key: 'reduceUpdateExpression',
    value: function reduceUpdateExpression() {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceUpdateExpression', this).apply(this, arguments);
      s = s.clearBoundNames();
      return s;
    }
  }, {
    key: 'reduceUnaryExpression',
    value: function reduceUnaryExpression(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceUnaryExpression', this).apply(this, arguments);
      if (node.operator === 'delete' && node.operand.type === 'IdentifierExpression') {
        s = s.addStrictError(new _earlyErrorState.EarlyError(node, 'Identifier expressions must not be deleted in strict mode'));
      }
      return s;
    }
  }, {
    key: 'reduceScript',
    value: function reduceScript(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceScript', this).apply(this, arguments);
      s = s.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);
      s = s.enforceConflictingLexicallyDeclaredNames(s.varDeclaredNames, DUPLICATE_BINDING);
      s.newTargetExpressions.forEach(function (n) {
        s = s.addError(new _earlyErrorState.EarlyError(n, 'new.target must be within function (but not arrow expression) code'));
      });
      s = s.enforceFreeContinueStatementErrors(FREE_CONTINUE);
      s = s.enforceFreeLabeledContinueStatementErrors(UNBOUND_CONTINUE);
      s = s.enforceFreeBreakStatementErrors(FREE_BREAK);
      s = s.enforceFreeLabeledBreakStatementErrors(UNBOUND_BREAK);
      s = s.enforceSuperCallExpressions(SUPERCALL_ERROR);
      s = s.enforceSuperPropertyExpressions(SUPERPROPERTY_ERROR);
      if (isStrictFunctionBody(node)) {
        s = s.enforceStrictErrors();
      }
      return s;
    }
  }, {
    key: 'reduceSetter',
    value: function reduceSetter(node, _ref16) {
      var name = _ref16.name,
          param = _ref16.param,
          body = _ref16.body;

      var isSimpleParameterList = node.param.type === 'BindingIdentifier';
      param = param.observeLexicalDeclaration();
      param = param.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);
      body = body.enforceConflictingLexicallyDeclaredNames(param.lexicallyDeclaredNames, DUPLICATE_BINDING);
      param = param.enforceSuperCallExpressions(SUPERCALL_ERROR);
      body = body.enforceSuperCallExpressions(SUPERCALL_ERROR);
      param = param.clearSuperPropertyExpressions();
      body = body.clearSuperPropertyExpressions();
      param = param.clearNewTargetExpressions();
      body = body.clearNewTargetExpressions();
      if (isStrictFunctionBody(node.body)) {
        param = param.enforceStrictErrors();
        body = body.enforceStrictErrors();
      }
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceSetter', this).call(this, node, { name: name, param: param, body: body });
      if (!isSimpleParameterList && isStrictFunctionBody(node.body)) {
        s = s.addError(new _earlyErrorState.EarlyError(node, 'Functions with non-simple parameter lists may not contain a "use strict" directive'));
      }
      s = s.observeVarBoundary();
      return s;
    }
  }, {
    key: 'reduceStaticMemberExpression',
    value: function reduceStaticMemberExpression(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceStaticMemberExpression', this).apply(this, arguments);
      if (node.object.type === 'Super') {
        s = s.observeSuperPropertyExpression(node);
      }
      return s;
    }
  }, {
    key: 'reduceSwitchStatement',
    value: function reduceSwitchStatement(node, _ref17) {
      var discriminant = _ref17.discriminant,
          cases = _ref17.cases;

      var sCases = this.append.apply(this, _toConsumableArray$5(cases));
      sCases = sCases.functionDeclarationNamesAreLexical();
      sCases = sCases.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);
      sCases = sCases.enforceConflictingLexicallyDeclaredNames(sCases.varDeclaredNames, DUPLICATE_BINDING);
      sCases = sCases.observeLexicalBoundary();
      var s = this.append(discriminant, sCases);
      s = s.clearFreeBreakStatements();
      return s;
    }
  }, {
    key: 'reduceSwitchStatementWithDefault',
    value: function reduceSwitchStatementWithDefault(node, _ref18) {
      var discriminant = _ref18.discriminant,
          preDefaultCases = _ref18.preDefaultCases,
          defaultCase = _ref18.defaultCase,
          postDefaultCases = _ref18.postDefaultCases;

      var sCases = this.append.apply(this, [defaultCase].concat(_toConsumableArray$5(preDefaultCases), _toConsumableArray$5(postDefaultCases)));
      sCases = sCases.functionDeclarationNamesAreLexical();
      sCases = sCases.enforceDuplicateLexicallyDeclaredNames(DUPLICATE_BINDING);
      sCases = sCases.enforceConflictingLexicallyDeclaredNames(sCases.varDeclaredNames, DUPLICATE_BINDING);
      sCases = sCases.observeLexicalBoundary();
      var s = this.append(discriminant, sCases);
      s = s.clearFreeBreakStatements();
      return s;
    }
  }, {
    key: 'reduceVariableDeclaration',
    value: function reduceVariableDeclaration(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceVariableDeclaration', this).apply(this, arguments);
      switch (node.kind) {
        case 'const':
        case 'let':
          {
            s = s.observeLexicalDeclaration();
            if (s.lexicallyDeclaredNames.has('let')) {
              s.lexicallyDeclaredNames.get('let').forEach(function (n) {
                s = s.addError(new _earlyErrorState.EarlyError(n, 'Lexical declarations must not have a binding named "let"'));
              });
            }
            break;
          }
        case 'var':
          s = s.observeVarDeclaration();
          break;
      }
      return s;
    }
  }, {
    key: 'reduceVariableDeclarationStatement',
    value: function reduceVariableDeclarationStatement(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceVariableDeclarationStatement', this).apply(this, arguments);
      if (node.declaration.kind === 'const') {
        node.declaration.declarators.forEach(function (declarator) {
          if (declarator.init == null) {
            s = s.addError(new _earlyErrorState.EarlyError(declarator, 'Constant lexical declarations must have an initialiser'));
          }
        });
      }
      return s;
    }
  }, {
    key: 'reduceWhileStatement',
    value: function reduceWhileStatement(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceWhileStatement', this).apply(this, arguments);
      if (isLabelledFunction(node.body)) {
        s = s.addError(new _earlyErrorState.EarlyError(node.body, 'The body of a while statement must not be a labeled function declaration'));
      }
      s = s.clearFreeContinueStatements().clearFreeBreakStatements();
      return s;
    }
  }, {
    key: 'reduceWithStatement',
    value: function reduceWithStatement(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceWithStatement', this).apply(this, arguments);
      if (isLabelledFunction(node.body)) {
        s = s.addError(new _earlyErrorState.EarlyError(node.body, 'The body of a with statement must not be a labeled function declaration'));
      }
      s = s.addStrictError(new _earlyErrorState.EarlyError(node, 'Strict mode code must not include a with statement'));
      return s;
    }
  }, {
    key: 'reduceYieldExpression',
    value: function reduceYieldExpression(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceYieldExpression', this).apply(this, arguments);
      s = s.observeYieldExpression(node);
      return s;
    }
  }, {
    key: 'reduceYieldGeneratorExpression',
    value: function reduceYieldGeneratorExpression(node) {
      var s = _get$1(EarlyErrorChecker.prototype.__proto__ || Object.getPrototypeOf(EarlyErrorChecker.prototype), 'reduceYieldGeneratorExpression', this).apply(this, arguments);
      s = s.observeYieldExpression(node);
      return s;
    }
  }], [{
    key: 'check',
    value: function check(node) {
      return (0, _shiftReducer2$3.default)(new EarlyErrorChecker(), node).errors;
    }
  }]);

  return EarlyErrorChecker;
}(_shiftReducer$4.MonoidalReducer);

(function (exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TokenType = exports.TokenClass = exports.Tokenizer = exports.ParserWithLocation = exports.GenericParser = exports.EarlyErrorChecker = exports.parseScriptWithLocation = exports.parseModuleWithLocation = exports.parseScript = exports.parseModule = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _tokenizer = tokenizer;

Object.defineProperty(exports, 'Tokenizer', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_tokenizer).default;
  }
});
Object.defineProperty(exports, 'TokenClass', {
  enumerable: true,
  get: function get() {
    return _tokenizer.TokenClass;
  }
});
Object.defineProperty(exports, 'TokenType', {
  enumerable: true,
  get: function get() {
    return _tokenizer.TokenType;
  }
});

var _parser = parser;

var _earlyErrors = earlyErrors;

var _utils = utils$1;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2016 Shape Security, Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var ParserWithLocation = function (_GenericParser) {
  _inherits(ParserWithLocation, _GenericParser);

  function ParserWithLocation(source) {
    _classCallCheck(this, ParserWithLocation);

    var _this = _possibleConstructorReturn(this, (ParserWithLocation.__proto__ || Object.getPrototypeOf(ParserWithLocation)).call(this, source));

    _this.locations = new WeakMap();
    _this.comments = [];
    return _this;
  }

  _createClass(ParserWithLocation, [{
    key: 'startNode',
    value: function startNode() {
      return this.getLocation();
    }
  }, {
    key: 'finishNode',
    value: function finishNode(node, start) {
      if (node.type === 'Script' || node.type === 'Module') {
        this.locations.set(node, {
          start: { line: 1, column: 0, offset: 0 },
          end: this.getLocation()
        });
        return node;
      }
      if (node.type === 'TemplateExpression') {
        // Adjust TemplateElements to not include surrounding backticks or braces
        for (var i = 0; i < node.elements.length; i += 2) {
          var endAdjustment = i < node.elements.length - 1 ? 2 : 1; // discard '${' or '`' respectively
          var element = node.elements[i];
          var location = this.locations.get(element);
          this.locations.set(element, {
            start: { line: location.start.line, column: location.start.column + 1, offset: location.start.offset + 1 }, // discard '}' or '`'
            end: { line: location.end.line, column: location.end.column - endAdjustment, offset: location.end.offset - endAdjustment }
          });
        }
      }
      this.locations.set(node, {
        start: start,
        end: this.getLastTokenEndLocation()
      });
      return node;
    }
  }, {
    key: 'copyNode',
    value: function copyNode(src, dest) {
      this.locations.set(dest, this.locations.get(src)); // todo check undefined
      return dest;
    }
  }, {
    key: 'skipSingleLineComment',
    value: function skipSingleLineComment(offset) {
      // We're actually extending the *tokenizer*, here.
      var start = {
        line: this.line + 1,
        column: this.index - this.lineStart,
        offset: this.index
      };
      var c = this.source[this.index];
      var type = c === '/' ? 'SingleLine' : c === '<' ? 'HTMLOpen' : 'HTMLClose';

      _get(ParserWithLocation.prototype.__proto__ || Object.getPrototypeOf(ParserWithLocation.prototype), 'skipSingleLineComment', this).call(this, offset);

      var end = {
        line: this.line + 1,
        column: this.index - this.lineStart,
        offset: this.index
      };
      var trailingLineTerminatorCharacters = this.source[this.index - 2] === '\r' ? 2 : (0, _utils.isLineTerminator)(this.source.charCodeAt(this.index - 1)) ? 1 : 0;
      var text = this.source.substring(start.offset + offset, end.offset - trailingLineTerminatorCharacters);

      this.comments.push({ text: text, type: type, start: start, end: end });
    }
  }, {
    key: 'skipMultiLineComment',
    value: function skipMultiLineComment() {
      var start = {
        line: this.line + 1,
        column: this.index - this.lineStart,
        offset: this.index
      };
      var type = 'MultiLine';

      var retval = _get(ParserWithLocation.prototype.__proto__ || Object.getPrototypeOf(ParserWithLocation.prototype), 'skipMultiLineComment', this).call(this);

      var end = {
        line: this.line + 1,
        column: this.index - this.lineStart,
        offset: this.index
      };
      var text = this.source.substring(start.offset + 2, end.offset - 2);

      this.comments.push({ text: text, type: type, start: start, end: end });

      return retval;
    }
  }]);

  return ParserWithLocation;
}(_parser.GenericParser);

function generateInterface(parsingFunctionName) {
  return function parse(code) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$earlyErrors = _ref.earlyErrors,
        earlyErrors = _ref$earlyErrors === undefined ? true : _ref$earlyErrors;

    var parser = new _parser.GenericParser(code);
    var tree = parser[parsingFunctionName]();
    if (earlyErrors) {
      var errors = _earlyErrors.EarlyErrorChecker.check(tree);
      // for now, just throw the first error; we will handle multiple errors later
      if (errors.length > 0) {
        throw new _tokenizer.JsError(0, 1, 0, errors[0].message);
      }
    }
    return tree;
  };
}

function generateInterfaceWithLocation(parsingFunctionName) {
  return function parse(code) {
    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref2$earlyErrors = _ref2.earlyErrors,
        earlyErrors = _ref2$earlyErrors === undefined ? true : _ref2$earlyErrors;

    var parser = new ParserWithLocation(code);
    var tree = parser[parsingFunctionName]();
    if (earlyErrors) {
      var errors = _earlyErrors.EarlyErrorChecker.check(tree);
      // for now, just throw the first error; we will handle multiple errors later
      if (errors.length > 0) {
        var _errors$ = errors[0],
            node = _errors$.node,
            message = _errors$.message;
        var _parser$locations$get = parser.locations.get(node).start,
            offset = _parser$locations$get.offset,
            line = _parser$locations$get.line,
            column = _parser$locations$get.column;

        throw new _tokenizer.JsError(offset, line, column, message);
      }
    }
    return { tree: tree, locations: parser.locations, comments: parser.comments };
  };
}

exports.parseModule = generateInterface('parseModule');
var parseScript = exports.parseScript = generateInterface('parseScript');
exports.parseModuleWithLocation = generateInterfaceWithLocation('parseModule');
exports.parseScriptWithLocation = generateInterfaceWithLocation('parseScript');
exports.default = parseScript;
exports.EarlyErrorChecker = _earlyErrors.EarlyErrorChecker;
exports.GenericParser = _parser.GenericParser;
exports.ParserWithLocation = ParserWithLocation;
}(dist$8));

var dist$3 = {};

var scopeLookup = {};

var multimap = {exports: {}};

(function (module, exports) {

/* global module, define */

function mapEach(map, operation){
  var keys = map.keys();
  var next;
  while(!(next = keys.next()).done) {
    operation(map.get(next.value), next.value, map);
  }
}

var Multimap = (function() {
  var mapCtor;
  if (typeof Map !== 'undefined') {
    mapCtor = Map;

    if (!Map.prototype.keys) {
      Map.prototype.keys = function() {
        var keys = [];
        this.forEach(function(item, key) {
          keys.push(key);
        });
        return keys;
      };
    }
  }

  function Multimap(iterable) {
    var self = this;

    self._map = mapCtor;

    if (Multimap.Map) {
      self._map = Multimap.Map;
    }

    self._ = self._map ? new self._map() : {};

    if (iterable) {
      iterable.forEach(function(i) {
        self.set(i[0], i[1]);
      });
    }
  }

  /**
   * @param {Object} key
   * @return {Array} An array of values, undefined if no such a key;
   */
  Multimap.prototype.get = function(key) {
    return this._map ? this._.get(key) : this._[key];
  };

  /**
   * @param {Object} key
   * @param {Object} val...
   */
  Multimap.prototype.set = function(key, val) {
    var args = Array.prototype.slice.call(arguments);

    key = args.shift();

    var entry = this.get(key);
    if (!entry) {
      entry = [];
      if (this._map)
        this._.set(key, entry);
      else
        this._[key] = entry;
    }

    Array.prototype.push.apply(entry, args);
    return this;
  };

  /**
   * @param {Object} key
   * @param {Object=} val
   * @return {boolean} true if any thing changed
   */
  Multimap.prototype.delete = function(key, val) {
    if (!this.has(key))
      return false;

    if (arguments.length == 1) {
      this._map ? (this._.delete(key)) : (delete this._[key]);
      return true;
    } else {
      var entry = this.get(key);
      var idx = entry.indexOf(val);
      if (idx != -1) {
        entry.splice(idx, 1);
        return true;
      }
    }

    return false;
  };

  /**
   * @param {Object} key
   * @param {Object=} val
   * @return {boolean} whether the map contains 'key' or 'key=>val' pair
   */
  Multimap.prototype.has = function(key, val) {
    var hasKey = this._map ? this._.has(key) : this._.hasOwnProperty(key);

    if (arguments.length == 1 || !hasKey)
      return hasKey;

    var entry = this.get(key) || [];
    return entry.indexOf(val) != -1;
  };


  /**
   * @return {Array} all the keys in the map
   */
  Multimap.prototype.keys = function() {
    if (this._map)
      return makeIterator(this._.keys());

    return makeIterator(Object.keys(this._));
  };

  /**
   * @return {Array} all the values in the map
   */
  Multimap.prototype.values = function() {
    var vals = [];
    this.forEachEntry(function(entry) {
      Array.prototype.push.apply(vals, entry);
    });

    return makeIterator(vals);
  };

  /**
   *
   */
  Multimap.prototype.forEachEntry = function(iter) {
    mapEach(this, iter);
  };

  Multimap.prototype.forEach = function(iter) {
    var self = this;
    self.forEachEntry(function(entry, key) {
      entry.forEach(function(item) {
        iter(item, key, self);
      });
    });
  };


  Multimap.prototype.clear = function() {
    if (this._map) {
      this._.clear();
    } else {
      this._ = {};
    }
  };

  Object.defineProperty(
    Multimap.prototype,
    "size", {
      configurable: false,
      enumerable: true,
      get: function() {
        var total = 0;

        mapEach(this, function(value){
          total += value.length;
        });

        return total;
      }
    });

  var safariNext;

  try{
    safariNext = new Function('iterator', 'makeIterator', 'var keysArray = []; for(var key of iterator){keysArray.push(key);} return makeIterator(keysArray).next;');
  }catch(error){
    // for of not implemented;
  }

  function makeIterator(iterator){
    if(Array.isArray(iterator)){
      var nextIndex = 0;

      return {
        next: function(){
          return nextIndex < iterator.length ?
            {value: iterator[nextIndex++], done: false} :
          {done: true};
        }
      };
    }

    // Only an issue in safari
    if(!iterator.next && safariNext){
      iterator.next = safariNext(iterator, makeIterator);
    }

    return iterator;
  }

  return Multimap;
})();


if(module && module.exports)
  module.exports = Multimap;
}(multimap));

var scope = {};

var variable = {};

Object.defineProperty(variable, "__esModule", {
  value: true
});
/**
 * Copyright 2014 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class Variable {
  constructor(name, references, declarations) {
    this.name = name;
    this.references = references;
    this.declarations = declarations;
  }
}
variable.default = Variable;

Object.defineProperty(scope, "__esModule", {
  value: true
});
scope.GlobalScope = scope.Scope = scope.ScopeType = undefined;

var _variable$1 = variable;

var _variable2$1 = _interopRequireDefault$9(_variable$1);

function _interopRequireDefault$9(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ScopeType {
  constructor(name) {
    this.name = name;
  }
}

scope.ScopeType = ScopeType; /**
                                * Copyright 2015 Shape Security, Inc.
                                *
                                * Licensed under the Apache License, Version 2.0 (the "License")
                                * you may not use this file except in compliance with the License.
                                * You may obtain a copy of the License at
                                *
                                *     http://www.apache.org/licenses/LICENSE-2.0
                                *
                                * Unless required by applicable law or agreed to in writing, software
                                * distributed under the License is distributed on an "AS IS" BASIS,
                                * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                * See the License for the specific language governing permissions and
                                * limitations under the License.
                                */

ScopeType.GLOBAL = new ScopeType('Global');
ScopeType.MODULE = new ScopeType('Module');
ScopeType.SCRIPT = new ScopeType('Script');
ScopeType.ARROW_FUNCTION = new ScopeType('ArrowFunction');
ScopeType.FUNCTION = new ScopeType('Function');
ScopeType.FUNCTION_NAME = new ScopeType('FunctionName'); // named function expressions
ScopeType.CLASS_NAME = new ScopeType('ClassName'); // named class expressions
ScopeType.PARAMETERS = new ScopeType('Parameters');
ScopeType.PARAMETER_EXPRESSION = new ScopeType('ParameterExpression');
ScopeType.WITH = new ScopeType('With');
ScopeType.CATCH = new ScopeType('Catch');
ScopeType.BLOCK = new ScopeType('Block');

class Scope {
  constructor(_ref) {
    var _this = this;

    var children = _ref.children,
        variables = _ref.variables,
        through = _ref.through,
        type = _ref.type,
        isDynamic = _ref.isDynamic,
        astNode = _ref.astNode;

    this.children = children;
    this.through = through;
    this.type = type;
    this.astNode = astNode;

    this.variables = new Map();
    variables.forEach(function (v) {
      return _this.variables.set(v.name, v);
    });

    this.variableList = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = this.variables.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var x = _step.value;

        this.variableList.push(x);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    this.dynamic = isDynamic || type === ScopeType.WITH || type === ScopeType.GLOBAL;
  }

  isGlobal() {
    return this.type === ScopeType.GLOBAL;
  }

  lookupVariable(name) {
    return this.variables.get(name);
  }
}

scope.Scope = Scope;
class GlobalScope extends Scope {
  constructor(_ref2) {
    var _this2;

    var children = _ref2.children,
        variables = _ref2.variables,
        through = _ref2.through,
        astNode = _ref2.astNode;

    _this2 = super({ children, variables, through, type: ScopeType.GLOBAL, isDynamic: true, astNode });
    through.forEachEntry(function (v, k) {
      _this2.variables.set(k, new _variable2$1.default(k, v, []));
    });
    this.variableList = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = this.variables.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var x = _step2.value;

        this.variableList.push(x);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }
}
scope.GlobalScope = GlobalScope;

Object.defineProperty(scopeLookup, "__esModule", {
  value: true
});

var _multimap$2 = multimap.exports;

var _multimap2$2 = _interopRequireDefault$8(_multimap$2);

var _scope$2 = scope;

function _interopRequireDefault$8(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright 2015 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class ScopeLookup {
  constructor(globalScope) {
    var _this = this;

    this.scope = globalScope;
    this.variableMap = new _multimap2$2.default();

    var addVariable = function addVariable(v) {
      v.declarations.forEach(function (decl) {
        return _this.variableMap.set(decl.node, v);
      });
      v.references.forEach(function (ref) {
        if (!_this.variableMap.has(ref.node) || _this.variableMap.get(ref.node).indexOf(v) === -1) {
          _this.variableMap.set(ref.node, v);
        }
      });
    };
    (function addVariables(scope) {
      scope.children.forEach(addVariables);
      scope.variables.forEach(addVariable);
    })(globalScope);
  }

  lookup(node) {
    /* Gives a map from BindingIdentifiers and IdentifierExpressions to a list of Variables.
    Assuming that the given node is defined in the scope, the map always returns at least one Variable.
    It will return two in precisely three cases:
    `try{}catch(e){var e = ...}`, function declarations in blocks for which annex B.3.3 applies, and class declarations.
    In this case the same identifier refers to two variables.
    Both are returned, with the block-scoped variable being returned first in the first two cases, and the inner variable
    being returned first in the third case. */
    return this.variableMap.get(node);
  }

  isGlobal(node) {
    return this.scope instanceof _scope$2.GlobalScope && this.variableMap.has(node);
  }
}
scopeLookup.default = ScopeLookup;

var annotateSource = {};

Object.defineProperty(annotateSource, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

annotateSource.default = annotate;

function _toConsumableArray$4(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Copyright 2017 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function insertInto(annotations, index, text, afterExisting) {
  for (var i = 0; i < annotations.length; ++i) {
    if (annotations[i].index >= index) {
      if (afterExisting) {
        while (i < annotations.length && annotations[i].index === index) {
          ++i;
        }
      }

      annotations.splice(i, 0, { index, text });
      return;
    }
  }
  annotations.push({ index, text });
}

class Info {
  constructor() {
    this.declares = [];
    this.reads = [];
    this.writes = [];
    this.deletes = [];
    this.scopes = [];
  }
}

class DefaultMap extends Map {
  constructor(thunk) {
    super();
    this.thunk = thunk;
  }

  get(v) {
    if (!this.has(v)) {
      this.set(v, this.thunk());
    }
    return super.get(v);
  }
}

function annotate(_ref) {
  var source = _ref.source,
      locations = _ref.locations,
      globalScope = _ref.globalScope,
      _ref$skipUnambiguous = _ref.skipUnambiguous,
      skipUnambiguous = _ref$skipUnambiguous === undefined ? false : _ref$skipUnambiguous,
      _ref$skipScopes = _ref.skipScopes,
      skipScopes = _ref$skipScopes === undefined ? false : _ref$skipScopes;


  var nodeInfo = new DefaultMap(function () {
    return new Info();
  });

  var vars = new DefaultMap(function () {
    return [];
  }); // MultiMap, I guess?

  function addVariable(v) {
    vars.get(v.name).push(v);
    v.declarations.forEach(function (d) {
      nodeInfo.get(d.node).declares.push(v);
    });
    v.references.forEach(function (r) {
      var info = nodeInfo.get(r.node);
      if (r.accessibility.isDelete) {
        if (r.accessibility.isRead || r.accessibility.isWrite) {
          throw new Error('some reference is a delete *and* something else');
        }
        info.deletes.push(v);
      } else {
        if (r.accessibility.isRead) {
          info.reads.push(v);
        }
        if (r.accessibility.isWrite) {
          info.writes.push(v);
        }
      }
    });
  }

  (function visit(scope) {
    if (!skipScopes) nodeInfo.get(scope.astNode).scopes.push(scope);
    scope.variables.forEach(addVariable);
    scope.children.forEach(visit);
  })(globalScope);

  // an annotation is { index, text }
  var annotations = [];

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = nodeInfo.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref2 = _step.value;

      var _ref3 = _slicedToArray(_ref2, 2);

      var node = _ref3[0];
      var info = _ref3[1];

      var location = locations.get(node);
      if (info.scopes.length > 0) {
        if (info.declares.length !== 0 || info.reads.length !== 0 || info.writes.length !== 0 || info.deletes.length !== 0) {
          throw new Error('unhandled condition: node is scope and reference');
        }

        var _arr = [].concat(_toConsumableArray$4(info.scopes));

        for (var _i = 0; _i < _arr.length; _i++) {
          var scope = _arr[_i];
          var scopeVars = [].concat(_toConsumableArray$4(scope.variables.values()));
          var _text = 'Scope (' + scope.type.name + ')';
          if (scopeVars.length > 0) {
            _text += ' declaring ' + scopeVars.map(function (v) {
              return v.name + '#' + vars.get(v.name).indexOf(v);
            }).join(', ');
          }
          insertInto(annotations, location.start.offset, '/* ' + _text + ' */', true);
          insertInto(annotations, location.end.offset, '/* end scope */', true);
        }
      } else if (info.deletes.length > 0) {
        var deletes = skipUnambiguous ? info.deletes.filter(function (v) {
          return vars.get(v.name).length > 1;
        }) : info.deletes;
        if (deletes.length > 0) {
          insertInto(annotations, location.end.offset, '/* deletes ' + deletes.map(function (v) {
            return v.name + '#' + vars.get(v.name).indexOf(v);
          }).join(', ') + ' */', false);
        }
      } else {
        var _text2 = '';
        var declares = skipUnambiguous ? info.declares.filter(function (v) {
          return vars.get(v.name).length > 1;
        }) : info.declares;
        if (declares.length > 0) {
          _text2 += 'declares ' + declares.map(function (v) {
            return v.name + '#' + vars.get(v.name).indexOf(v);
          }).join(', ');
        }
        var reads = skipUnambiguous ? info.reads.filter(function (v) {
          return vars.get(v.name).length > 1;
        }) : info.reads;
        if (reads.length > 0) {
          if (_text2.length > 0) _text2 += '; ';
          _text2 += 'reads ' + reads.map(function (v) {
            return v.name + '#' + vars.get(v.name).indexOf(v);
          }).join(', ');
        }
        var writes = skipUnambiguous ? info.writes.filter(function (v) {
          return vars.get(v.name).length > 1;
        }) : info.writes;
        if (writes.length > 0) {
          if (_text2.length > 0) _text2 += '; ';
          _text2 += 'writes ' + writes.map(function (v) {
            return v.name + '#' + vars.get(v.name).indexOf(v);
          }).join(', ');
        }
        if (_text2 !== '') {
          insertInto(annotations, location.end.offset, '/* ' + _text2 + ' */', false);
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var out = '';
  var previousIndex = 0;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = annotations[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _ref4 = _step2.value;
      var index = _ref4.index;
      var text = _ref4.text;

      out += source.substring(previousIndex, index) + text;
      previousIndex = index;
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  out += source.substring(previousIndex);
  return out;
}

var declaration = {};

Object.defineProperty(declaration, "__esModule", {
  value: true
});
/**
 * Copyright 2015 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class DeclarationType {
  constructor(name, isBlockScoped) {
    this.name = name;
    this.isBlockScoped = !!isBlockScoped;
    this.isFunctionScoped = !isBlockScoped;
  }
}

declaration.DeclarationType = DeclarationType;
class BlockScopedDeclaration extends DeclarationType {
  constructor(name) {
    super(name, true);
  }
}

declaration.BlockScopedDeclaration = BlockScopedDeclaration;
class FunctionScopedDeclaration extends DeclarationType {
  constructor(name) {
    super(name, false);
  }
}

declaration.FunctionScopedDeclaration = FunctionScopedDeclaration;
DeclarationType.VAR = new FunctionScopedDeclaration('Var');
DeclarationType.CONST = new BlockScopedDeclaration('Const');
DeclarationType.LET = new BlockScopedDeclaration('Let');
DeclarationType.FUNCTION_DECLARATION = new BlockScopedDeclaration('FunctionDeclaration'); // potentially also `FunctionScoped` versions of this, for functions at top of functions/etc?
DeclarationType.FUNCTION_VAR_DECLARATION = new FunctionScopedDeclaration('FunctionB33'); // The additional variable created by B.3.3.
DeclarationType.FUNCTION_NAME = new BlockScopedDeclaration('FunctionExpressionName');
DeclarationType.CLASS_DECLARATION = new BlockScopedDeclaration('ClassDeclaration');
DeclarationType.CLASS_NAME = new BlockScopedDeclaration('ClassName');
DeclarationType.PARAMETER = new FunctionScopedDeclaration('Parameter');
DeclarationType.CATCH_PARAMETER = new BlockScopedDeclaration('CatchParam');
DeclarationType.IMPORT = new BlockScopedDeclaration('Import');

DeclarationType.fromVarDeclKind = function (variableDeclarationKind) {
  switch (variableDeclarationKind) {
    case 'var':
      return DeclarationType.VAR;
    case 'const':
      return DeclarationType.CONST;
    case 'let':
      return DeclarationType.LET;
    default:
      throw new Error('Invalid VariableDeclarationKind: ' + JSON.stringify(variableDeclarationKind));
  }
};

class Declaration {
  constructor(node, type) {
    this.node = node;
    this.type = type;
  }
}
declaration.Declaration = Declaration;

var reference = {};

Object.defineProperty(reference, "__esModule", {
  value: true
});
/**
 * Copyright 2015 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class Accessibility {
  constructor(isRead, isWrite, isDelete) {
    this.isRead = !!isRead;
    this.isWrite = !!isWrite;
    this.isReadWrite = !!(isRead && isWrite);
    this.isDelete = !!isDelete;
  }
}

reference.Accessibility = Accessibility;
Accessibility.READ = new Accessibility(true, false, false);
Accessibility.WRITE = new Accessibility(false, true, false);
Accessibility.READWRITE = new Accessibility(true, true, false);
Accessibility.DELETE = new Accessibility(false, false, true);

class Reference {
  constructor(node, accessibility) {
    this.node = node;
    this.accessibility = accessibility;
  }
}
reference.Reference = Reference;

var scopeSerializer = {};

var flattener = {};

var dist$2 = {};

// Generated by src/generate-spec.js.

/**
 * Copyright 2016 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Hack to make Babel6 import this as a module.
Object.defineProperty(dist$2, "__esModule", {
  value: true
});

dist$2.default = (function() {
  var SPEC = {};

  var BOOLEAN = { typeName: "Boolean" };
  var DOUBLE = { typeName: "Number" };
  var STRING = { typeName: "String" };
  function Maybe(arg) { return { typeName: "Maybe", argument: arg }; }
  function List(arg) { return { typeName: "List", argument: arg }; }
  function Const(arg) { return { typeName: "Const", argument: arg }; }
  function Union() { return { typeName: "Union", arguments: [].slice.call(arguments, 0) }; }


  var TYPE_INDICATOR = {
    typeName: "Enum",
    values: ["ArrayAssignmentTarget", "ArrayBinding", "ArrayExpression", "ArrowExpression", "AssignmentExpression", "AssignmentTargetIdentifier", "AssignmentTargetPropertyIdentifier", "AssignmentTargetPropertyProperty", "AssignmentTargetWithDefault", "AwaitExpression", "BinaryExpression", "BindingIdentifier", "BindingPropertyIdentifier", "BindingPropertyProperty", "BindingWithDefault", "Block", "BlockStatement", "BreakStatement", "CallExpression", "CatchClause", "ClassDeclaration", "ClassElement", "ClassExpression", "CompoundAssignmentExpression", "ComputedMemberAssignmentTarget", "ComputedMemberExpression", "ComputedPropertyName", "ConditionalExpression", "ContinueStatement", "DataProperty", "DebuggerStatement", "Directive", "DoWhileStatement", "EmptyStatement", "Export", "ExportAllFrom", "ExportDefault", "ExportFrom", "ExportFromSpecifier", "ExportLocalSpecifier", "ExportLocals", "ExpressionStatement", "ForAwaitStatement", "ForInStatement", "ForOfStatement", "ForStatement", "FormalParameters", "FunctionBody", "FunctionDeclaration", "FunctionExpression", "Getter", "IdentifierExpression", "IfStatement", "Import", "ImportNamespace", "ImportSpecifier", "LabeledStatement", "LiteralBooleanExpression", "LiteralInfinityExpression", "LiteralNullExpression", "LiteralNumericExpression", "LiteralRegExpExpression", "LiteralStringExpression", "Method", "Module", "NewExpression", "NewTargetExpression", "ObjectAssignmentTarget", "ObjectBinding", "ObjectExpression", "ReturnStatement", "Script", "Setter", "ShorthandProperty", "SpreadElement", "SpreadProperty", "StaticMemberAssignmentTarget", "StaticMemberExpression", "StaticPropertyName", "Super", "SwitchCase", "SwitchDefault", "SwitchStatement", "SwitchStatementWithDefault", "TemplateElement", "TemplateExpression", "ThisExpression", "ThrowStatement", "TryCatchStatement", "TryFinallyStatement", "UnaryExpression", "UpdateExpression", "VariableDeclaration", "VariableDeclarationStatement", "VariableDeclarator", "WhileStatement", "WithStatement", "YieldExpression", "YieldGeneratorExpression"]
  };

  var BinaryOperator = {
    typeName: "Enum",
    values: ["==", "!=", "===", "!==", "<", "<=", ">", ">=", "in", "instanceof", "<<", ">>", ">>>", "+", "-", "*", "/", "%", "**", ",", "||", "&&", "|", "^", "&"]
  };

  var CompoundAssignmentOperator = {
    typeName: "Enum",
    values: ["+=", "-=", "*=", "/=", "%=", "**=", "<<=", ">>=", ">>>=", "|=", "^=", "&="]
  };

  var UnaryOperator = {
    typeName: "Enum",
    values: ["+", "-", "!", "~", "typeof", "void", "delete"]
  };

  var UpdateOperator = {
    typeName: "Enum",
    values: ["++", "--"]
  };

  var VariableDeclarationKind = {
    typeName: "Enum",
    values: ["var", "let", "const"]
  };


  var ArrayAssignmentTarget = SPEC.ArrayAssignmentTarget = {};
  var ArrayBinding = SPEC.ArrayBinding = {};
  var ArrayExpression = SPEC.ArrayExpression = {};
  var ArrowExpression = SPEC.ArrowExpression = {};
  var AssignmentExpression = SPEC.AssignmentExpression = {};
  var AssignmentTargetIdentifier = SPEC.AssignmentTargetIdentifier = {};
  var AssignmentTargetPropertyIdentifier = SPEC.AssignmentTargetPropertyIdentifier = {};
  var AssignmentTargetPropertyProperty = SPEC.AssignmentTargetPropertyProperty = {};
  var AssignmentTargetWithDefault = SPEC.AssignmentTargetWithDefault = {};
  var AwaitExpression = SPEC.AwaitExpression = {};
  var BinaryExpression = SPEC.BinaryExpression = {};
  var BindingIdentifier = SPEC.BindingIdentifier = {};
  var BindingPropertyIdentifier = SPEC.BindingPropertyIdentifier = {};
  var BindingPropertyProperty = SPEC.BindingPropertyProperty = {};
  var BindingWithDefault = SPEC.BindingWithDefault = {};
  var Block = SPEC.Block = {};
  var BlockStatement = SPEC.BlockStatement = {};
  var BreakStatement = SPEC.BreakStatement = {};
  var CallExpression = SPEC.CallExpression = {};
  var CatchClause = SPEC.CatchClause = {};
  var ClassDeclaration = SPEC.ClassDeclaration = {};
  var ClassElement = SPEC.ClassElement = {};
  var ClassExpression = SPEC.ClassExpression = {};
  var CompoundAssignmentExpression = SPEC.CompoundAssignmentExpression = {};
  var ComputedMemberAssignmentTarget = SPEC.ComputedMemberAssignmentTarget = {};
  var ComputedMemberExpression = SPEC.ComputedMemberExpression = {};
  var ComputedPropertyName = SPEC.ComputedPropertyName = {};
  var ConditionalExpression = SPEC.ConditionalExpression = {};
  var ContinueStatement = SPEC.ContinueStatement = {};
  var DataProperty = SPEC.DataProperty = {};
  var DebuggerStatement = SPEC.DebuggerStatement = {};
  var Directive = SPEC.Directive = {};
  var DoWhileStatement = SPEC.DoWhileStatement = {};
  var EmptyStatement = SPEC.EmptyStatement = {};
  var Export = SPEC.Export = {};
  var ExportAllFrom = SPEC.ExportAllFrom = {};
  var ExportDefault = SPEC.ExportDefault = {};
  var ExportFrom = SPEC.ExportFrom = {};
  var ExportFromSpecifier = SPEC.ExportFromSpecifier = {};
  var ExportLocalSpecifier = SPEC.ExportLocalSpecifier = {};
  var ExportLocals = SPEC.ExportLocals = {};
  var ExpressionStatement = SPEC.ExpressionStatement = {};
  var ForAwaitStatement = SPEC.ForAwaitStatement = {};
  var ForInStatement = SPEC.ForInStatement = {};
  var ForOfStatement = SPEC.ForOfStatement = {};
  var ForStatement = SPEC.ForStatement = {};
  var FormalParameters = SPEC.FormalParameters = {};
  var FunctionBody = SPEC.FunctionBody = {};
  var FunctionDeclaration = SPEC.FunctionDeclaration = {};
  var FunctionExpression = SPEC.FunctionExpression = {};
  var Getter = SPEC.Getter = {};
  var IdentifierExpression = SPEC.IdentifierExpression = {};
  var IfStatement = SPEC.IfStatement = {};
  var Import = SPEC.Import = {};
  var ImportNamespace = SPEC.ImportNamespace = {};
  var ImportSpecifier = SPEC.ImportSpecifier = {};
  var LabeledStatement = SPEC.LabeledStatement = {};
  var LiteralBooleanExpression = SPEC.LiteralBooleanExpression = {};
  var LiteralInfinityExpression = SPEC.LiteralInfinityExpression = {};
  var LiteralNullExpression = SPEC.LiteralNullExpression = {};
  var LiteralNumericExpression = SPEC.LiteralNumericExpression = {};
  var LiteralRegExpExpression = SPEC.LiteralRegExpExpression = {};
  var LiteralStringExpression = SPEC.LiteralStringExpression = {};
  var Method = SPEC.Method = {};
  var Module = SPEC.Module = {};
  var NewExpression = SPEC.NewExpression = {};
  var NewTargetExpression = SPEC.NewTargetExpression = {};
  var ObjectAssignmentTarget = SPEC.ObjectAssignmentTarget = {};
  var ObjectBinding = SPEC.ObjectBinding = {};
  var ObjectExpression = SPEC.ObjectExpression = {};
  var ReturnStatement = SPEC.ReturnStatement = {};
  var Script = SPEC.Script = {};
  var Setter = SPEC.Setter = {};
  var ShorthandProperty = SPEC.ShorthandProperty = {};
  var SpreadElement = SPEC.SpreadElement = {};
  var SpreadProperty = SPEC.SpreadProperty = {};
  var StaticMemberAssignmentTarget = SPEC.StaticMemberAssignmentTarget = {};
  var StaticMemberExpression = SPEC.StaticMemberExpression = {};
  var StaticPropertyName = SPEC.StaticPropertyName = {};
  var Super = SPEC.Super = {};
  var SwitchCase = SPEC.SwitchCase = {};
  var SwitchDefault = SPEC.SwitchDefault = {};
  var SwitchStatement = SPEC.SwitchStatement = {};
  var SwitchStatementWithDefault = SPEC.SwitchStatementWithDefault = {};
  var TemplateElement = SPEC.TemplateElement = {};
  var TemplateExpression = SPEC.TemplateExpression = {};
  var ThisExpression = SPEC.ThisExpression = {};
  var ThrowStatement = SPEC.ThrowStatement = {};
  var TryCatchStatement = SPEC.TryCatchStatement = {};
  var TryFinallyStatement = SPEC.TryFinallyStatement = {};
  var UnaryExpression = SPEC.UnaryExpression = {};
  var UpdateExpression = SPEC.UpdateExpression = {};
  var VariableDeclaration = SPEC.VariableDeclaration = {};
  var VariableDeclarationStatement = SPEC.VariableDeclarationStatement = {};
  var VariableDeclarator = SPEC.VariableDeclarator = {};
  var WhileStatement = SPEC.WhileStatement = {};
  var WithStatement = SPEC.WithStatement = {};
  var YieldExpression = SPEC.YieldExpression = {};
  var YieldGeneratorExpression = SPEC.YieldGeneratorExpression = {};

  var MemberExpression = Union(ComputedMemberExpression, StaticMemberExpression);
  var AssignmentTargetProperty = Union(AssignmentTargetPropertyIdentifier, AssignmentTargetPropertyProperty);
  Union(ClassDeclaration, ClassExpression);
  var ExportDeclaration = Union(Export, ExportAllFrom, ExportDefault, ExportFrom, ExportLocals);
  var PropertyName = Union(ComputedPropertyName, StaticPropertyName);
  Union(FunctionDeclaration, FunctionExpression);
  var ImportDeclaration = Union(Import, ImportNamespace);
  var IterationStatement = Union(DoWhileStatement, ForAwaitStatement, ForInStatement, ForOfStatement, ForStatement, WhileStatement);
  var MemberAssignmentTarget = Union(ComputedMemberAssignmentTarget, StaticMemberAssignmentTarget);
  var BindingProperty = Union(BindingPropertyIdentifier, BindingPropertyProperty);
  var MethodDefinition = Union(Getter, Method, Setter);
  var Program = Union(Module, Script);
  var VariableReference = Union(AssignmentTargetIdentifier, BindingIdentifier, IdentifierExpression);
  var NamedObjectProperty = Union(DataProperty, MethodDefinition);
  var Expression = Union(ArrayExpression, ArrowExpression, AssignmentExpression, AwaitExpression, BinaryExpression, CallExpression, ClassExpression, CompoundAssignmentExpression, ConditionalExpression, FunctionExpression, IdentifierExpression, LiteralBooleanExpression, LiteralInfinityExpression, LiteralNullExpression, LiteralNumericExpression, LiteralRegExpExpression, LiteralStringExpression, MemberExpression, NewExpression, NewTargetExpression, ObjectExpression, TemplateExpression, ThisExpression, UnaryExpression, UpdateExpression, YieldExpression, YieldGeneratorExpression);
  var Statement = Union(BlockStatement, BreakStatement, ClassDeclaration, ContinueStatement, DebuggerStatement, EmptyStatement, ExpressionStatement, FunctionDeclaration, IfStatement, IterationStatement, LabeledStatement, ReturnStatement, SwitchStatement, SwitchStatementWithDefault, ThrowStatement, TryCatchStatement, TryFinallyStatement, VariableDeclarationStatement, WithStatement);
  var ObjectProperty = Union(NamedObjectProperty, ShorthandProperty, SpreadProperty);
  Union(ArrayAssignmentTarget, ArrayBinding, AssignmentTargetProperty, AssignmentTargetWithDefault, BindingProperty, BindingWithDefault, Block, CatchClause, ClassElement, Directive, ExportDeclaration, ExportFromSpecifier, ExportLocalSpecifier, Expression, FormalParameters, FunctionBody, ImportDeclaration, ImportSpecifier, MemberAssignmentTarget, ObjectAssignmentTarget, ObjectBinding, ObjectProperty, Program, PropertyName, SpreadElement, Statement, Super, SwitchCase, SwitchDefault, TemplateElement, VariableDeclaration, VariableDeclarator, VariableReference);

  ArrayAssignmentTarget.typeName = "ArrayAssignmentTarget";
  ArrayAssignmentTarget.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ArrayAssignmentTarget" },
    { name: "elements", type: List(Maybe(Union(AssignmentTargetWithDefault, Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget))))) },
    { name: "rest", type: Maybe(Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget))) }
  ];

  ArrayBinding.typeName = "ArrayBinding";
  ArrayBinding.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ArrayBinding" },
    { name: "elements", type: List(Maybe(Union(BindingWithDefault, Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding))))) },
    { name: "rest", type: Maybe(Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding))) }
  ];

  ArrayExpression.typeName = "ArrayExpression";
  ArrayExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ArrayExpression" },
    { name: "elements", type: List(Maybe(Union(Expression, SpreadElement))) }
  ];

  ArrowExpression.typeName = "ArrowExpression";
  ArrowExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ArrowExpression" },
    { name: "isAsync", type: BOOLEAN },
    { name: "params", type: FormalParameters },
    { name: "body", type: Union(Expression, FunctionBody) }
  ];

  AssignmentExpression.typeName = "AssignmentExpression";
  AssignmentExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "AssignmentExpression" },
    { name: "binding", type: Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget)) },
    { name: "expression", type: Expression }
  ];

  AssignmentTargetIdentifier.typeName = "AssignmentTargetIdentifier";
  AssignmentTargetIdentifier.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "AssignmentTargetIdentifier" },
    { name: "name", type: STRING }
  ];

  AssignmentTargetPropertyIdentifier.typeName = "AssignmentTargetPropertyIdentifier";
  AssignmentTargetPropertyIdentifier.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "AssignmentTargetPropertyIdentifier" },
    { name: "binding", type: AssignmentTargetIdentifier },
    { name: "init", type: Maybe(Expression) }
  ];

  AssignmentTargetPropertyProperty.typeName = "AssignmentTargetPropertyProperty";
  AssignmentTargetPropertyProperty.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "AssignmentTargetPropertyProperty" },
    { name: "name", type: PropertyName },
    { name: "binding", type: Union(AssignmentTargetWithDefault, Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget))) }
  ];

  AssignmentTargetWithDefault.typeName = "AssignmentTargetWithDefault";
  AssignmentTargetWithDefault.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "AssignmentTargetWithDefault" },
    { name: "binding", type: Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget)) },
    { name: "init", type: Expression }
  ];

  AwaitExpression.typeName = "AwaitExpression";
  AwaitExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "AwaitExpression" },
    { name: "expression", type: Expression }
  ];

  BinaryExpression.typeName = "BinaryExpression";
  BinaryExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "BinaryExpression" },
    { name: "left", type: Expression },
    { name: "operator", type: BinaryOperator },
    { name: "right", type: Expression }
  ];

  BindingIdentifier.typeName = "BindingIdentifier";
  BindingIdentifier.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "BindingIdentifier" },
    { name: "name", type: STRING }
  ];

  BindingPropertyIdentifier.typeName = "BindingPropertyIdentifier";
  BindingPropertyIdentifier.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "BindingPropertyIdentifier" },
    { name: "binding", type: BindingIdentifier },
    { name: "init", type: Maybe(Expression) }
  ];

  BindingPropertyProperty.typeName = "BindingPropertyProperty";
  BindingPropertyProperty.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "BindingPropertyProperty" },
    { name: "name", type: PropertyName },
    { name: "binding", type: Union(BindingWithDefault, Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding))) }
  ];

  BindingWithDefault.typeName = "BindingWithDefault";
  BindingWithDefault.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "BindingWithDefault" },
    { name: "binding", type: Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding)) },
    { name: "init", type: Expression }
  ];

  Block.typeName = "Block";
  Block.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "Block" },
    { name: "statements", type: List(Statement) }
  ];

  BlockStatement.typeName = "BlockStatement";
  BlockStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "BlockStatement" },
    { name: "block", type: Block }
  ];

  BreakStatement.typeName = "BreakStatement";
  BreakStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "BreakStatement" },
    { name: "label", type: Maybe(STRING) }
  ];

  CallExpression.typeName = "CallExpression";
  CallExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "CallExpression" },
    { name: "callee", type: Union(Expression, Super) },
    { name: "arguments", type: List(Union(Expression, SpreadElement)) }
  ];

  CatchClause.typeName = "CatchClause";
  CatchClause.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "CatchClause" },
    { name: "binding", type: Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding)) },
    { name: "body", type: Block }
  ];

  ClassDeclaration.typeName = "ClassDeclaration";
  ClassDeclaration.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ClassDeclaration" },
    { name: "name", type: BindingIdentifier },
    { name: "super", type: Maybe(Expression) },
    { name: "elements", type: List(ClassElement) }
  ];

  ClassElement.typeName = "ClassElement";
  ClassElement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ClassElement" },
    { name: "isStatic", type: BOOLEAN },
    { name: "method", type: MethodDefinition }
  ];

  ClassExpression.typeName = "ClassExpression";
  ClassExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ClassExpression" },
    { name: "name", type: Maybe(BindingIdentifier) },
    { name: "super", type: Maybe(Expression) },
    { name: "elements", type: List(ClassElement) }
  ];

  CompoundAssignmentExpression.typeName = "CompoundAssignmentExpression";
  CompoundAssignmentExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "CompoundAssignmentExpression" },
    { name: "binding", type: Union(AssignmentTargetIdentifier, MemberAssignmentTarget) },
    { name: "operator", type: CompoundAssignmentOperator },
    { name: "expression", type: Expression }
  ];

  ComputedMemberAssignmentTarget.typeName = "ComputedMemberAssignmentTarget";
  ComputedMemberAssignmentTarget.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ComputedMemberAssignmentTarget" },
    { name: "object", type: Union(Expression, Super) },
    { name: "expression", type: Expression }
  ];

  ComputedMemberExpression.typeName = "ComputedMemberExpression";
  ComputedMemberExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ComputedMemberExpression" },
    { name: "object", type: Union(Expression, Super) },
    { name: "expression", type: Expression }
  ];

  ComputedPropertyName.typeName = "ComputedPropertyName";
  ComputedPropertyName.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ComputedPropertyName" },
    { name: "expression", type: Expression }
  ];

  ConditionalExpression.typeName = "ConditionalExpression";
  ConditionalExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ConditionalExpression" },
    { name: "test", type: Expression },
    { name: "consequent", type: Expression },
    { name: "alternate", type: Expression }
  ];

  ContinueStatement.typeName = "ContinueStatement";
  ContinueStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ContinueStatement" },
    { name: "label", type: Maybe(STRING) }
  ];

  DataProperty.typeName = "DataProperty";
  DataProperty.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "DataProperty" },
    { name: "name", type: PropertyName },
    { name: "expression", type: Expression }
  ];

  DebuggerStatement.typeName = "DebuggerStatement";
  DebuggerStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "DebuggerStatement" }
  ];

  Directive.typeName = "Directive";
  Directive.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "Directive" },
    { name: "rawValue", type: STRING }
  ];

  DoWhileStatement.typeName = "DoWhileStatement";
  DoWhileStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "DoWhileStatement" },
    { name: "body", type: Statement },
    { name: "test", type: Expression }
  ];

  EmptyStatement.typeName = "EmptyStatement";
  EmptyStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "EmptyStatement" }
  ];

  Export.typeName = "Export";
  Export.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "Export" },
    { name: "declaration", type: Union(ClassDeclaration, FunctionDeclaration, VariableDeclaration) }
  ];

  ExportAllFrom.typeName = "ExportAllFrom";
  ExportAllFrom.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ExportAllFrom" },
    { name: "moduleSpecifier", type: STRING }
  ];

  ExportDefault.typeName = "ExportDefault";
  ExportDefault.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ExportDefault" },
    { name: "body", type: Union(ClassDeclaration, Expression, FunctionDeclaration) }
  ];

  ExportFrom.typeName = "ExportFrom";
  ExportFrom.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ExportFrom" },
    { name: "namedExports", type: List(ExportFromSpecifier) },
    { name: "moduleSpecifier", type: STRING }
  ];

  ExportFromSpecifier.typeName = "ExportFromSpecifier";
  ExportFromSpecifier.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ExportFromSpecifier" },
    { name: "name", type: STRING },
    { name: "exportedName", type: Maybe(STRING) }
  ];

  ExportLocalSpecifier.typeName = "ExportLocalSpecifier";
  ExportLocalSpecifier.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ExportLocalSpecifier" },
    { name: "name", type: IdentifierExpression },
    { name: "exportedName", type: Maybe(STRING) }
  ];

  ExportLocals.typeName = "ExportLocals";
  ExportLocals.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ExportLocals" },
    { name: "namedExports", type: List(ExportLocalSpecifier) }
  ];

  ExpressionStatement.typeName = "ExpressionStatement";
  ExpressionStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ExpressionStatement" },
    { name: "expression", type: Expression }
  ];

  ForAwaitStatement.typeName = "ForAwaitStatement";
  ForAwaitStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ForAwaitStatement" },
    { name: "left", type: Union(Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget)), VariableDeclaration) },
    { name: "right", type: Expression },
    { name: "body", type: Statement }
  ];

  ForInStatement.typeName = "ForInStatement";
  ForInStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ForInStatement" },
    { name: "left", type: Union(Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget)), VariableDeclaration) },
    { name: "right", type: Expression },
    { name: "body", type: Statement }
  ];

  ForOfStatement.typeName = "ForOfStatement";
  ForOfStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ForOfStatement" },
    { name: "left", type: Union(Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget)), VariableDeclaration) },
    { name: "right", type: Expression },
    { name: "body", type: Statement }
  ];

  ForStatement.typeName = "ForStatement";
  ForStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ForStatement" },
    { name: "init", type: Maybe(Union(Expression, VariableDeclaration)) },
    { name: "test", type: Maybe(Expression) },
    { name: "update", type: Maybe(Expression) },
    { name: "body", type: Statement }
  ];

  FormalParameters.typeName = "FormalParameters";
  FormalParameters.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "FormalParameters" },
    { name: "items", type: List(Union(BindingWithDefault, Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding)))) },
    { name: "rest", type: Maybe(Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding))) }
  ];

  FunctionBody.typeName = "FunctionBody";
  FunctionBody.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "FunctionBody" },
    { name: "directives", type: List(Directive) },
    { name: "statements", type: List(Statement) }
  ];

  FunctionDeclaration.typeName = "FunctionDeclaration";
  FunctionDeclaration.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "FunctionDeclaration" },
    { name: "isAsync", type: BOOLEAN },
    { name: "isGenerator", type: BOOLEAN },
    { name: "name", type: BindingIdentifier },
    { name: "params", type: FormalParameters },
    { name: "body", type: FunctionBody }
  ];

  FunctionExpression.typeName = "FunctionExpression";
  FunctionExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "FunctionExpression" },
    { name: "isAsync", type: BOOLEAN },
    { name: "isGenerator", type: BOOLEAN },
    { name: "name", type: Maybe(BindingIdentifier) },
    { name: "params", type: FormalParameters },
    { name: "body", type: FunctionBody }
  ];

  Getter.typeName = "Getter";
  Getter.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "Getter" },
    { name: "name", type: PropertyName },
    { name: "body", type: FunctionBody }
  ];

  IdentifierExpression.typeName = "IdentifierExpression";
  IdentifierExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "IdentifierExpression" },
    { name: "name", type: STRING }
  ];

  IfStatement.typeName = "IfStatement";
  IfStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "IfStatement" },
    { name: "test", type: Expression },
    { name: "consequent", type: Statement },
    { name: "alternate", type: Maybe(Statement) }
  ];

  Import.typeName = "Import";
  Import.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "Import" },
    { name: "defaultBinding", type: Maybe(BindingIdentifier) },
    { name: "namedImports", type: List(ImportSpecifier) },
    { name: "moduleSpecifier", type: STRING }
  ];

  ImportNamespace.typeName = "ImportNamespace";
  ImportNamespace.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ImportNamespace" },
    { name: "defaultBinding", type: Maybe(BindingIdentifier) },
    { name: "namespaceBinding", type: BindingIdentifier },
    { name: "moduleSpecifier", type: STRING }
  ];

  ImportSpecifier.typeName = "ImportSpecifier";
  ImportSpecifier.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ImportSpecifier" },
    { name: "name", type: Maybe(STRING) },
    { name: "binding", type: BindingIdentifier }
  ];

  LabeledStatement.typeName = "LabeledStatement";
  LabeledStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "LabeledStatement" },
    { name: "label", type: STRING },
    { name: "body", type: Statement }
  ];

  LiteralBooleanExpression.typeName = "LiteralBooleanExpression";
  LiteralBooleanExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "LiteralBooleanExpression" },
    { name: "value", type: BOOLEAN }
  ];

  LiteralInfinityExpression.typeName = "LiteralInfinityExpression";
  LiteralInfinityExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "LiteralInfinityExpression" }
  ];

  LiteralNullExpression.typeName = "LiteralNullExpression";
  LiteralNullExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "LiteralNullExpression" }
  ];

  LiteralNumericExpression.typeName = "LiteralNumericExpression";
  LiteralNumericExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "LiteralNumericExpression" },
    { name: "value", type: DOUBLE }
  ];

  LiteralRegExpExpression.typeName = "LiteralRegExpExpression";
  LiteralRegExpExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "LiteralRegExpExpression" },
    { name: "pattern", type: STRING },
    { name: "global", type: BOOLEAN },
    { name: "ignoreCase", type: BOOLEAN },
    { name: "multiLine", type: BOOLEAN },
    { name: "dotAll", type: BOOLEAN },
    { name: "unicode", type: BOOLEAN },
    { name: "sticky", type: BOOLEAN }
  ];

  LiteralStringExpression.typeName = "LiteralStringExpression";
  LiteralStringExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "LiteralStringExpression" },
    { name: "value", type: STRING }
  ];

  Method.typeName = "Method";
  Method.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "Method" },
    { name: "isAsync", type: BOOLEAN },
    { name: "isGenerator", type: BOOLEAN },
    { name: "name", type: PropertyName },
    { name: "params", type: FormalParameters },
    { name: "body", type: FunctionBody }
  ];

  Module.typeName = "Module";
  Module.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "Module" },
    { name: "directives", type: List(Directive) },
    { name: "items", type: List(Union(ExportDeclaration, ImportDeclaration, Statement)) }
  ];

  NewExpression.typeName = "NewExpression";
  NewExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "NewExpression" },
    { name: "callee", type: Expression },
    { name: "arguments", type: List(Union(Expression, SpreadElement)) }
  ];

  NewTargetExpression.typeName = "NewTargetExpression";
  NewTargetExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "NewTargetExpression" }
  ];

  ObjectAssignmentTarget.typeName = "ObjectAssignmentTarget";
  ObjectAssignmentTarget.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ObjectAssignmentTarget" },
    { name: "properties", type: List(AssignmentTargetProperty) },
    { name: "rest", type: Maybe(Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget))) }
  ];

  ObjectBinding.typeName = "ObjectBinding";
  ObjectBinding.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ObjectBinding" },
    { name: "properties", type: List(BindingProperty) },
    { name: "rest", type: Maybe(Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding))) }
  ];

  ObjectExpression.typeName = "ObjectExpression";
  ObjectExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ObjectExpression" },
    { name: "properties", type: List(ObjectProperty) }
  ];

  ReturnStatement.typeName = "ReturnStatement";
  ReturnStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ReturnStatement" },
    { name: "expression", type: Maybe(Expression) }
  ];

  Script.typeName = "Script";
  Script.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "Script" },
    { name: "directives", type: List(Directive) },
    { name: "statements", type: List(Statement) }
  ];

  Setter.typeName = "Setter";
  Setter.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "Setter" },
    { name: "name", type: PropertyName },
    { name: "param", type: Union(BindingWithDefault, Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding))) },
    { name: "body", type: FunctionBody }
  ];

  ShorthandProperty.typeName = "ShorthandProperty";
  ShorthandProperty.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ShorthandProperty" },
    { name: "name", type: IdentifierExpression }
  ];

  SpreadElement.typeName = "SpreadElement";
  SpreadElement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "SpreadElement" },
    { name: "expression", type: Expression }
  ];

  SpreadProperty.typeName = "SpreadProperty";
  SpreadProperty.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "SpreadProperty" },
    { name: "expression", type: Expression }
  ];

  StaticMemberAssignmentTarget.typeName = "StaticMemberAssignmentTarget";
  StaticMemberAssignmentTarget.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "StaticMemberAssignmentTarget" },
    { name: "object", type: Union(Expression, Super) },
    { name: "property", type: STRING }
  ];

  StaticMemberExpression.typeName = "StaticMemberExpression";
  StaticMemberExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "StaticMemberExpression" },
    { name: "object", type: Union(Expression, Super) },
    { name: "property", type: STRING }
  ];

  StaticPropertyName.typeName = "StaticPropertyName";
  StaticPropertyName.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "StaticPropertyName" },
    { name: "value", type: STRING }
  ];

  Super.typeName = "Super";
  Super.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "Super" }
  ];

  SwitchCase.typeName = "SwitchCase";
  SwitchCase.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "SwitchCase" },
    { name: "test", type: Expression },
    { name: "consequent", type: List(Statement) }
  ];

  SwitchDefault.typeName = "SwitchDefault";
  SwitchDefault.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "SwitchDefault" },
    { name: "consequent", type: List(Statement) }
  ];

  SwitchStatement.typeName = "SwitchStatement";
  SwitchStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "SwitchStatement" },
    { name: "discriminant", type: Expression },
    { name: "cases", type: List(SwitchCase) }
  ];

  SwitchStatementWithDefault.typeName = "SwitchStatementWithDefault";
  SwitchStatementWithDefault.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "SwitchStatementWithDefault" },
    { name: "discriminant", type: Expression },
    { name: "preDefaultCases", type: List(SwitchCase) },
    { name: "defaultCase", type: SwitchDefault },
    { name: "postDefaultCases", type: List(SwitchCase) }
  ];

  TemplateElement.typeName = "TemplateElement";
  TemplateElement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "TemplateElement" },
    { name: "rawValue", type: STRING }
  ];

  TemplateExpression.typeName = "TemplateExpression";
  TemplateExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "TemplateExpression" },
    { name: "tag", type: Maybe(Expression) },
    { name: "elements", type: List(Union(Expression, TemplateElement)) }
  ];

  ThisExpression.typeName = "ThisExpression";
  ThisExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ThisExpression" }
  ];

  ThrowStatement.typeName = "ThrowStatement";
  ThrowStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "ThrowStatement" },
    { name: "expression", type: Expression }
  ];

  TryCatchStatement.typeName = "TryCatchStatement";
  TryCatchStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "TryCatchStatement" },
    { name: "body", type: Block },
    { name: "catchClause", type: CatchClause }
  ];

  TryFinallyStatement.typeName = "TryFinallyStatement";
  TryFinallyStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "TryFinallyStatement" },
    { name: "body", type: Block },
    { name: "catchClause", type: Maybe(CatchClause) },
    { name: "finalizer", type: Block }
  ];

  UnaryExpression.typeName = "UnaryExpression";
  UnaryExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "UnaryExpression" },
    { name: "operator", type: UnaryOperator },
    { name: "operand", type: Expression }
  ];

  UpdateExpression.typeName = "UpdateExpression";
  UpdateExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "UpdateExpression" },
    { name: "isPrefix", type: BOOLEAN },
    { name: "operator", type: UpdateOperator },
    { name: "operand", type: Union(AssignmentTargetIdentifier, MemberAssignmentTarget) }
  ];

  VariableDeclaration.typeName = "VariableDeclaration";
  VariableDeclaration.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "VariableDeclaration" },
    { name: "kind", type: VariableDeclarationKind },
    { name: "declarators", type: List(VariableDeclarator) }
  ];

  VariableDeclarationStatement.typeName = "VariableDeclarationStatement";
  VariableDeclarationStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "VariableDeclarationStatement" },
    { name: "declaration", type: VariableDeclaration }
  ];

  VariableDeclarator.typeName = "VariableDeclarator";
  VariableDeclarator.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "VariableDeclarator" },
    { name: "binding", type: Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding)) },
    { name: "init", type: Maybe(Expression) }
  ];

  WhileStatement.typeName = "WhileStatement";
  WhileStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "WhileStatement" },
    { name: "test", type: Expression },
    { name: "body", type: Statement }
  ];

  WithStatement.typeName = "WithStatement";
  WithStatement.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "WithStatement" },
    { name: "object", type: Expression },
    { name: "body", type: Statement }
  ];

  YieldExpression.typeName = "YieldExpression";
  YieldExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "YieldExpression" },
    { name: "expression", type: Maybe(Expression) }
  ];

  YieldGeneratorExpression.typeName = "YieldGeneratorExpression";
  YieldGeneratorExpression.fields = [
    { name: "type", type: Const(TYPE_INDICATOR), value: "YieldGeneratorExpression" },
    { name: "expression", type: Expression }
  ];

  return SPEC;
}());

Object.defineProperty(flattener, "__esModule", {
  value: true
});

var _shiftReducer$3 = dist$5;

var _shiftReducer2$2 = _interopRequireDefault$7(_shiftReducer$3);

var _shiftSpec = dist$2;

var _shiftSpec2 = _interopRequireDefault$7(_shiftSpec);

function _interopRequireDefault$7(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO this file should live elsewhere

/**
 * Copyright 2015 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class ListMonoid {
  constructor(list) {
    this.list = list;
  }

  static empty() {
    return new ListMonoid([]);
  }

  concat(b) {
    return new ListMonoid(this.list.concat(b.list));
  }

  extract() {
    return this.list;
  }
}

// Gives a flat list of all nodes rooted at the given node, in preorder: that is, a node appears before its children.
class Flattener extends _shiftReducer$3.MonoidalReducer {
  // We explicitly invoke Monoidal.prototype methods so that we can automatically generate methods from the spec.
  constructor() {
    super(ListMonoid);
  }

  static flatten(node) {
    return (0, _shiftReducer2$2.default)(new this(), node).extract();
  }
}

flattener.default = Flattener;

var _loop = function _loop(typeName) {
  Object.defineProperty(Flattener.prototype, `reduce${typeName}`, {
    value(node, state) {
      return new ListMonoid([node]).concat(_shiftReducer$3.MonoidalReducer.prototype[`reduce${typeName}`].call(this, node, state));
    }
  });
};

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = Object.keys(_shiftSpec2.default)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var typeName = _step.value;

    _loop(typeName);
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator.return) {
      _iterator.return();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

Object.defineProperty(scopeSerializer, "__esModule", {
  value: true
});
scopeSerializer.serialize = serialize;

var _flattener = flattener;

var _flattener2 = _interopRequireDefault$6(_flattener);

var _declaration$2 = declaration;

function _interopRequireDefault$6(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright 2015 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class Serializer {
  constructor(scope) {
    var _this = this;

    this.scope = scope;
    var nodes = _flattener2.default.flatten(scope.astNode);
    this.ids = new Map();
    nodes.forEach(function (n) {
      return _this.ids.set(n, _this.ids.size);
    });
    this.declarationCompare = declarationCompare.bind(this, this.ids);
    this.referenceCompare = referenceCompare.bind(this, this.ids);
    this.variableCompare = variableCompare.bind(this, this.ids);
  }

  serialize() {
    return this.serializeScope(this.scope);
  }

  serializeScope(scope) {
    return `{"node": "${this.serializeNode(scope.astNode)}"` + `, "type": "${scope.type.name}"` + `, "isDynamic": ${scope.dynamic}` + `, "through": ${this.serializeReferenceList(this.collectThrough(scope.through))}` + `, "variables": ${this.serializeVariableList(scope.variableList)}` + `, "children": [${scope.children.map(this.serializeScope.bind(this)).join(', ')}]` + '}';
  }

  serializeNode(node) {
    if (node.type === 'IdentifierExpression') {
      return 'IdentifierExpression(' + node.name + ')_' + this.ids.get(node);
    } else if (node.type === 'AssignmentTargetIdentifier') {
      return 'AssignmentTargetIdentifier(' + node.name + ')_' + this.ids.get(node);
    } else if (node.type === 'BindingIdentifier') {
      return 'BindingIdentifier(' + node.name + ')_' + this.ids.get(node);
    }
    return node.type + '_' + this.ids.get(node);
  }

  collectThrough(through) {
    var references = [];
    through.forEach(function (v) {
      return references.push(v);
    });
    return references.sort(this.referenceCompare);
  }

  serializeReference(reference) {
    return `{"node": "${this.serializeNode(reference.node)}"` + `, "accessibility": "${reference.accessibility.isDelete ? 'Delete' : ''}${reference.accessibility.isRead ? 'Read' : ''}${reference.accessibility.isWrite ? 'Write' : ''}"` + '}';
  }

  serializeReferenceList(references) {
    return `[${references.map(this.serializeReference.bind(this)).join(', ')}]`;
  }

  serializeDeclaration(declaration) {
    return `{"node": "${this.serializeNode(declaration.node)}"` + `, "kind": "${declaration.type.name}"` + '}';
  }

  serializeVariable(variable) {
    return `{"name": "${variable.name}"` + `, "references": ${this.serializeReferenceList(variable.references)}` + `, "declarations": [${variable.declarations.map(this.serializeDeclaration.bind(this)).join(', ')}]` + '}';
  }

  serializeVariableList(variables) {
    variables = variables.slice(0).sort(this.variableCompare);
    return `[${variables.map(this.serializeVariable.bind(this)).join(', ')}]`;
  }
}

function declarationCompare(ids, d1, d2) {
  function kindToInd(kind) {
    switch (kind) {
      case _declaration$2.DeclarationType.VAR:
        return 0;
      case _declaration$2.DeclarationType.CONST:
        return 1;
      case _declaration$2.DeclarationType.LET:
        return 2;
      case _declaration$2.DeclarationType.FUNCTION_DECLARATION:
        return 3;
      case _declaration$2.DeclarationType.FUNCTION_VAR_DECLARATION:
        return 4;
      case _declaration$2.DeclarationType.FUNCTION_NAME:
        return 5;
      case _declaration$2.DeclarationType.CLASS_NAME:
        return 6;
      case _declaration$2.DeclarationType.PARAMETER:
        return 7;
      case _declaration$2.DeclarationType.CATCH_PARAMETER:
        return 8;
      case _declaration$2.DeclarationType.IMPORT:
        return 9;
      default:
        throw 'Unrecognized declaration type';
    }
  }
  var comparison = kindToInd(d1.type) - kindToInd(d2.type);
  if (comparison !== 0) {
    return comparison;
  }
  return ids.get(d1.node) - ids.get(d2.node);
}

function referenceCompare(ids, r1, r2) {
  var comparison = (r1.accessibility.isRead ? 1 : 0) + (r1.accessibility.isWrite ? 2 : 0) + (r1.accessibility.isDelete ? 4 : 0) - ((r2.accessibility.isRead ? 1 : 0) + (r2.accessibility.isWrite ? 2 : 0) + (r2.accessibility.isDelete ? 4 : 0));
  if (comparison !== 0) {
    return comparison;
  }
  return ids.get(r1.node) - ids.get(r2.node);
}

function variableCompare(ids, v1, v2) {
  if (v1.name < v2.name) {
    return -1;
  }
  if (v1.name > v2.name) {
    return 1;
  }
  var comparison = v1.declarations.length - v2.declarations.length;
  if (comparison !== 0) {
    return comparison;
  }
  comparison = v1.references.length - v2.references.length;
  if (comparison !== 0) {
    return comparison;
  }
  for (var i = 0; i < v1.declarations.length; ++i) {
    var d1 = v1.declarations[i];
    var d2 = v2.declarations[i];
    comparison = declarationCompare(ids, d1, d2);
    if (comparison !== 0) {
      return comparison;
    }
  }
  for (var _i = 0; _i < v1.references.length; ++_i) {
    var r1 = v1.references[_i];
    var r2 = v2.references[_i];
    comparison = referenceCompare(ids, r1, r2);
    if (comparison !== 0) {
      return comparison;
    }
  }
  return 0;
}

function serialize(scope) {
  return new Serializer(scope).serialize();
}

var scopeAnalyzer = {};

var scopeState = {};

Object.defineProperty(scopeState, "__esModule", {
  value: true
});

var _multimap$1 = multimap.exports;

var _multimap2$1 = _interopRequireDefault$5(_multimap$1);

var _declaration$1 = declaration;

var _reference$1 = reference;

var _scope$1 = scope;

var _variable = variable;

var _variable2 = _interopRequireDefault$5(_variable);

function _interopRequireDefault$5(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function merge$1(multiMap, otherMultiMap) {
  otherMultiMap.forEachEntry(function (v, k) {
    multiMap.set.apply(multiMap, [k].concat(v));
  });
  return multiMap;
} /**
   * Copyright 2015 Shape Security, Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License")
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

function resolveDeclarations(freeIdentifiers, decls, variables) {
  decls.forEachEntry(function (declarations, name) {
    var references = freeIdentifiers.get(name) || [];
    variables = variables.concat(new _variable2.default(name, references, declarations));
    freeIdentifiers.delete(name);
  });
  return variables;
}

class ScopeState {
  constructor() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$freeIdentifiers = _ref.freeIdentifiers,
        freeIdentifiers = _ref$freeIdentifiers === undefined ? new _multimap2$1.default() : _ref$freeIdentifiers,
        _ref$functionScopedDe = _ref.functionScopedDeclarations,
        functionScopedDeclarations = _ref$functionScopedDe === undefined ? new _multimap2$1.default() : _ref$functionScopedDe,
        _ref$blockScopedDecla = _ref.blockScopedDeclarations,
        blockScopedDeclarations = _ref$blockScopedDecla === undefined ? new _multimap2$1.default() : _ref$blockScopedDecla,
        _ref$functionDeclarat = _ref.functionDeclarations,
        functionDeclarations = _ref$functionDeclarat === undefined ? new _multimap2$1.default() : _ref$functionDeclarat,
        _ref$children = _ref.children,
        children = _ref$children === undefined ? [] : _ref$children,
        _ref$dynamic = _ref.dynamic,
        dynamic = _ref$dynamic === undefined ? false : _ref$dynamic,
        _ref$bindingsForParen = _ref.bindingsForParent,
        bindingsForParent = _ref$bindingsForParen === undefined ? [] : _ref$bindingsForParen,
        _ref$atsForParent = _ref.atsForParent,
        atsForParent = _ref$atsForParent === undefined ? [] : _ref$atsForParent,
        _ref$potentiallyVarSc = _ref.potentiallyVarScopedFunctionDeclarations,
        potentiallyVarScopedFunctionDeclarations = _ref$potentiallyVarSc === undefined ? new _multimap2$1.default() : _ref$potentiallyVarSc,
        _ref$hasParameterExpr = _ref.hasParameterExpressions,
        hasParameterExpressions = _ref$hasParameterExpr === undefined ? false : _ref$hasParameterExpr;

    this.freeIdentifiers = freeIdentifiers;
    this.functionScopedDeclarations = functionScopedDeclarations;
    this.blockScopedDeclarations = blockScopedDeclarations;
    this.functionDeclarations = functionDeclarations;
    this.children = children;
    this.dynamic = dynamic;
    this.bindingsForParent = bindingsForParent;
    this.atsForParent = atsForParent;
    this.potentiallyVarScopedFunctionDeclarations = potentiallyVarScopedFunctionDeclarations;
    this.hasParameterExpressions = hasParameterExpressions;
  }

  static empty() {
    return new ScopeState({});
  }

  /*
   * Monoidal append: merges the two states together
   */
  concat(b) {
    if (this === b) {
      return this;
    }
    return new ScopeState({
      freeIdentifiers: merge$1(merge$1(new _multimap2$1.default(), this.freeIdentifiers), b.freeIdentifiers),
      functionScopedDeclarations: merge$1(merge$1(new _multimap2$1.default(), this.functionScopedDeclarations), b.functionScopedDeclarations),
      blockScopedDeclarations: merge$1(merge$1(new _multimap2$1.default(), this.blockScopedDeclarations), b.blockScopedDeclarations),
      functionDeclarations: merge$1(merge$1(new _multimap2$1.default(), this.functionDeclarations), b.functionDeclarations),
      children: this.children.concat(b.children),
      dynamic: this.dynamic || b.dynamic,
      bindingsForParent: this.bindingsForParent.concat(b.bindingsForParent),
      atsForParent: this.atsForParent.concat(b.atsForParent),
      potentiallyVarScopedFunctionDeclarations: merge$1(merge$1(new _multimap2$1.default(), this.potentiallyVarScopedFunctionDeclarations), b.potentiallyVarScopedFunctionDeclarations),
      hasParameterExpressions: this.hasParameterExpressions || b.hasParameterExpressions
    });
  }

  /*
   * Observe variables entering scope
   */
  addDeclarations(kind) {
    var keepBindingsForParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var declMap = new _multimap2$1.default();
    merge$1(declMap, kind.isBlockScoped ? this.blockScopedDeclarations : this.functionScopedDeclarations);
    this.bindingsForParent.forEach(function (binding) {
      return declMap.set(binding.name, new _declaration$1.Declaration(binding, kind));
    });
    var s = new ScopeState(this);
    if (kind.isBlockScoped) {
      s.blockScopedDeclarations = declMap;
    } else {
      s.functionScopedDeclarations = declMap;
    }
    if (!keepBindingsForParent) {
      s.bindingsForParent = [];
      s.atsForParent = [];
    }
    return s;
  }

  addFunctionDeclaration() {
    if (this.bindingsForParent.length === 0) {
      return this; // i.e., this function declaration is `export default function () {...}`
    }
    var binding = this.bindingsForParent[0];
    var s = new ScopeState(this);
    merge$1(s.functionDeclarations, new _multimap2$1.default([[binding.name, new _declaration$1.Declaration(binding, _declaration$1.DeclarationType.FUNCTION_DECLARATION)]]));
    s.bindingsForParent = [];
    return s;
  }

  /*
   * Observe a reference to a variable
   */
  addReferences(accessibility) {
    var keepBindingsForParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var freeMap = new _multimap2$1.default();
    merge$1(freeMap, this.freeIdentifiers);
    this.bindingsForParent.forEach(function (binding) {
      return freeMap.set(binding.name, new _reference$1.Reference(binding, accessibility));
    });
    this.atsForParent.forEach(function (binding) {
      return freeMap.set(binding.name, new _reference$1.Reference(binding, accessibility));
    });
    var s = new ScopeState(this);
    s.freeIdentifiers = freeMap;
    if (!keepBindingsForParent) {
      s.bindingsForParent = [];
      s.atsForParent = [];
    }
    return s;
  }

  taint() {
    var s = new ScopeState(this);
    s.dynamic = true;
    return s;
  }

  withoutBindingsForParent() {
    var s = new ScopeState(this);
    s.bindingsForParent = [];
    return s;
  }

  withParameterExpressions() {
    var s = new ScopeState(this);
    s.hasParameterExpressions = true;
    return s;
  }

  withoutParameterExpressions() {
    var s = new ScopeState(this);
    s.hasParameterExpressions = false;
    return s;
  }

  withPotentialVarFunctions(functions) {
    var pvsfd = merge$1(new _multimap2$1.default(), this.potentiallyVarScopedFunctionDeclarations);
    functions.forEach(function (f) {
      return pvsfd.set(f.name, new _declaration$1.Declaration(f, _declaration$1.DeclarationType.FUNCTION_VAR_DECLARATION));
    });
    var s = new ScopeState(this);
    s.potentiallyVarScopedFunctionDeclarations = pvsfd;
    return s;
  }

  /*
   * Used when a scope boundary is encountered. Resolves found free identifiers
   * and declarations into variable objects. Any free identifiers remaining are
   * carried forward into the new state object.
   */
  finish(astNode, scopeType) {
    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref2$shouldResolveAr = _ref2.shouldResolveArguments,
        shouldResolveArguments = _ref2$shouldResolveAr === undefined ? false : _ref2$shouldResolveAr,
        _ref2$shouldB = _ref2.shouldB33,
        shouldB33 = _ref2$shouldB === undefined ? false : _ref2$shouldB,
        paramsToBlockB33Hoisting = _ref2.paramsToBlockB33Hoisting;

    var variables = [];
    var functionScoped = new _multimap2$1.default();
    var freeIdentifiers = merge$1(new _multimap2$1.default(), this.freeIdentifiers);
    var pvsfd = merge$1(new _multimap2$1.default(), this.potentiallyVarScopedFunctionDeclarations);
    var children = this.children;

    var hasSimpleCatchBinding = scopeType.name === 'Catch' && astNode.binding.type === 'BindingIdentifier';
    this.blockScopedDeclarations.forEachEntry(function (v, k) {
      if (hasSimpleCatchBinding && v.length === 1 && v[0].node === astNode.binding) {
        // A simple catch binding is the only type of lexical binding which does *not* block B.3.3 hoisting.
        // See B.3.5: https://tc39.github.io/ecma262/#sec-variablestatements-in-catch-blocks
        return;
      }
      pvsfd.delete(k);
    });
    if (scopeType !== _scope$1.ScopeType.SCRIPT && scopeType !== _scope$1.ScopeType.FUNCTION && scopeType !== _scope$1.ScopeType.ARROW_FUNCTION) {
      // At the top level of scripts and function bodies, function declarations are not lexical and hence do not block hosting
      this.functionDeclarations.forEachEntry(function (v, k) {
        var existing = pvsfd.get(k);
        if (existing) {
          if (v.length > 1) {
            // Note that this is *currently* the spec'd behavior, but is regarded as a bug; see https://github.com/tc39/ecma262/issues/913
            pvsfd.delete(k);
          } else {
            pvsfd.delete(k);
            var myPvsfd = existing.find(function (e) {
              return e.node === v[0].node;
            });
            if (myPvsfd != null) {
              pvsfd.set(k, myPvsfd);
            }
          }
        }
      });
    }
    this.functionScopedDeclarations.forEachEntry(function (v, k) {
      var existing = pvsfd.get(k);
      if (existing && v.some(function (d) {
        return d.type === _declaration$1.DeclarationType.PARAMETER;
      })) {
        // Despite being function scoped, parameters *do* block B.3.3 hoisting.
        // See B.3.3.1.a.ii: https://tc39.github.io/ecma262/#sec-web-compat-functiondeclarationinstantiation
        // "If replacing the FunctionDeclaration f with a VariableStatement that has F as a BindingIdentifier would not produce any Early Errors for func and F is not an element of parameterNames, then"
        pvsfd.delete(k);
      }
    });

    var declarations = new _multimap2$1.default();

    switch (scopeType) {
      case _scope$1.ScopeType.BLOCK:
      case _scope$1.ScopeType.CATCH:
      case _scope$1.ScopeType.WITH:
      case _scope$1.ScopeType.FUNCTION_NAME:
      case _scope$1.ScopeType.CLASS_NAME:
      case _scope$1.ScopeType.PARAMETER_EXPRESSION:
        // resolve references to only block-scoped free declarations
        merge$1(declarations, this.blockScopedDeclarations);
        merge$1(declarations, this.functionDeclarations);
        variables = resolveDeclarations(freeIdentifiers, declarations, variables);
        merge$1(functionScoped, this.functionScopedDeclarations);
        break;
      case _scope$1.ScopeType.PARAMETERS:
      case _scope$1.ScopeType.ARROW_FUNCTION:
      case _scope$1.ScopeType.FUNCTION:
      case _scope$1.ScopeType.MODULE:
      case _scope$1.ScopeType.SCRIPT:
        // resolve references to both block-scoped and function-scoped free declarations

        // top-level lexical declarations in scripts are not globals, so create a separate scope for them
        // otherwise lexical and variable declarations go in the same scope.
        if (scopeType === _scope$1.ScopeType.SCRIPT) {
          children = [new _scope$1.Scope({
            children,
            variables: resolveDeclarations(freeIdentifiers, this.blockScopedDeclarations, []),
            through: merge$1(new _multimap2$1.default(), freeIdentifiers),
            type: _scope$1.ScopeType.SCRIPT,
            isDynamic: this.dynamic,
            astNode
          })];
        } else {
          merge$1(declarations, this.blockScopedDeclarations);
        }

        if (shouldResolveArguments) {
          declarations.set('arguments');
        }
        merge$1(declarations, this.functionScopedDeclarations);
        merge$1(declarations, this.functionDeclarations);

        if (shouldB33) {
          if (paramsToBlockB33Hoisting != null) {
            // parameters are "function scoped", technically
            paramsToBlockB33Hoisting.functionScopedDeclarations.forEachEntry(function (v, k) {
              pvsfd.delete(k);
            });
          }
          merge$1(declarations, pvsfd);
        }
        pvsfd = new _multimap2$1.default();

        variables = resolveDeclarations(freeIdentifiers, declarations, variables);

        // no declarations in a module are global
        if (scopeType === _scope$1.ScopeType.MODULE) {
          children = [new _scope$1.Scope({
            children,
            variables,
            through: freeIdentifiers,
            type: _scope$1.ScopeType.MODULE,
            isDynamic: this.dynamic,
            astNode
          })];
          variables = [];
        }
        break;
      default:
        throw new Error('not reached');
    }

    var scope = scopeType === _scope$1.ScopeType.SCRIPT || scopeType === _scope$1.ScopeType.MODULE ? new _scope$1.GlobalScope({ children, variables, through: freeIdentifiers, astNode }) : new _scope$1.Scope({
      children,
      variables,
      through: freeIdentifiers,
      type: scopeType,
      isDynamic: this.dynamic,
      astNode
    });

    return new ScopeState({
      freeIdentifiers,
      functionScopedDeclarations: functionScoped,
      children: [scope],
      bindingsForParent: this.bindingsForParent,
      potentiallyVarScopedFunctionDeclarations: pvsfd,
      hasParameterExpressions: this.hasParameterExpressions
    });
  }
}
scopeState.default = ScopeState;

var strictnessReducer = {};

Object.defineProperty(strictnessReducer, "__esModule", {
  value: true
});

var _shiftReducer$2 = dist$5;

var _shiftReducer2$1 = _interopRequireDefault$4(_shiftReducer$2);

function _interopRequireDefault$4(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO this file should live elsewhere

class SetMonoid {
  // nb not immutable
  constructor(set) {
    this.set = set;
  }

  static empty() {
    return new SetMonoid(new Set());
  }

  concat(b) {
    return new SetMonoid(merge(this.set, b.set));
  }

  extract() {
    return this.set;
  }

  add(e) {
    // this happens to work, since, as used in StrictnessReducer, .add is never called until after something has been merged, so the identity element is never mutated.
    // to do this in an immutable fashion, uncomment the line below.
    // this.set = merge(new Set, this.set);
    this.set.add(e);
    return this;
  }
}

function hasStrict(directives) {
  return directives.some(function (d) {
    return d.rawValue === 'use strict';
  });
}

function merge(s1, s2) {
  var out = new Set();
  s1.forEach(function (v) {
    return out.add(v);
  });
  s2.forEach(function (v) {
    return out.add(v);
  });
  return out;
}

// Given a Script, the analyze method returns a set containing all ArrowExpression, FunctionDeclaration, FunctionExpression, and Script nodes which are sloppy mode. All other ArrowExpression, FunctionDeclaration, FunctionExpression, and Script nodes are strict.
class StrictnessReducer extends _shiftReducer$2.MonoidalReducer {
  constructor() {
    super(SetMonoid);
  }

  static analyze(script) {
    return (0, _shiftReducer2$1.default)(new this(), script).extract();
  }

  reduceArrowExpression(node, _ref) {
    var params = _ref.params,
        body = _ref.body;

    if (node.body.type === 'FunctionBody' && hasStrict(node.body.directives)) {
      return SetMonoid.empty();
    }
    return super.reduceArrowExpression(node, { params, body }).add(node);
  }

  reduceClassDeclaration() {
    return SetMonoid.empty();
  }

  reduceClassExpression() {
    return SetMonoid.empty();
  }

  reduceFunctionDeclaration(node, _ref2) {
    var name = _ref2.name,
        params = _ref2.params,
        body = _ref2.body;

    if (hasStrict(node.body.directives)) {
      return SetMonoid.empty();
    }
    return super.reduceFunctionDeclaration(node, { name, params, body }).add(node);
  }

  reduceFunctionExpression(node, _ref3) {
    var name = _ref3.name,
        params = _ref3.params,
        body = _ref3.body;

    if (hasStrict(node.body.directives)) {
      return SetMonoid.empty();
    }
    return super.reduceFunctionExpression(node, { name, params, body }).add(node);
  }

  reduceGetter(node, _ref4) {
    var name = _ref4.name,
        body = _ref4.body;

    if (hasStrict(node.body.directives)) {
      return SetMonoid.empty();
    }
    return super.reduceGetter(node, { name, body }).add(node);
  }

  reduceMethod(node, _ref5) {
    var name = _ref5.name,
        params = _ref5.params,
        body = _ref5.body;

    if (hasStrict(node.body.directives)) {
      return SetMonoid.empty();
    }
    return super.reduceMethod(node, { name, params, body }).add(node);
  }

  reduceScript(node, _ref6) {
    var directives = _ref6.directives,
        statements = _ref6.statements;

    if (hasStrict(node.directives)) {
      return SetMonoid.empty();
    }
    return super.reduceScript(node, { directives, statements }).add(node);
  }

  reduceSetter(node, _ref7) {
    var name = _ref7.name,
        param = _ref7.param,
        body = _ref7.body;

    if (hasStrict(node.body.directives)) {
      return SetMonoid.empty();
    }
    return super.reduceSetter(node, { name, param, body }).add(node);
  }
}
strictnessReducer.default = StrictnessReducer;

Object.defineProperty(scopeAnalyzer, "__esModule", {
  value: true
});

var _multimap = multimap.exports;

var _multimap2 = _interopRequireDefault$3(_multimap);

var _shiftReducer$1 = dist$5;

var _shiftReducer2 = _interopRequireDefault$3(_shiftReducer$1);

var _scopeState = scopeState;

var _scopeState2 = _interopRequireDefault$3(_scopeState);

var _reference = reference;

var _declaration = declaration;

var _scope = scope;

var _strictnessReducer = strictnessReducer;

var _strictnessReducer2 = _interopRequireDefault$3(_strictnessReducer);

function _interopRequireDefault$3(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray$3(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
                                                                                                                                                                                                     * Copyright 2015 Shape Security, Inc.
                                                                                                                                                                                                     *
                                                                                                                                                                                                     * Licensed under the Apache License, Version 2.0 (the "License")
                                                                                                                                                                                                     * you may not use this file except in compliance with the License.
                                                                                                                                                                                                     * You may obtain a copy of the License at
                                                                                                                                                                                                     *
                                                                                                                                                                                                     *     http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                     *
                                                                                                                                                                                                     * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                     * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                     * See the License for the specific language governing permissions and
                                                                                                                                                                                                     * limitations under the License.
                                                                                                                                                                                                     */

function asSimpleFunctionDeclarationName(statement) {
  return statement.type === 'FunctionDeclaration' && !statement.isGenerator && !statement.isAsync ? statement.name : statement.type === 'LabeledStatement' ? asSimpleFunctionDeclarationName(statement.body) : null;
}

function getUnnestedSimpleFunctionDeclarationNames(statements) {
  var names = statements.map(asSimpleFunctionDeclarationName).filter(function (f) {
    return f != null;
  });
  // if a function declaration occurs twice in the same scope, neither can be B.3.3 hoisted
  // see https://github.com/tc39/ecma262/issues/913

  var hist = names.reduce(function (memo, id) {
    if (id.name in memo) {
      ++memo[id.name];
    } else {
      memo[id.name] = 1;
    }
    return memo;
  }, Object.create(null));
  return names.filter(function (id) {
    return hist[id.name] === 1;
  });
}

class ScopeAnalyzer extends _shiftReducer$1.MonoidalReducer {
  constructor(program) {
    super(_scopeState2.default);
    this.sloppySet = program.type === 'Script' ? _strictnessReducer2.default.analyze(program) : new Set();
  }

  fold(list, a) {
    var _this = this;

    return list.reduce(function (memo, x) {
      return _this.append(memo, x);
    }, a == null ? this.identity : a);
  }

  static analyze(program) {
    return (0, _shiftReducer2.default)(new this(program), program).children[0];
  }

  finishFunction(fnNode, params, body) {
    var isArrowFn = fnNode.type === 'ArrowExpression';
    var fnType = isArrowFn ? _scope.ScopeType.ARROW_FUNCTION : _scope.ScopeType.FUNCTION;
    if (params.hasParameterExpressions) {
      return params.withoutParameterExpressions().concat(body.finish(fnNode, fnType, { shouldResolveArguments: false, paramsToBlockB33Hoisting: params, shouldB33: this.sloppySet.has(fnNode) })).finish(fnNode, _scope.ScopeType.PARAMETERS, { shouldResolveArguments: !isArrowFn });
    }
    return params.concat(body).finish(fnNode, fnType, { shouldResolveArguments: !isArrowFn, shouldB33: this.sloppySet.has(fnNode) });
  }

  reduceArrowExpression(node, _ref) {
    var params = _ref.params,
        body = _ref.body;

    return this.finishFunction(node, params, body);
  }

  reduceAssignmentExpression(node, _ref2) {
    var binding = _ref2.binding,
        expression = _ref2.expression;

    return super.reduceAssignmentExpression(node, {
      binding: binding.addReferences(_reference.Accessibility.WRITE),
      expression
    });
  }

  reduceAssignmentTargetIdentifier(node) {
    return new _scopeState2.default({ atsForParent: [node] });
  }

  reduceBindingIdentifier(node) {
    if (node.name === '*default*') {
      return new _scopeState2.default();
    }
    return new _scopeState2.default({ bindingsForParent: [node] });
  }

  reduceBindingPropertyIdentifier(node, _ref3) {
    var binding = _ref3.binding,
        init = _ref3.init;

    var s = super.reduceBindingPropertyIdentifier(node, { binding, init });
    if (init) {
      return s.withParameterExpressions();
    }
    return s;
  }

  reduceBindingPropertyProperty(node, _ref4) {
    var name = _ref4.name,
        binding = _ref4.binding;

    var s = super.reduceBindingPropertyProperty(node, { name, binding });
    if (node.name.type === 'ComputedPropertyName') {
      return s.withParameterExpressions();
    }
    return s;
  }

  reduceBindingWithDefault(node, _ref5) {
    var binding = _ref5.binding,
        init = _ref5.init;

    return super.reduceBindingWithDefault(node, { binding, init }).withParameterExpressions();
  }

  reduceBlock(node, _ref6) {
    var statements = _ref6.statements;

    return super.reduceBlock(node, { statements }).withPotentialVarFunctions(getUnnestedSimpleFunctionDeclarationNames(node.statements)).finish(node, _scope.ScopeType.BLOCK);
  }

  reduceCallExpression(node, _ref7) {
    var callee = _ref7.callee,
        _arguments = _ref7.arguments;

    var s = super.reduceCallExpression(node, { callee, arguments: _arguments });
    if (node.callee.type === 'IdentifierExpression' && node.callee.name === 'eval') {
      return s.taint();
    }
    return s;
  }

  reduceCatchClause(node, _ref8) {
    var binding = _ref8.binding,
        body = _ref8.body;

    return super.reduceCatchClause(node, {
      binding: binding.addDeclarations(_declaration.DeclarationType.CATCH_PARAMETER),
      body
    }).finish(node, _scope.ScopeType.CATCH);
  }

  reduceClassDeclaration(node, _ref9) {
    var name = _ref9.name,
        _super = _ref9.super,
        elements = _ref9.elements;

    var s = super.reduceClassDeclaration(node, { name, super: _super, elements }).addDeclarations(_declaration.DeclarationType.CLASS_NAME).finish(node, _scope.ScopeType.CLASS_NAME);
    return s.concat(name.addDeclarations(_declaration.DeclarationType.CLASS_DECLARATION));
  }

  reduceClassExpression(node, _ref10) {
    var name = _ref10.name,
        _super = _ref10.super,
        elements = _ref10.elements;

    return super.reduceClassExpression(node, { name, super: _super, elements }).addDeclarations(_declaration.DeclarationType.CLASS_NAME).finish(node, _scope.ScopeType.CLASS_NAME);
  }

  reduceCompoundAssignmentExpression(node, _ref11) {
    var binding = _ref11.binding,
        expression = _ref11.expression;

    return super.reduceCompoundAssignmentExpression(node, {
      binding: binding.addReferences(_reference.Accessibility.READWRITE),
      expression
    });
  }

  reduceComputedMemberExpression(node, _ref12) {
    var object = _ref12.object,
        expression = _ref12.expression;

    return super.reduceComputedMemberExpression(node, { object, expression }).withParameterExpressions();
  }

  reduceForInStatement(node, _ref13) {
    var left = _ref13.left,
        right = _ref13.right,
        body = _ref13.body;

    return super.reduceForInStatement(node, { left: left.addReferences(_reference.Accessibility.WRITE), right, body }).finish(node, _scope.ScopeType.BLOCK);
  }

  reduceForAwaitStatement(node, _ref14) {
    var left = _ref14.left,
        right = _ref14.right,
        body = _ref14.body;

    return super.reduceForAwaitStatement(node, { left: left.addReferences(_reference.Accessibility.WRITE), right, body }).finish(node, _scope.ScopeType.BLOCK);
  }

  reduceForOfStatement(node, _ref15) {
    var left = _ref15.left,
        right = _ref15.right,
        body = _ref15.body;

    return super.reduceForOfStatement(node, { left: left.addReferences(_reference.Accessibility.WRITE), right, body }).finish(node, _scope.ScopeType.BLOCK);
  }

  reduceForStatement(node, _ref16) {
    var init = _ref16.init,
        test = _ref16.test,
        update = _ref16.update,
        body = _ref16.body;

    return super.reduceForStatement(node, {
      init: init ? init.withoutBindingsForParent() : init,
      test,
      update,
      body
    }).finish(node, _scope.ScopeType.BLOCK);
  }

  reduceFormalParameters(node, _ref17) {
    var items = _ref17.items,
        rest = _ref17.rest;

    var s = rest ? rest : new _scopeState2.default();
    items.forEach(function (item, ind) {
      s = s.concat(item.hasParameterExpressions ? item.finish(node.items[ind], _scope.ScopeType.PARAMETER_EXPRESSION) : item);
    });
    return s.addDeclarations(_declaration.DeclarationType.PARAMETER);
  }

  reduceFunctionDeclaration(node, _ref18) {
    var name = _ref18.name,
        params = _ref18.params,
        body = _ref18.body;

    return name.concat(this.finishFunction(node, params, body)).addFunctionDeclaration();
  }

  reduceFunctionExpression(node, _ref19) {
    var name = _ref19.name,
        params = _ref19.params,
        body = _ref19.body;

    var s = this.finishFunction(node, params, body);
    if (name) {
      return name.concat(s).addDeclarations(_declaration.DeclarationType.FUNCTION_NAME).finish(node, _scope.ScopeType.FUNCTION_NAME);
    }
    return s;
  }

  reduceGetter(node, _ref20) {
    var name = _ref20.name,
        body = _ref20.body;

    return name.concat(body.finish(node, _scope.ScopeType.FUNCTION, {
      shouldResolveArguments: true,
      shouldB33: this.sloppySet.has(node)
    }));
  }

  reduceIdentifierExpression(node) {
    return new _scopeState2.default({
      freeIdentifiers: new _multimap2.default([[node.name, new _reference.Reference(node, _reference.Accessibility.READ)]])
    });
  }

  reduceIfStatement(node, _ref21) {
    var test = _ref21.test,
        consequent = _ref21.consequent,
        alternate = _ref21.alternate;

    // These "blocks" are synthetic; see https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses
    var consequentFunctionDeclName = asSimpleFunctionDeclarationName(node.consequent);
    if (consequentFunctionDeclName != null) {
      consequent = consequent.withPotentialVarFunctions([consequentFunctionDeclName]).finish(node.consequent, _scope.ScopeType.BLOCK);
    }
    if (node.alternate != null) {
      var alternateFunctionDeclName = asSimpleFunctionDeclarationName(node.alternate);
      if (alternateFunctionDeclName != null) {
        alternate = alternate.withPotentialVarFunctions([alternateFunctionDeclName]).finish(node.alternate, _scope.ScopeType.BLOCK);
      }
    }
    return super.reduceIfStatement(node, { test, consequent, alternate });
  }

  reduceImport(node, _ref22) {
    var moduleSpecifier = _ref22.moduleSpecifier,
        defaultBinding = _ref22.defaultBinding,
        namedImports = _ref22.namedImports;

    return super.reduceImport(node, { moduleSpecifier, defaultBinding, namedImports }).addDeclarations(_declaration.DeclarationType.IMPORT);
  }

  reduceMethod(node, _ref23) {
    var name = _ref23.name,
        params = _ref23.params,
        body = _ref23.body;

    return name.concat(this.finishFunction(node, params, body));
  }

  reduceModule(node, _ref24) {
    var directives = _ref24.directives,
        items = _ref24.items;

    return super.reduceModule(node, { directives, items }).finish(node, _scope.ScopeType.MODULE);
  }

  reduceScript(node, _ref25) {
    var directives = _ref25.directives,
        statements = _ref25.statements;

    return super.reduceScript(node, { directives, statements }).finish(node, _scope.ScopeType.SCRIPT, { shouldB33: !node.directives.some(function (d) {
        return d.rawValue === 'use strict';
      }) });
  }

  reduceSetter(node, _ref26) {
    var name = _ref26.name,
        param = _ref26.param,
        body = _ref26.body;

    if (param.hasParameterExpressions) {
      param = param.finish(node, _scope.ScopeType.PARAMETER_EXPRESSION);
    }
    return name.concat(this.finishFunction(node, param.addDeclarations(_declaration.DeclarationType.PARAMETER), body));
  }

  reduceSwitchStatement(node, _ref27) {
    var _ref28;

    var discriminant = _ref27.discriminant,
        cases = _ref27.cases;

    return this.fold(cases).withPotentialVarFunctions(getUnnestedSimpleFunctionDeclarationNames((_ref28 = []).concat.apply(_ref28, _toConsumableArray$3(node.cases.map(function (c) {
      return c.consequent;
    }))))).finish(node, _scope.ScopeType.BLOCK).concat(discriminant);
  }

  reduceSwitchStatementWithDefault(node, _ref29) {
    var _ref30;

    var discriminant = _ref29.discriminant,
        preDefaultCases = _ref29.preDefaultCases,
        defaultCase = _ref29.defaultCase,
        postDefaultCases = _ref29.postDefaultCases;

    var functionDeclarations = getUnnestedSimpleFunctionDeclarationNames((_ref30 = []).concat.apply(_ref30, _toConsumableArray$3(node.preDefaultCases.concat([node.defaultCase], node.postDefaultCases).map(function (c) {
      return c.consequent;
    }))));
    var cases = preDefaultCases.concat([defaultCase], postDefaultCases);
    return this.fold(cases).withPotentialVarFunctions(functionDeclarations).finish(node, _scope.ScopeType.BLOCK).concat(discriminant);
  }

  reduceUnaryExpression(node, _ref31) {
    var operand = _ref31.operand;

    if (node.operator === 'delete' && node.operand.type === 'IdentifierExpression') {
      // 'delete x' is a special case.
      return new _scopeState2.default({ freeIdentifiers: new _multimap2.default([[node.operand.name, new _reference.Reference(node.operand, _reference.Accessibility.DELETE)]]) });
    }
    return super.reduceUnaryExpression(node, { operand });
  }

  reduceUpdateExpression(node, _ref32) {
    var operand = _ref32.operand;

    return operand.addReferences(_reference.Accessibility.READWRITE);
  }

  reduceVariableDeclaration(node, _ref33) {
    var declarators = _ref33.declarators;

    return super.reduceVariableDeclaration(node, { declarators }).addDeclarations(_declaration.DeclarationType.fromVarDeclKind(node.kind), true);
    // passes bindingsForParent up, for for-in and for-of to add their write-references
  }

  reduceVariableDeclarationStatement(node, _ref34) {
    var declaration = _ref34.declaration;

    return declaration.withoutBindingsForParent();
  }

  reduceVariableDeclarator(node, _ref35) {
    var binding = _ref35.binding,
        init = _ref35.init;

    var s = super.reduceVariableDeclarator(node, { binding, init });
    if (init) {
      return s.addReferences(_reference.Accessibility.WRITE, true);
    }
    return s;
  }

  reduceWithStatement(node, _ref36) {
    var object = _ref36.object,
        body = _ref36.body;

    return super.reduceWithStatement(node, { object, body: body.finish(node, _scope.ScopeType.WITH) });
  }
}
scopeAnalyzer.default = ScopeAnalyzer;

(function (exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serialize = exports.Accessibility = exports.DeclarationType = exports.ScopeType = exports.annotate = exports.ScopeLookup = undefined;

var _scopeLookup = scopeLookup;

Object.defineProperty(exports, 'ScopeLookup', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_scopeLookup).default;
  }
});

var _annotateSource = annotateSource;

Object.defineProperty(exports, 'annotate', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_annotateSource).default;
  }
});

var _scope = scope;

Object.defineProperty(exports, 'ScopeType', {
  enumerable: true,
  get: function get() {
    return _scope.ScopeType;
  }
});

var _declaration = declaration;

Object.defineProperty(exports, 'DeclarationType', {
  enumerable: true,
  get: function get() {
    return _declaration.DeclarationType;
  }
});

var _reference = reference;

Object.defineProperty(exports, 'Accessibility', {
  enumerable: true,
  get: function get() {
    return _reference.Accessibility;
  }
});

var _scopeSerializer = scopeSerializer;

Object.defineProperty(exports, 'serialize', {
  enumerable: true,
  get: function get() {
    return _scopeSerializer.serialize;
  }
});
exports.default = analyze;

var _scopeAnalyzer = scopeAnalyzer;

var _scopeAnalyzer2 = _interopRequireDefault(_scopeAnalyzer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function analyze(script) {
  return _scopeAnalyzer2.default.analyze(script);
}
}(dist$3));

var analyze = /*@__PURE__*/getDefaultExportFromCjs(dist$3);

const range = (b, e) => [...Array(e - b + 1).keys()].map(i => b + i);
const asArray = (input) => Array.isArray(input) ? input : [input];
const shuffle = (input) => input
    .map((element) => [element, Math.random()])
    .sort((pairA, pairB) => pairA[1] - pairB[1])
    .map(pair => pair[0]);
const pick = (input, n) => shuffle(input).slice(0, n);
const pickIndex = (input) => Math.floor(Math.random() * input.length);
const pickOne = (input) => input.length > 0 ? input[pickIndex(input)] : undefined;
const notIn = (input, not, key) => {
    const notKeys = not.map(e => key(e));
    return input.filter(e => !notKeys.includes(key(e)));
};
const pickFrom = (key, ...requests) => requests.reduce((out, [reserve, n, fill]) => {
    if (n !== undefined && fill && out.length >= n) {
        return out;
    }
    const data = notIn([...new Set(typeof reserve === 'function' ? reserve() : reserve)], out, key);
    if (n === undefined) {
        return out.concat(data);
    }
    return out.concat(pick(data, fill ? n - out.length : n));
}, new Array());
const sortNumberOrString = (a, b) => {
    if (typeof a === 'number' && typeof b === 'string') {
        return -1;
    }
    if (typeof a === 'string' && typeof b === 'number') {
        return 1;
    }
    if (a < b) {
        return -1;
    }
    if (a > b) {
        return 1;
    }
    return 0;
};

const isNode = (node, types) => types.includes(node.type);

const ifHas = (...nodes) => nodes.filter((n) => n !== null);
const children = (n) => {
    switch (n.type) {
        case 'ArrayAssignmentTarget':
        case 'ArrayBinding':
            return ifHas(...n.elements, n.rest);
        case 'ArrayExpression':
            return ifHas(...n.elements);
        case 'ArrowExpression':
            return [n.params, n.body];
        case 'AssignmentExpression':
        case 'CompoundAssignmentExpression':
            return [n.binding, n.expression];
        case 'AssignmentTargetPropertyIdentifier':
        case 'AssignmentTargetWithDefault':
        case 'BindingPropertyIdentifier':
        case 'BindingWithDefault':
        case 'VariableDeclarator':
            return ifHas(n.binding, n.init);
        case 'AssignmentTargetPropertyProperty':
        case 'BindingPropertyProperty':
            return [n.name, n.binding];
        case 'AwaitExpression':
        case 'ComputedPropertyName':
        case 'ExpressionStatement':
        case 'ReturnStatement':
        case 'SpreadElement':
        case 'SpreadProperty':
        case 'ThrowStatement':
        case 'YieldExpression':
        case 'YieldGeneratorExpression':
            return ifHas(n.expression);
        case 'BinaryExpression':
            return [n.left, n.right];
        case 'Block':
            return n.statements;
        case 'BlockStatement':
            return [n.block];
        case 'CallExpression':
        case 'NewExpression':
            return [n.callee, ...n.arguments];
        case 'CatchClause':
            return [n.binding, n.body];
        case 'ClassDeclaration':
        case 'ClassExpression':
            return ifHas(n.name, n.super, ...n.elements);
        case 'ClassElement':
            return [n.method];
        case 'ComputedMemberAssignmentTarget':
        case 'ComputedMemberExpression':
            return [n.object, n.expression];
        case 'ConditionalExpression':
        case 'IfStatement':
            return ifHas(n.test, n.consequent, n.alternate);
        case 'DataProperty':
            return [n.name, n.expression];
        case 'DoWhileStatement':
            return [n.body, n.test];
        case 'Export':
            return [n.declaration];
        case 'ExportDefault':
        case 'LabeledStatement':
            return [n.body];
        case 'ExportFrom':
        case 'ExportLocals':
            return n.namedExports;
        case 'ExportLocalSpecifier':
        case 'ShorthandProperty':
            return [n.name];
        case 'ForAwaitStatement':
        case 'ForInStatement':
        case 'ForOfStatement':
            return [n.left, n.right, n.body];
        case 'ForStatement':
            return ifHas(n.init, n.test, n.update, n.body);
        case 'FormalParameters':
            return ifHas(...n.items, n.rest);
        case 'FunctionBody':
        case 'Script':
            return [...n.directives, ...n.statements];
        case 'FunctionDeclaration':
        case 'FunctionExpression':
        case 'Method':
            return ifHas(n.name, n.params, n.body);
        case 'Getter':
            return [n.name, n.body];
        case 'Import':
            return ifHas(n.defaultBinding, ...n.namedImports);
        case 'ImportNamespace':
            return ifHas(n.defaultBinding, n.namespaceBinding);
        case 'ImportSpecifier':
            return [n.binding];
        case 'Module':
            return [...n.directives, ...n.items];
        case 'ObjectAssignmentTarget':
        case 'ObjectBinding':
            return ifHas(...n.properties, n.rest);
        case 'ObjectExpression':
            return n.properties;
        case 'Setter':
            return [n.name, n.param, n.body];
        case 'StaticMemberAssignmentTarget':
        case 'StaticMemberExpression':
            return [n.object];
        case 'SwitchCase':
            return [n.test, ...n.consequent];
        case 'SwitchDefault':
            return n.consequent;
        case 'SwitchStatement':
            return [n.discriminant, ...n.cases];
        case 'SwitchStatementWithDefault':
            return [
                n.discriminant,
                ...n.preDefaultCases,
                n.defaultCase,
                ...n.postDefaultCases,
            ];
        case 'TemplateExpression':
            return ifHas(n.tag, ...n.elements);
        case 'TryCatchStatement':
            return [n.body, n.catchClause];
        case 'TryFinallyStatement':
            return ifHas(n.body, n.catchClause, n.finalizer);
        case 'UnaryExpression':
        case 'UpdateExpression':
            return [n.operand];
        case 'VariableDeclaration':
            return n.declarators;
        case 'VariableDeclarationStatement':
            return [n.declaration];
        case 'WhileStatement':
            return [n.test, n.body];
        case 'WithStatement':
            return [n.object, n.body];
        default:
            return [];
        // case 'AssignmentTargetIdentifier':
        // case 'BindingIdentifier':
        // case 'BreakStatement':
        // case 'ContinueStatement':
        // case 'DebuggerStatement':
        // case 'Directive':
        // case 'EmptyStatement':
        // case 'ExportAllFrom':
        // case 'ExportFromSpecifier':
        // case 'IdentifierExpression':
        // case 'LiteralBooleanExpression':
        // case 'LiteralInfinityExpression':
        // case 'LiteralNullExpression':
        // case 'LiteralNumericExpression':
        // case 'LiteralRegExpExpression':
        // case 'LiteralStringExpression':
        // case 'NewTargetExpression':
        // case 'StaticPropertyName':
        // case 'Super':
        // case 'TemplateElement':
        // case 'ThisExpression':
    }
};

const walk = (parent, enter, leave) => {
    const recursion = (node, stack) => {
        const flag = enter ? enter(node, stack) : true;
        if (flag !== false) {
            const newStack = [node].concat(stack);
            children(node).forEach(child => recursion(child, newStack));
        }
        if (leave) {
            leave(node, stack);
        }
    };
    recursion(parent, []);
};
const flat = (parent) => {
    const out = [];
    walk(parent, (n) => {
        out.push(n);
    });
    return out;
};
const find = (parent, types) => flat(parent)
    .filter(n => isNode(n, types))
    .map(n => n);

const isFunctionExpression = (node) => ['ArrowExpression', 'FunctionExpression'].includes(node.type);
const searchFunctionVariables = (root) => {
    const nameMap = new Map();
    walk(root, (node, stack) => {
        if (isFunctionExpression(node) &&
            stack[0].type === 'VariableDeclarator' &&
            stack[0].binding.type === 'BindingIdentifier') {
            nameMap.set(node, stack[0].binding.name);
        }
        return true;
    });
    return nameMap;
};
const getFunctionsWithVariables = (global, root) => {
    const out = [];
    const nameMap = searchFunctionVariables(root);
    const recursion = (scope, upper) => {
        const variables = scope.variableList.filter(v => v.declarations.length > 0 || v.references.length > 0);
        if ((scope.type.name === 'ArrowFunction' &&
            scope.astNode.type === 'ArrowExpression') ||
            (scope.type.name === 'Function' &&
                scope.astNode.type === 'FunctionExpression')) {
            const name = nameMap.get(scope.astNode);
            if (name) {
                out.push({
                    name,
                    astNode: scope.astNode,
                    variables,
                });
                scope.children.forEach(child => recursion(child, variables));
            }
        }
        else if (scope.type.name === 'Function' &&
            scope.astNode.type === 'FunctionDeclaration') {
            out.push({
                name: scope.astNode.name.name,
                astNode: scope.astNode,
                variables,
            });
            scope.children.forEach(child => recursion(child, variables));
        }
        else {
            const merged = upper.concat(variables);
            scope.children.forEach(child => recursion(child, merged));
        }
    };
    recursion(global, []);
    return out;
};
const getParameterNames = (params) => find(params, ['BindingIdentifier']).map(p => p.name);

const opt = (answers, type, info, correct) => asArray(answers).map(answer => ({ type, answer, correct, info }));
const options = (answers, type, info, correct) => [opt(answers, type, info, correct)];
const fillRandomOptions = (count, answers, type, info) => [() => opt(answers(), type, info), count, true];
const toArrayRequests = (rs) => rs.filter((r) => r !== undefined);
const pickOptions = (...requests) => pickFrom(e => e.answer.toString(), ...toArrayRequests(requests)).sort((a, b) => sortNumberOrString(a.answer, b.answer));

const isSingle = (v) => !Array.isArray(v);
const toProgram = (v) => {
    if (typeof v === 'number') {
        return v;
    }
    return typeof v === 'string' ? `"${v}"` : `${v}`;
};
const simpleToProgram = (v) => isSingle(v) ? toProgram(v) : `[${v.map(e => toProgram(e)).join(', ')}]`;
const formatSimpleList = (v) => v.map(simpleToProgram).join(', ');
const smaller = (v) => {
    switch (typeof v) {
        case 'number':
            return v - 1;
        case 'string':
            if (v.trim() !== v) {
                return v.trim();
            }
            return String.fromCharCode(...v.split('').map(c => c.charCodeAt(0) - 1));
        case 'boolean':
            return !v;
        default:
            return v.slice(0, -1);
    }
};
const larger = (v) => {
    switch (typeof v) {
        case 'number':
            return v + 1;
        case 'string':
            return String.fromCharCode(...v.split('').map(c => c.charCodeAt(0) + 1));
        case 'boolean':
            return !v;
        default:
            return v.slice(1);
    }
};
const next = (vs) => {
    if (vs.length < 2 || vs[vs.length - 1] < vs[vs.length - 2]) {
        return smaller(vs[vs.length - 1]);
    }
    return larger(vs[vs.length - 1]);
};

/* eslint-disable @typescript-eslint/no-explicit-any */
const texts = {
    en: {
        q_function_name: 'Which is the name of the function?',
        q_function_name_line: (...args) => `Which is the name of the function that is declared on line ${args[0]}?`,
        o_function_correct: 'Correct, this is the name',
        o_function_function: 'The keyword/command "function" is used when the program is about to declare a function',
        o_function_parameter: 'This is a parameter name for a value passed as an argument when calling the function',
        o_function_variable: 'This is a variable name used inside the function body',
        o_function_keyword: 'This is a program keyword/command used inside the function body',
        o_function_literal: 'This is a literal value that is used inside the function body',
        q_parameter_name: 'Which are the parameter names of the function?',
        q_parameter_name_line: (...args) => `Which are the parameter names of the function that is declared on line ${args[0]}?`,
        o_parameter_correct: (...args) => args[0] > 1
            ? `Correct, this is one of the ${args[0]} parameter names for this function`
            : 'Correct, this is the only parameter name for this function',
        o_parameter_function_name: 'This is the name of the function that is used to call the function',
        q_parameter_value: (...args) => `Which value does \`${args[0]}\` have when execution of \`${args[1]}\` starts?`,
        o_parameter_value_correct: 'Correct, this is the value passed as an argument for the given parameter',
        o_parameter_value_other: 'This value is passed as an argument BUT for another parameter than given in the question',
        o_parameter_value_random: 'This is a random value which is not equal to the value initially passed as an argument for the given parameter',
        q_loop_end: (...args) => `A program loop starts on line ${args[0]}. Which is the last line inside it?`,
        o_loop_end_correct: 'Correct, this is the last line inside the loop (closing curly bracket may appear later)',
        o_loop_end_before: 'The loop starts after this line',
        o_loop_end_after: 'The loop ends before this line',
        o_loop_end_inside: 'This line is inside the loop BUT it is not the last one',
        q_variable_write_declaration: (...args) => `A value is assigned to variable \`${args[0]}\` on line ${args[1]}. On which line is \`${args[0]}\` declared?`,
        q_variable_read_declaration: (...args) => `A value is accessed from variable \`${args[0]}\` on line ${args[1]}. On which line is \`${args[0]}\` declared?`,
        o_variable_declaration_correct: (...args) => `Correct, this is the line where the variable is declared using the keyword ${args[0]}`,
        o_variable_declaration_reference: 'This line references (reads or writes) the given variable BUT it is declared before',
        o_variable_declaration_random: 'This is a random line that does not handle the given variable',
        q_method_call: (...args) => `Which best describes \`${args[0]}\` on line ${args[1]}?`,
        o_method_correct: 'Correct, it calls a method of an object (method is a function declared for the object)',
        o_name_argument: 'No, arguments are values or expressions given for a function/method call (inside parenthesis)',
        o_name_keyword: 'No, keyword/command describes a word that is reserved for describing program structure and cannot be used as a name',
        o_name_operator: 'No, programs have typically arithmetic, comparison, and logical operators e.g. +, ===, or &&',
        o_name_parameter: 'No, parameters are used to name inputs when functions are declared',
        q_variable_trace: (...args) => `Which is the ordered sequence of values stored in variable \`${args[0]}\` while executing the program?`,
        q_variable_trace_function: (...args) => `Which is the ordered sequence of values that are assigned to variable \`${args[0]}\` while executing \`${args[1]}\`?`,
        o_trace_correct: 'Correct, step by step these values are assigned to the variable',
        o_trace_miss: 'No, this sequence is missing a value that gets assigned',
        o_trace_extra: 'No, this sequence has an extra value that is not assigned',
        o_trace_random: 'No, this is an incorrect random sequence',
    },
};
// Implement if necessary at some point...
const locale = 'en';
const t$1 = (key, ...args) => {
    const txt = texts[locale][key];
    if (typeof txt === 'function') {
        return txt(...args);
    }
    return txt;
};

const variableTrace = ({ input, recorded }) => {
    if (recorded === undefined) {
        return [];
    }
    return recorded.variables
        .filter(({ index, name }) => recorded.history[`${index}_${name}`] !== undefined)
        .map(({ index, name }) => () => {
        const vals = recorded.history[`${index}_${name}`];
        return {
            question: input && recorded.arguments
                ? t$1('q_variable_trace_function', name, `${input.functionName}(${formatSimpleList(recorded.arguments)})`)
                : t$1('q_variable_trace', name),
            options: pickOptions(options(formatSimpleList(vals), 'trace', t$1('o_trace_correct'), true), [
                vals.length > 1
                    ? [
                        {
                            type: 'trace_miss_first',
                            answer: formatSimpleList(vals.slice(1)),
                            info: t$1('o_trace_miss'),
                        },
                        {
                            type: 'trace_miss_last',
                            answer: formatSimpleList(vals.slice(0, -1)),
                            info: t$1('o_trace_miss'),
                        },
                        {
                            type: 'trace_extra_last',
                            answer: formatSimpleList(vals.concat(next(vals))),
                            info: t$1('o_trace_extra'),
                        },
                        {
                            type: 'trace_shuffled',
                            answer: formatSimpleList(shuffle(vals)),
                            info: t$1('o_trace_random'),
                        },
                    ]
                    : [
                        {
                            type: 'trace_smaller',
                            answer: formatSimpleList(vals.map(smaller)),
                            info: t$1('o_trace_random'),
                        },
                        {
                            type: 'trace_larger',
                            answer: formatSimpleList(vals.map(larger)),
                            info: t$1('o_trace_random'),
                        },
                        {
                            type: 'trace_extra_last',
                            answer: formatSimpleList(vals.concat(smaller(vals[0]))),
                            info: t$1('o_trace_extra'),
                        },
                        {
                            type: 'trace_extra_last',
                            answer: formatSimpleList(vals.concat(larger(vals[0]))),
                            info: t$1('o_trace_extra'),
                        },
                    ],
            ]),
        };
    });
};

const literalNodes = (parent) => find(parent, [
    'LiteralBooleanExpression',
    'LiteralNumericExpression',
    'LiteralStringExpression',
]);
const literalValues = (parent) => literalNodes(parent).map(n => n.value);
const loopNodes = (parent) => find(parent, [
    'ForStatement',
    'ForInStatement',
    'ForOfStatement',
    'WhileStatement',
]);
const lastBlockNode = (parent) => {
    if (parent.type === 'BlockStatement') {
        const { statements } = parent.block;
        return statements[statements.length - 1];
    }
    return parent;
};
const methodCalls = (parent) => find(parent, ['CallExpression'])
    .filter(call => isNode(call.callee, ['StaticMemberExpression']))
    .map(call => ({ call, callee: call.callee }));

const keyword$1 = (n) => {
    switch (n.type) {
        case 'AwaitExpression':
            return ['await'];
        case 'BreakStatement':
            return ['break'];
        case 'CatchClause':
            return ['catch'];
        case 'ClassDeclaration':
            return ['class'];
        case 'ContinueStatement':
            return ['continue'];
        case 'DoWhileStatement':
            return ['do', 'while'];
        case 'ForAwaitStatement':
            return ['for await', 'of'];
        case 'ForInStatement':
            return ['for', 'in'];
        case 'ForOfStatement':
            return ['for', 'of'];
        case 'ForStatement':
            return ['for'];
        case 'FunctionDeclaration':
            return ['function'];
        case 'IfStatement':
            return ['if'];
        case 'ReturnStatement':
            return ['return'];
        case 'SwitchCase':
            return ['case'];
        case 'SwitchDefault':
            return ['default'];
        case 'SwitchStatement':
        case 'SwitchStatementWithDefault':
            return ['switch'];
        case 'ThrowStatement':
            return ['throw'];
        case 'TryCatchStatement':
            return ['try'];
        case 'TryFinallyStatement':
            return ['try', 'finally'];
        case 'VariableDeclaration':
            return [n.kind];
        case 'WhileStatement':
            return ['while'];
        case 'WithStatement':
            return ['with'];
        case 'YieldExpression':
            return ['yield'];
        default:
            return [];
    }
};
const getKeywords = (parent) => flat(parent).flatMap(n => keyword$1(n));

const getLine = (node, locations, end) => {
    const r = locations.get(node);
    if (end) {
        return r ? r.end.line : 0;
    }
    return r ? r.start.line : 0;
};

const functionName = ({ functions, locations }) => {
    if (functions === undefined) {
        return [];
    }
    return functions.map(({ name, astNode, variables }) => () => ({
        question: functions.length > 1
            ? t$1('q_function_name_line', getLine(astNode, locations))
            : t$1('q_function_name'),
        options: pickOptions(options(name, 'function_name', t$1('o_function_correct'), true), astNode.type === 'FunctionDeclaration'
            ? options('function', 'keyword', t$1('o_function_function'))
            : undefined, options(getParameterNames(astNode.params), 'parameter_name', t$1('o_function_parameter')), fillRandomOptions(4, () => variables.map(v => v.name), 'variable_name', t$1('o_function_variable')), fillRandomOptions(5, () => getKeywords(astNode), 'keyword', t$1('o_function_keyword'))),
    }));
};
const parameterName = ({ functions, locations }) => {
    if (functions === undefined) {
        return [];
    }
    return functions
        .map(data => ({
        ...data,
        params: getParameterNames(data.astNode.params),
    }))
        .filter(({ params }) => params.length > 0)
        .map(({ name, astNode, variables, params }) => () => ({
        question: functions.length > 1
            ? t$1('q_parameter_name_line', getLine(astNode, locations))
            : t$1('q_parameter_name'),
        options: pickOptions(options(params, 'parameter_name', t$1('o_parameter_correct', params.length), true), options(name, 'function_name', t$1('o_parameter_function_name')), astNode.type === 'FunctionDeclaration'
            ? options('function', 'keyword', t$1('o_function_function'))
            : undefined, fillRandomOptions(4, () => variables.map(v => v.name), 'variable_name', t$1('o_function_variable')), fillRandomOptions(5, () => getKeywords(astNode), 'keyword', t$1('o_function_keyword'))),
    }));
};
const parameterValue = ({ functions, input }) => {
    if (functions === undefined || input === undefined) {
        return [];
    }
    return functions
        .map(data => ({
        ...data,
        params: getParameterNames(data.astNode.params),
        argOpt: input.functionName === data.name ? input.arguments : [],
    }))
        .filter(({ params, argOpt }) => params.length > 0 && argOpt.length > 0)
        .map(({ name, astNode, params, argOpt }) => () => {
        const paramIndex = pickIndex(params) || 0;
        const args = (pickOne(argOpt) || []).map(simpleToProgram);
        return {
            question: t$1('q_parameter_value', params[paramIndex], `${name}(${args.join(', ')})`),
            options: pickOptions(options(args[paramIndex], 'parameter_value', t$1('o_parameter_value_correct'), true), options(args, 'wrong_parameter_value', t$1('o_parameter_value_other')), options(params[paramIndex], 'parameter_name', t$1('o_function_parameter')), fillRandomOptions(3, () => literalValues(astNode).map(simpleToProgram), 'literal', t$1('o_function_literal')), fillRandomOptions(5, () => argOpt.map(d => simpleToProgram(d[paramIndex])), 'random_value', t$1('o_parameter_value_random'))),
        };
    });
};

const getVariables = (global, declarationTypes) => {
    const out = [];
    const recursion = (scope) => {
        if (declarationTypes !== undefined) {
            out.push(...scope.variableList.filter(({ declarations }) => declarations.length > 0 &&
                declarationTypes.includes(declarations[0].type.name)));
        }
        else {
            out.push(...scope.variableList);
        }
        scope.children.forEach(child => recursion(child));
    };
    recursion(global);
    return out;
};
const VariableDeclarations = ['Var', 'Const', 'Let'];
const checkLines = (dec, refs, requireDifferentLine) => requireDifferentLine ? refs.filter(({ line }) => line !== dec.line) : refs;
const parseReferences = (variables, locations, requireDifferentLine) => variables
    .map(v => {
    const decs = v.declarations
        .map(d => ({
        ...d,
        line: locations.get(d.node)?.start.line,
    }))
        .filter((d) => d.line !== undefined);
    return {
        ...v,
        declaration: decs[0],
    };
})
    .filter(({ declaration }) => declaration !== undefined)
    .map(v => {
    const refs = checkLines(v.declaration, v.references
        .map(r => ({
        ...r,
        line: locations.get(r.node)?.start.line,
    }))
        .filter((r) => r.line !== undefined), requireDifferentLine);
    return {
        ...v,
        reads: refs.filter(({ accessibility: a }) => a.isRead),
        writes: refs.filter(({ accessibility: a }) => a.isWrite || a.isReadWrite),
    };
});

const loopEnd = ({ tree, locations }) => loopNodes(tree).map(loop => () => {
    const beg = getLine(loop, locations);
    const end = getLine(lastBlockNode(loop.body), locations, true);
    return {
        question: t$1('q_loop_end', beg),
        options: pickOptions(options(end, 'last_line_inside_block', t$1('o_loop_end_correct'), true), options(Math.max(1, beg - 1), 'line_before_block', t$1('o_loop_end_before')), options(end + 2, 'line_after_block', t$1('o_loop_end_after')), fillRandomOptions(6, () => range(beg, end - 1), 'line_inside_block', t$1('o_loop_end_inside'))),
    };
});
const variableDeclaration = ({ scope, locations }) => parseReferences(getVariables(scope, VariableDeclarations), locations, true)
    .filter(({ reads, writes }) => reads.length > 0 || writes.length > 0)
    .map(({ name, declaration, reads, writes }) => () => {
    const isWrite = writes.length > 0;
    const ref = pickOne(isWrite ? writes : reads);
    const refLines = [...new Set(reads.concat(writes).map(r => r.line))];
    return {
        question: t$1(isWrite
            ? 'q_variable_write_declaration'
            : 'q_variable_read_declaration', name, ref.line),
        options: pickOptions(options(declaration.line, 'declaration_line', t$1('o_variable_declaration_correct', declaration.type.name.toLowerCase()), true), options(refLines, 'reference_line', t$1('o_variable_declaration_reference')), fillRandomOptions(5, () => range(Math.max(1, declaration.line - 2), Math.max(...refLines) + 2), 'random_line', t$1('o_variable_declaration_random'))),
    };
});

const methodCall = ({ tree, locations }) => methodCalls(tree).map(({ callee }) => () => {
    return {
        question: t$1('q_method_call', callee.property, getLine(callee, locations)),
        options: pickOptions(options('argument', 'argument', t$1('o_name_argument')), options('keyword', 'keyword', t$1('o_name_keyword')), options('method', 'method', t$1('o_method_correct'), true), options('operator', 'operator', t$1('o_name_operator')), options('parameter', 'parameter', t$1('o_name_parameter'))),
    };
});

const questions = [
    {
        type: 'FunctionName',
        prepare: functionName,
        wantsFunctions: true,
    },
    {
        type: 'ParameterName',
        prepare: parameterName,
        wantsFunctions: true,
    },
    {
        type: 'ParameterValue',
        prepare: parameterValue,
        wantsFunctions: true,
    },
    {
        type: 'LoopEnd',
        prepare: loopEnd,
    },
    {
        type: 'VariableDeclaration',
        prepare: variableDeclaration,
    },
    {
        type: 'MethodCall',
        prepare: methodCall,
    },
    {
        type: 'VariableTrace',
        prepare: variableTrace,
        wantsRecordedEvaluation: true,
    },
];

var dist$1 = {};

var VariableDeclarator_1;
var UpdateExpression_1;
var StaticMemberExpression_1;
var LiteralStringExpression_1;
var LiteralNumericExpression_1;
var IdentifierExpression_1;
var ComputedMemberExpression_1;
var CallExpression_1;
var BinaryExpression_1;
var AssignmentExpression_1;

Object.defineProperty(dist$1, "__esModule", {
  value: true
});

function _classCallCheck$5(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by scripts/generate.js.

/**
 * Copyright 2016 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

dist$1.ArrayAssignmentTarget = function ArrayAssignmentTarget(_ref) {
  var elements = _ref.elements,
      rest = _ref.rest;

  _classCallCheck$5(this, ArrayAssignmentTarget);

  this.type = 'ArrayAssignmentTarget';
  this.elements = elements;
  this.rest = rest;
};

dist$1.ArrayBinding = function ArrayBinding(_ref2) {
  var elements = _ref2.elements,
      rest = _ref2.rest;

  _classCallCheck$5(this, ArrayBinding);

  this.type = 'ArrayBinding';
  this.elements = elements;
  this.rest = rest;
};

dist$1.ArrayExpression = function ArrayExpression(_ref3) {
  var elements = _ref3.elements;

  _classCallCheck$5(this, ArrayExpression);

  this.type = 'ArrayExpression';
  this.elements = elements;
};

dist$1.ArrowExpression = function ArrowExpression(_ref4) {
  var isAsync = _ref4.isAsync,
      params = _ref4.params,
      body = _ref4.body;

  _classCallCheck$5(this, ArrowExpression);

  this.type = 'ArrowExpression';
  this.isAsync = isAsync;
  this.params = params;
  this.body = body;
};

AssignmentExpression_1 = dist$1.AssignmentExpression = function AssignmentExpression(_ref5) {
  var binding = _ref5.binding,
      expression = _ref5.expression;

  _classCallCheck$5(this, AssignmentExpression);

  this.type = 'AssignmentExpression';
  this.binding = binding;
  this.expression = expression;
};

dist$1.AssignmentTargetIdentifier = function AssignmentTargetIdentifier(_ref6) {
  var name = _ref6.name;

  _classCallCheck$5(this, AssignmentTargetIdentifier);

  this.type = 'AssignmentTargetIdentifier';
  this.name = name;
};

dist$1.AssignmentTargetPropertyIdentifier = function AssignmentTargetPropertyIdentifier(_ref7) {
  var binding = _ref7.binding,
      init = _ref7.init;

  _classCallCheck$5(this, AssignmentTargetPropertyIdentifier);

  this.type = 'AssignmentTargetPropertyIdentifier';
  this.binding = binding;
  this.init = init;
};

dist$1.AssignmentTargetPropertyProperty = function AssignmentTargetPropertyProperty(_ref8) {
  var name = _ref8.name,
      binding = _ref8.binding;

  _classCallCheck$5(this, AssignmentTargetPropertyProperty);

  this.type = 'AssignmentTargetPropertyProperty';
  this.name = name;
  this.binding = binding;
};

dist$1.AssignmentTargetWithDefault = function AssignmentTargetWithDefault(_ref9) {
  var binding = _ref9.binding,
      init = _ref9.init;

  _classCallCheck$5(this, AssignmentTargetWithDefault);

  this.type = 'AssignmentTargetWithDefault';
  this.binding = binding;
  this.init = init;
};

dist$1.AwaitExpression = function AwaitExpression(_ref10) {
  var expression = _ref10.expression;

  _classCallCheck$5(this, AwaitExpression);

  this.type = 'AwaitExpression';
  this.expression = expression;
};

BinaryExpression_1 = dist$1.BinaryExpression = function BinaryExpression(_ref11) {
  var left = _ref11.left,
      operator = _ref11.operator,
      right = _ref11.right;

  _classCallCheck$5(this, BinaryExpression);

  this.type = 'BinaryExpression';
  this.left = left;
  this.operator = operator;
  this.right = right;
};

dist$1.BindingIdentifier = function BindingIdentifier(_ref12) {
  var name = _ref12.name;

  _classCallCheck$5(this, BindingIdentifier);

  this.type = 'BindingIdentifier';
  this.name = name;
};

dist$1.BindingPropertyIdentifier = function BindingPropertyIdentifier(_ref13) {
  var binding = _ref13.binding,
      init = _ref13.init;

  _classCallCheck$5(this, BindingPropertyIdentifier);

  this.type = 'BindingPropertyIdentifier';
  this.binding = binding;
  this.init = init;
};

dist$1.BindingPropertyProperty = function BindingPropertyProperty(_ref14) {
  var name = _ref14.name,
      binding = _ref14.binding;

  _classCallCheck$5(this, BindingPropertyProperty);

  this.type = 'BindingPropertyProperty';
  this.name = name;
  this.binding = binding;
};

dist$1.BindingWithDefault = function BindingWithDefault(_ref15) {
  var binding = _ref15.binding,
      init = _ref15.init;

  _classCallCheck$5(this, BindingWithDefault);

  this.type = 'BindingWithDefault';
  this.binding = binding;
  this.init = init;
};

dist$1.Block = function Block(_ref16) {
  var statements = _ref16.statements;

  _classCallCheck$5(this, Block);

  this.type = 'Block';
  this.statements = statements;
};

dist$1.BlockStatement = function BlockStatement(_ref17) {
  var block = _ref17.block;

  _classCallCheck$5(this, BlockStatement);

  this.type = 'BlockStatement';
  this.block = block;
};

dist$1.BreakStatement = function BreakStatement(_ref18) {
  var label = _ref18.label;

  _classCallCheck$5(this, BreakStatement);

  this.type = 'BreakStatement';
  this.label = label;
};

CallExpression_1 = dist$1.CallExpression = function CallExpression(_ref19) {
  var callee = _ref19.callee,
      _arguments = _ref19.arguments;

  _classCallCheck$5(this, CallExpression);

  this.type = 'CallExpression';
  this.callee = callee;
  this.arguments = _arguments;
};

dist$1.CatchClause = function CatchClause(_ref20) {
  var binding = _ref20.binding,
      body = _ref20.body;

  _classCallCheck$5(this, CatchClause);

  this.type = 'CatchClause';
  this.binding = binding;
  this.body = body;
};

dist$1.ClassDeclaration = function ClassDeclaration(_ref21) {
  var name = _ref21.name,
      _super = _ref21.super,
      elements = _ref21.elements;

  _classCallCheck$5(this, ClassDeclaration);

  this.type = 'ClassDeclaration';
  this.name = name;
  this.super = _super;
  this.elements = elements;
};

dist$1.ClassElement = function ClassElement(_ref22) {
  var isStatic = _ref22.isStatic,
      method = _ref22.method;

  _classCallCheck$5(this, ClassElement);

  this.type = 'ClassElement';
  this.isStatic = isStatic;
  this.method = method;
};

dist$1.ClassExpression = function ClassExpression(_ref23) {
  var name = _ref23.name,
      _super = _ref23.super,
      elements = _ref23.elements;

  _classCallCheck$5(this, ClassExpression);

  this.type = 'ClassExpression';
  this.name = name;
  this.super = _super;
  this.elements = elements;
};

dist$1.CompoundAssignmentExpression = function CompoundAssignmentExpression(_ref24) {
  var binding = _ref24.binding,
      operator = _ref24.operator,
      expression = _ref24.expression;

  _classCallCheck$5(this, CompoundAssignmentExpression);

  this.type = 'CompoundAssignmentExpression';
  this.binding = binding;
  this.operator = operator;
  this.expression = expression;
};

dist$1.ComputedMemberAssignmentTarget = function ComputedMemberAssignmentTarget(_ref25) {
  var object = _ref25.object,
      expression = _ref25.expression;

  _classCallCheck$5(this, ComputedMemberAssignmentTarget);

  this.type = 'ComputedMemberAssignmentTarget';
  this.object = object;
  this.expression = expression;
};

ComputedMemberExpression_1 = dist$1.ComputedMemberExpression = function ComputedMemberExpression(_ref26) {
  var object = _ref26.object,
      expression = _ref26.expression;

  _classCallCheck$5(this, ComputedMemberExpression);

  this.type = 'ComputedMemberExpression';
  this.object = object;
  this.expression = expression;
};

dist$1.ComputedPropertyName = function ComputedPropertyName(_ref27) {
  var expression = _ref27.expression;

  _classCallCheck$5(this, ComputedPropertyName);

  this.type = 'ComputedPropertyName';
  this.expression = expression;
};

dist$1.ConditionalExpression = function ConditionalExpression(_ref28) {
  var test = _ref28.test,
      consequent = _ref28.consequent,
      alternate = _ref28.alternate;

  _classCallCheck$5(this, ConditionalExpression);

  this.type = 'ConditionalExpression';
  this.test = test;
  this.consequent = consequent;
  this.alternate = alternate;
};

dist$1.ContinueStatement = function ContinueStatement(_ref29) {
  var label = _ref29.label;

  _classCallCheck$5(this, ContinueStatement);

  this.type = 'ContinueStatement';
  this.label = label;
};

dist$1.DataProperty = function DataProperty(_ref30) {
  var name = _ref30.name,
      expression = _ref30.expression;

  _classCallCheck$5(this, DataProperty);

  this.type = 'DataProperty';
  this.name = name;
  this.expression = expression;
};

dist$1.DebuggerStatement = function DebuggerStatement() {
  _classCallCheck$5(this, DebuggerStatement);

  this.type = 'DebuggerStatement';
};

dist$1.Directive = function Directive(_ref31) {
  var rawValue = _ref31.rawValue;

  _classCallCheck$5(this, Directive);

  this.type = 'Directive';
  this.rawValue = rawValue;
};

dist$1.DoWhileStatement = function DoWhileStatement(_ref32) {
  var body = _ref32.body,
      test = _ref32.test;

  _classCallCheck$5(this, DoWhileStatement);

  this.type = 'DoWhileStatement';
  this.body = body;
  this.test = test;
};

dist$1.EmptyStatement = function EmptyStatement() {
  _classCallCheck$5(this, EmptyStatement);

  this.type = 'EmptyStatement';
};

dist$1.Export = function Export(_ref33) {
  var declaration = _ref33.declaration;

  _classCallCheck$5(this, Export);

  this.type = 'Export';
  this.declaration = declaration;
};

dist$1.ExportAllFrom = function ExportAllFrom(_ref34) {
  var moduleSpecifier = _ref34.moduleSpecifier;

  _classCallCheck$5(this, ExportAllFrom);

  this.type = 'ExportAllFrom';
  this.moduleSpecifier = moduleSpecifier;
};

dist$1.ExportDefault = function ExportDefault(_ref35) {
  var body = _ref35.body;

  _classCallCheck$5(this, ExportDefault);

  this.type = 'ExportDefault';
  this.body = body;
};

dist$1.ExportFrom = function ExportFrom(_ref36) {
  var namedExports = _ref36.namedExports,
      moduleSpecifier = _ref36.moduleSpecifier;

  _classCallCheck$5(this, ExportFrom);

  this.type = 'ExportFrom';
  this.namedExports = namedExports;
  this.moduleSpecifier = moduleSpecifier;
};

dist$1.ExportFromSpecifier = function ExportFromSpecifier(_ref37) {
  var name = _ref37.name,
      exportedName = _ref37.exportedName;

  _classCallCheck$5(this, ExportFromSpecifier);

  this.type = 'ExportFromSpecifier';
  this.name = name;
  this.exportedName = exportedName;
};

dist$1.ExportLocalSpecifier = function ExportLocalSpecifier(_ref38) {
  var name = _ref38.name,
      exportedName = _ref38.exportedName;

  _classCallCheck$5(this, ExportLocalSpecifier);

  this.type = 'ExportLocalSpecifier';
  this.name = name;
  this.exportedName = exportedName;
};

dist$1.ExportLocals = function ExportLocals(_ref39) {
  var namedExports = _ref39.namedExports;

  _classCallCheck$5(this, ExportLocals);

  this.type = 'ExportLocals';
  this.namedExports = namedExports;
};

dist$1.ExpressionStatement = function ExpressionStatement(_ref40) {
  var expression = _ref40.expression;

  _classCallCheck$5(this, ExpressionStatement);

  this.type = 'ExpressionStatement';
  this.expression = expression;
};

dist$1.ForAwaitStatement = function ForAwaitStatement(_ref41) {
  var left = _ref41.left,
      right = _ref41.right,
      body = _ref41.body;

  _classCallCheck$5(this, ForAwaitStatement);

  this.type = 'ForAwaitStatement';
  this.left = left;
  this.right = right;
  this.body = body;
};

dist$1.ForInStatement = function ForInStatement(_ref42) {
  var left = _ref42.left,
      right = _ref42.right,
      body = _ref42.body;

  _classCallCheck$5(this, ForInStatement);

  this.type = 'ForInStatement';
  this.left = left;
  this.right = right;
  this.body = body;
};

dist$1.ForOfStatement = function ForOfStatement(_ref43) {
  var left = _ref43.left,
      right = _ref43.right,
      body = _ref43.body;

  _classCallCheck$5(this, ForOfStatement);

  this.type = 'ForOfStatement';
  this.left = left;
  this.right = right;
  this.body = body;
};

dist$1.ForStatement = function ForStatement(_ref44) {
  var init = _ref44.init,
      test = _ref44.test,
      update = _ref44.update,
      body = _ref44.body;

  _classCallCheck$5(this, ForStatement);

  this.type = 'ForStatement';
  this.init = init;
  this.test = test;
  this.update = update;
  this.body = body;
};

dist$1.FormalParameters = function FormalParameters(_ref45) {
  var items = _ref45.items,
      rest = _ref45.rest;

  _classCallCheck$5(this, FormalParameters);

  this.type = 'FormalParameters';
  this.items = items;
  this.rest = rest;
};

dist$1.FunctionBody = function FunctionBody(_ref46) {
  var directives = _ref46.directives,
      statements = _ref46.statements;

  _classCallCheck$5(this, FunctionBody);

  this.type = 'FunctionBody';
  this.directives = directives;
  this.statements = statements;
};

dist$1.FunctionDeclaration = function FunctionDeclaration(_ref47) {
  var isAsync = _ref47.isAsync,
      isGenerator = _ref47.isGenerator,
      name = _ref47.name,
      params = _ref47.params,
      body = _ref47.body;

  _classCallCheck$5(this, FunctionDeclaration);

  this.type = 'FunctionDeclaration';
  this.isAsync = isAsync;
  this.isGenerator = isGenerator;
  this.name = name;
  this.params = params;
  this.body = body;
};

dist$1.FunctionExpression = function FunctionExpression(_ref48) {
  var isAsync = _ref48.isAsync,
      isGenerator = _ref48.isGenerator,
      name = _ref48.name,
      params = _ref48.params,
      body = _ref48.body;

  _classCallCheck$5(this, FunctionExpression);

  this.type = 'FunctionExpression';
  this.isAsync = isAsync;
  this.isGenerator = isGenerator;
  this.name = name;
  this.params = params;
  this.body = body;
};

dist$1.Getter = function Getter(_ref49) {
  var name = _ref49.name,
      body = _ref49.body;

  _classCallCheck$5(this, Getter);

  this.type = 'Getter';
  this.name = name;
  this.body = body;
};

IdentifierExpression_1 = dist$1.IdentifierExpression = function IdentifierExpression(_ref50) {
  var name = _ref50.name;

  _classCallCheck$5(this, IdentifierExpression);

  this.type = 'IdentifierExpression';
  this.name = name;
};

dist$1.IfStatement = function IfStatement(_ref51) {
  var test = _ref51.test,
      consequent = _ref51.consequent,
      alternate = _ref51.alternate;

  _classCallCheck$5(this, IfStatement);

  this.type = 'IfStatement';
  this.test = test;
  this.consequent = consequent;
  this.alternate = alternate;
};

dist$1.Import = function Import(_ref52) {
  var defaultBinding = _ref52.defaultBinding,
      namedImports = _ref52.namedImports,
      moduleSpecifier = _ref52.moduleSpecifier;

  _classCallCheck$5(this, Import);

  this.type = 'Import';
  this.defaultBinding = defaultBinding;
  this.namedImports = namedImports;
  this.moduleSpecifier = moduleSpecifier;
};

dist$1.ImportNamespace = function ImportNamespace(_ref53) {
  var defaultBinding = _ref53.defaultBinding,
      namespaceBinding = _ref53.namespaceBinding,
      moduleSpecifier = _ref53.moduleSpecifier;

  _classCallCheck$5(this, ImportNamespace);

  this.type = 'ImportNamespace';
  this.defaultBinding = defaultBinding;
  this.namespaceBinding = namespaceBinding;
  this.moduleSpecifier = moduleSpecifier;
};

dist$1.ImportSpecifier = function ImportSpecifier(_ref54) {
  var name = _ref54.name,
      binding = _ref54.binding;

  _classCallCheck$5(this, ImportSpecifier);

  this.type = 'ImportSpecifier';
  this.name = name;
  this.binding = binding;
};

dist$1.LabeledStatement = function LabeledStatement(_ref55) {
  var label = _ref55.label,
      body = _ref55.body;

  _classCallCheck$5(this, LabeledStatement);

  this.type = 'LabeledStatement';
  this.label = label;
  this.body = body;
};

dist$1.LiteralBooleanExpression = function LiteralBooleanExpression(_ref56) {
  var value = _ref56.value;

  _classCallCheck$5(this, LiteralBooleanExpression);

  this.type = 'LiteralBooleanExpression';
  this.value = value;
};

dist$1.LiteralInfinityExpression = function LiteralInfinityExpression() {
  _classCallCheck$5(this, LiteralInfinityExpression);

  this.type = 'LiteralInfinityExpression';
};

dist$1.LiteralNullExpression = function LiteralNullExpression() {
  _classCallCheck$5(this, LiteralNullExpression);

  this.type = 'LiteralNullExpression';
};

LiteralNumericExpression_1 = dist$1.LiteralNumericExpression = function LiteralNumericExpression(_ref57) {
  var value = _ref57.value;

  _classCallCheck$5(this, LiteralNumericExpression);

  this.type = 'LiteralNumericExpression';
  this.value = value;
};

dist$1.LiteralRegExpExpression = function LiteralRegExpExpression(_ref58) {
  var pattern = _ref58.pattern,
      global = _ref58.global,
      ignoreCase = _ref58.ignoreCase,
      multiLine = _ref58.multiLine,
      dotAll = _ref58.dotAll,
      unicode = _ref58.unicode,
      sticky = _ref58.sticky;

  _classCallCheck$5(this, LiteralRegExpExpression);

  this.type = 'LiteralRegExpExpression';
  this.pattern = pattern;
  this.global = global;
  this.ignoreCase = ignoreCase;
  this.multiLine = multiLine;
  this.dotAll = dotAll;
  this.unicode = unicode;
  this.sticky = sticky;
};

LiteralStringExpression_1 = dist$1.LiteralStringExpression = function LiteralStringExpression(_ref59) {
  var value = _ref59.value;

  _classCallCheck$5(this, LiteralStringExpression);

  this.type = 'LiteralStringExpression';
  this.value = value;
};

dist$1.Method = function Method(_ref60) {
  var isAsync = _ref60.isAsync,
      isGenerator = _ref60.isGenerator,
      name = _ref60.name,
      params = _ref60.params,
      body = _ref60.body;

  _classCallCheck$5(this, Method);

  this.type = 'Method';
  this.isAsync = isAsync;
  this.isGenerator = isGenerator;
  this.name = name;
  this.params = params;
  this.body = body;
};

dist$1.Module = function Module(_ref61) {
  var directives = _ref61.directives,
      items = _ref61.items;

  _classCallCheck$5(this, Module);

  this.type = 'Module';
  this.directives = directives;
  this.items = items;
};

dist$1.NewExpression = function NewExpression(_ref62) {
  var callee = _ref62.callee,
      _arguments = _ref62.arguments;

  _classCallCheck$5(this, NewExpression);

  this.type = 'NewExpression';
  this.callee = callee;
  this.arguments = _arguments;
};

dist$1.NewTargetExpression = function NewTargetExpression() {
  _classCallCheck$5(this, NewTargetExpression);

  this.type = 'NewTargetExpression';
};

dist$1.ObjectAssignmentTarget = function ObjectAssignmentTarget(_ref63) {
  var properties = _ref63.properties,
      rest = _ref63.rest;

  _classCallCheck$5(this, ObjectAssignmentTarget);

  this.type = 'ObjectAssignmentTarget';
  this.properties = properties;
  this.rest = rest;
};

dist$1.ObjectBinding = function ObjectBinding(_ref64) {
  var properties = _ref64.properties,
      rest = _ref64.rest;

  _classCallCheck$5(this, ObjectBinding);

  this.type = 'ObjectBinding';
  this.properties = properties;
  this.rest = rest;
};

dist$1.ObjectExpression = function ObjectExpression(_ref65) {
  var properties = _ref65.properties;

  _classCallCheck$5(this, ObjectExpression);

  this.type = 'ObjectExpression';
  this.properties = properties;
};

dist$1.ReturnStatement = function ReturnStatement(_ref66) {
  var expression = _ref66.expression;

  _classCallCheck$5(this, ReturnStatement);

  this.type = 'ReturnStatement';
  this.expression = expression;
};

dist$1.Script = function Script(_ref67) {
  var directives = _ref67.directives,
      statements = _ref67.statements;

  _classCallCheck$5(this, Script);

  this.type = 'Script';
  this.directives = directives;
  this.statements = statements;
};

dist$1.Setter = function Setter(_ref68) {
  var name = _ref68.name,
      param = _ref68.param,
      body = _ref68.body;

  _classCallCheck$5(this, Setter);

  this.type = 'Setter';
  this.name = name;
  this.param = param;
  this.body = body;
};

dist$1.ShorthandProperty = function ShorthandProperty(_ref69) {
  var name = _ref69.name;

  _classCallCheck$5(this, ShorthandProperty);

  this.type = 'ShorthandProperty';
  this.name = name;
};

dist$1.SpreadElement = function SpreadElement(_ref70) {
  var expression = _ref70.expression;

  _classCallCheck$5(this, SpreadElement);

  this.type = 'SpreadElement';
  this.expression = expression;
};

dist$1.SpreadProperty = function SpreadProperty(_ref71) {
  var expression = _ref71.expression;

  _classCallCheck$5(this, SpreadProperty);

  this.type = 'SpreadProperty';
  this.expression = expression;
};

dist$1.StaticMemberAssignmentTarget = function StaticMemberAssignmentTarget(_ref72) {
  var object = _ref72.object,
      property = _ref72.property;

  _classCallCheck$5(this, StaticMemberAssignmentTarget);

  this.type = 'StaticMemberAssignmentTarget';
  this.object = object;
  this.property = property;
};

StaticMemberExpression_1 = dist$1.StaticMemberExpression = function StaticMemberExpression(_ref73) {
  var object = _ref73.object,
      property = _ref73.property;

  _classCallCheck$5(this, StaticMemberExpression);

  this.type = 'StaticMemberExpression';
  this.object = object;
  this.property = property;
};

dist$1.StaticPropertyName = function StaticPropertyName(_ref74) {
  var value = _ref74.value;

  _classCallCheck$5(this, StaticPropertyName);

  this.type = 'StaticPropertyName';
  this.value = value;
};

dist$1.Super = function Super() {
  _classCallCheck$5(this, Super);

  this.type = 'Super';
};

dist$1.SwitchCase = function SwitchCase(_ref75) {
  var test = _ref75.test,
      consequent = _ref75.consequent;

  _classCallCheck$5(this, SwitchCase);

  this.type = 'SwitchCase';
  this.test = test;
  this.consequent = consequent;
};

dist$1.SwitchDefault = function SwitchDefault(_ref76) {
  var consequent = _ref76.consequent;

  _classCallCheck$5(this, SwitchDefault);

  this.type = 'SwitchDefault';
  this.consequent = consequent;
};

dist$1.SwitchStatement = function SwitchStatement(_ref77) {
  var discriminant = _ref77.discriminant,
      cases = _ref77.cases;

  _classCallCheck$5(this, SwitchStatement);

  this.type = 'SwitchStatement';
  this.discriminant = discriminant;
  this.cases = cases;
};

dist$1.SwitchStatementWithDefault = function SwitchStatementWithDefault(_ref78) {
  var discriminant = _ref78.discriminant,
      preDefaultCases = _ref78.preDefaultCases,
      defaultCase = _ref78.defaultCase,
      postDefaultCases = _ref78.postDefaultCases;

  _classCallCheck$5(this, SwitchStatementWithDefault);

  this.type = 'SwitchStatementWithDefault';
  this.discriminant = discriminant;
  this.preDefaultCases = preDefaultCases;
  this.defaultCase = defaultCase;
  this.postDefaultCases = postDefaultCases;
};

dist$1.TemplateElement = function TemplateElement(_ref79) {
  var rawValue = _ref79.rawValue;

  _classCallCheck$5(this, TemplateElement);

  this.type = 'TemplateElement';
  this.rawValue = rawValue;
};

dist$1.TemplateExpression = function TemplateExpression(_ref80) {
  var tag = _ref80.tag,
      elements = _ref80.elements;

  _classCallCheck$5(this, TemplateExpression);

  this.type = 'TemplateExpression';
  this.tag = tag;
  this.elements = elements;
};

dist$1.ThisExpression = function ThisExpression() {
  _classCallCheck$5(this, ThisExpression);

  this.type = 'ThisExpression';
};

dist$1.ThrowStatement = function ThrowStatement(_ref81) {
  var expression = _ref81.expression;

  _classCallCheck$5(this, ThrowStatement);

  this.type = 'ThrowStatement';
  this.expression = expression;
};

dist$1.TryCatchStatement = function TryCatchStatement(_ref82) {
  var body = _ref82.body,
      catchClause = _ref82.catchClause;

  _classCallCheck$5(this, TryCatchStatement);

  this.type = 'TryCatchStatement';
  this.body = body;
  this.catchClause = catchClause;
};

dist$1.TryFinallyStatement = function TryFinallyStatement(_ref83) {
  var body = _ref83.body,
      catchClause = _ref83.catchClause,
      finalizer = _ref83.finalizer;

  _classCallCheck$5(this, TryFinallyStatement);

  this.type = 'TryFinallyStatement';
  this.body = body;
  this.catchClause = catchClause;
  this.finalizer = finalizer;
};

dist$1.UnaryExpression = function UnaryExpression(_ref84) {
  var operator = _ref84.operator,
      operand = _ref84.operand;

  _classCallCheck$5(this, UnaryExpression);

  this.type = 'UnaryExpression';
  this.operator = operator;
  this.operand = operand;
};

UpdateExpression_1 = dist$1.UpdateExpression = function UpdateExpression(_ref85) {
  var isPrefix = _ref85.isPrefix,
      operator = _ref85.operator,
      operand = _ref85.operand;

  _classCallCheck$5(this, UpdateExpression);

  this.type = 'UpdateExpression';
  this.isPrefix = isPrefix;
  this.operator = operator;
  this.operand = operand;
};

dist$1.VariableDeclaration = function VariableDeclaration(_ref86) {
  var kind = _ref86.kind,
      declarators = _ref86.declarators;

  _classCallCheck$5(this, VariableDeclaration);

  this.type = 'VariableDeclaration';
  this.kind = kind;
  this.declarators = declarators;
};

dist$1.VariableDeclarationStatement = function VariableDeclarationStatement(_ref87) {
  var declaration = _ref87.declaration;

  _classCallCheck$5(this, VariableDeclarationStatement);

  this.type = 'VariableDeclarationStatement';
  this.declaration = declaration;
};

VariableDeclarator_1 = dist$1.VariableDeclarator = function VariableDeclarator(_ref88) {
  var binding = _ref88.binding,
      init = _ref88.init;

  _classCallCheck$5(this, VariableDeclarator);

  this.type = 'VariableDeclarator';
  this.binding = binding;
  this.init = init;
};

dist$1.WhileStatement = function WhileStatement(_ref89) {
  var test = _ref89.test,
      body = _ref89.body;

  _classCallCheck$5(this, WhileStatement);

  this.type = 'WhileStatement';
  this.test = test;
  this.body = body;
};

dist$1.WithStatement = function WithStatement(_ref90) {
  var object = _ref90.object,
      body = _ref90.body;

  _classCallCheck$5(this, WithStatement);

  this.type = 'WithStatement';
  this.object = object;
  this.body = body;
};

dist$1.YieldExpression = function YieldExpression(_ref91) {
  var expression = _ref91.expression;

  _classCallCheck$5(this, YieldExpression);

  this.type = 'YieldExpression';
  this.expression = expression;
};

dist$1.YieldGeneratorExpression = function YieldGeneratorExpression(_ref92) {
  var expression = _ref92.expression;

  _classCallCheck$5(this, YieldGeneratorExpression);

  this.type = 'YieldGeneratorExpression';
  this.expression = expression;
};

var dist = {};

var minimalCodegen = {};

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

var utils = {};

var ast = {exports: {}};

/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function () {

    function isExpression(node) {
        if (node == null) { return false; }
        switch (node.type) {
            case 'ArrayExpression':
            case 'AssignmentExpression':
            case 'BinaryExpression':
            case 'CallExpression':
            case 'ConditionalExpression':
            case 'FunctionExpression':
            case 'Identifier':
            case 'Literal':
            case 'LogicalExpression':
            case 'MemberExpression':
            case 'NewExpression':
            case 'ObjectExpression':
            case 'SequenceExpression':
            case 'ThisExpression':
            case 'UnaryExpression':
            case 'UpdateExpression':
                return true;
        }
        return false;
    }

    function isIterationStatement(node) {
        if (node == null) { return false; }
        switch (node.type) {
            case 'DoWhileStatement':
            case 'ForInStatement':
            case 'ForStatement':
            case 'WhileStatement':
                return true;
        }
        return false;
    }

    function isStatement(node) {
        if (node == null) { return false; }
        switch (node.type) {
            case 'BlockStatement':
            case 'BreakStatement':
            case 'ContinueStatement':
            case 'DebuggerStatement':
            case 'DoWhileStatement':
            case 'EmptyStatement':
            case 'ExpressionStatement':
            case 'ForInStatement':
            case 'ForStatement':
            case 'IfStatement':
            case 'LabeledStatement':
            case 'ReturnStatement':
            case 'SwitchStatement':
            case 'ThrowStatement':
            case 'TryStatement':
            case 'VariableDeclaration':
            case 'WhileStatement':
            case 'WithStatement':
                return true;
        }
        return false;
    }

    function isSourceElement(node) {
      return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
    }

    function trailingStatement(node) {
        switch (node.type) {
        case 'IfStatement':
            if (node.alternate != null) {
                return node.alternate;
            }
            return node.consequent;

        case 'LabeledStatement':
        case 'ForStatement':
        case 'ForInStatement':
        case 'WhileStatement':
        case 'WithStatement':
            return node.body;
        }
        return null;
    }

    function isProblematicIfStatement(node) {
        var current;

        if (node.type !== 'IfStatement') {
            return false;
        }
        if (node.alternate == null) {
            return false;
        }
        current = node.consequent;
        do {
            if (current.type === 'IfStatement') {
                if (current.alternate == null)  {
                    return true;
                }
            }
            current = trailingStatement(current);
        } while (current);

        return false;
    }

    ast.exports = {
        isExpression: isExpression,
        isStatement: isStatement,
        isIterationStatement: isIterationStatement,
        isSourceElement: isSourceElement,
        isProblematicIfStatement: isProblematicIfStatement,

        trailingStatement: trailingStatement
    };
}());

var code = {exports: {}};

/*
  Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function () {

    var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch;

    // See `tools/generate-identifier-regex.js`.
    ES5Regex = {
        // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierStart:
        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
        // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierPart:
        NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
    };

    ES6Regex = {
        // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierStart:
        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
        // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierPart:
        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
    };

    function isDecimalDigit(ch) {
        return 0x30 <= ch && ch <= 0x39;  // 0..9
    }

    function isHexDigit(ch) {
        return 0x30 <= ch && ch <= 0x39 ||  // 0..9
            0x61 <= ch && ch <= 0x66 ||     // a..f
            0x41 <= ch && ch <= 0x46;       // A..F
    }

    function isOctalDigit(ch) {
        return ch >= 0x30 && ch <= 0x37;  // 0..7
    }

    // 7.2 White Space

    NON_ASCII_WHITESPACES = [
        0x1680,
        0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A,
        0x202F, 0x205F,
        0x3000,
        0xFEFF
    ];

    function isWhiteSpace(ch) {
        return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 ||
            ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;
    }

    // 7.3 Line Terminators

    function isLineTerminator(ch) {
        return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
    }

    // 7.6 Identifier Names and Identifiers

    function fromCodePoint(cp) {
        if (cp <= 0xFFFF) { return String.fromCharCode(cp); }
        var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);
        var cu2 = String.fromCharCode(((cp - 0x10000) % 0x400) + 0xDC00);
        return cu1 + cu2;
    }

    IDENTIFIER_START = new Array(0x80);
    for(ch = 0; ch < 0x80; ++ch) {
        IDENTIFIER_START[ch] =
            ch >= 0x61 && ch <= 0x7A ||  // a..z
            ch >= 0x41 && ch <= 0x5A ||  // A..Z
            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
    }

    IDENTIFIER_PART = new Array(0x80);
    for(ch = 0; ch < 0x80; ++ch) {
        IDENTIFIER_PART[ch] =
            ch >= 0x61 && ch <= 0x7A ||  // a..z
            ch >= 0x41 && ch <= 0x5A ||  // A..Z
            ch >= 0x30 && ch <= 0x39 ||  // 0..9
            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
    }

    function isIdentifierStartES5(ch) {
        return ch < 0x80 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
    }

    function isIdentifierPartES5(ch) {
        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
    }

    function isIdentifierStartES6(ch) {
        return ch < 0x80 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
    }

    function isIdentifierPartES6(ch) {
        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
    }

    code.exports = {
        isDecimalDigit: isDecimalDigit,
        isHexDigit: isHexDigit,
        isOctalDigit: isOctalDigit,
        isWhiteSpace: isWhiteSpace,
        isLineTerminator: isLineTerminator,
        isIdentifierStartES5: isIdentifierStartES5,
        isIdentifierPartES5: isIdentifierPartES5,
        isIdentifierStartES6: isIdentifierStartES6,
        isIdentifierPartES6: isIdentifierPartES6
    };
}());

var keyword = {exports: {}};

/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function () {

    var code$1 = code.exports;

    function isStrictModeReservedWordES6(id) {
        switch (id) {
        case 'implements':
        case 'interface':
        case 'package':
        case 'private':
        case 'protected':
        case 'public':
        case 'static':
        case 'let':
            return true;
        default:
            return false;
        }
    }

    function isKeywordES5(id, strict) {
        // yield should not be treated as keyword under non-strict mode.
        if (!strict && id === 'yield') {
            return false;
        }
        return isKeywordES6(id, strict);
    }

    function isKeywordES6(id, strict) {
        if (strict && isStrictModeReservedWordES6(id)) {
            return true;
        }

        switch (id.length) {
        case 2:
            return (id === 'if') || (id === 'in') || (id === 'do');
        case 3:
            return (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');
        case 4:
            return (id === 'this') || (id === 'else') || (id === 'case') ||
                (id === 'void') || (id === 'with') || (id === 'enum');
        case 5:
            return (id === 'while') || (id === 'break') || (id === 'catch') ||
                (id === 'throw') || (id === 'const') || (id === 'yield') ||
                (id === 'class') || (id === 'super');
        case 6:
            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
                (id === 'switch') || (id === 'export') || (id === 'import');
        case 7:
            return (id === 'default') || (id === 'finally') || (id === 'extends');
        case 8:
            return (id === 'function') || (id === 'continue') || (id === 'debugger');
        case 10:
            return (id === 'instanceof');
        default:
            return false;
        }
    }

    function isReservedWordES5(id, strict) {
        return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
    }

    function isReservedWordES6(id, strict) {
        return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
    }

    function isRestrictedWord(id) {
        return id === 'eval' || id === 'arguments';
    }

    function isIdentifierNameES5(id) {
        var i, iz, ch;

        if (id.length === 0) { return false; }

        ch = id.charCodeAt(0);
        if (!code$1.isIdentifierStartES5(ch)) {
            return false;
        }

        for (i = 1, iz = id.length; i < iz; ++i) {
            ch = id.charCodeAt(i);
            if (!code$1.isIdentifierPartES5(ch)) {
                return false;
            }
        }
        return true;
    }

    function decodeUtf16(lead, trail) {
        return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
    }

    function isIdentifierNameES6(id) {
        var i, iz, ch, lowCh, check;

        if (id.length === 0) { return false; }

        check = code$1.isIdentifierStartES6;
        for (i = 0, iz = id.length; i < iz; ++i) {
            ch = id.charCodeAt(i);
            if (0xD800 <= ch && ch <= 0xDBFF) {
                ++i;
                if (i >= iz) { return false; }
                lowCh = id.charCodeAt(i);
                if (!(0xDC00 <= lowCh && lowCh <= 0xDFFF)) {
                    return false;
                }
                ch = decodeUtf16(ch, lowCh);
            }
            if (!check(ch)) {
                return false;
            }
            check = code$1.isIdentifierPartES6;
        }
        return true;
    }

    function isIdentifierES5(id, strict) {
        return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
    }

    function isIdentifierES6(id, strict) {
        return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
    }

    keyword.exports = {
        isKeywordES5: isKeywordES5,
        isKeywordES6: isKeywordES6,
        isReservedWordES5: isReservedWordES5,
        isReservedWordES6: isReservedWordES6,
        isRestrictedWord: isRestrictedWord,
        isIdentifierNameES5: isIdentifierNameES5,
        isIdentifierNameES6: isIdentifierNameES6,
        isIdentifierES5: isIdentifierES5,
        isIdentifierES6: isIdentifierES6
    };
}());

/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
(function () {

    utils.ast = ast.exports;
    utils.code = code.exports;
    utils.keyword = keyword.exports;
}());

var coderep = {};

Object.defineProperty(coderep, "__esModule", {
  value: true
});

var _createClass$4 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

coderep.getPrecedence = getPrecedence;
coderep.escapeStringLiteral = escapeStringLiteral;

function _possibleConstructorReturn$2(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$2(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck$4(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Precedence = {
  Sequence: 0,
  Yield: 1,
  Assignment: 1,
  Conditional: 2,
  ArrowFunction: 2,
  LogicalOR: 3,
  LogicalAND: 4,
  BitwiseOR: 5,
  BitwiseXOR: 6,
  BitwiseAND: 7,
  Equality: 8,
  Relational: 9,
  BitwiseSHIFT: 10,
  Additive: 11,
  Multiplicative: 12,
  Exponential: 13,
  Prefix: 14,
  Postfix: 15,
  New: 16,
  Call: 17,
  TaggedTemplate: 18,
  Member: 19,
  Primary: 20
};

coderep.Precedence = Precedence;


var BinaryPrecedence = {
  ',': Precedence.Sequence,
  '||': Precedence.LogicalOR,
  '&&': Precedence.LogicalAND,
  '|': Precedence.BitwiseOR,
  '^': Precedence.BitwiseXOR,
  '&': Precedence.BitwiseAND,
  '==': Precedence.Equality,
  '!=': Precedence.Equality,
  '===': Precedence.Equality,
  '!==': Precedence.Equality,
  '<': Precedence.Relational,
  '>': Precedence.Relational,
  '<=': Precedence.Relational,
  '>=': Precedence.Relational,
  'in': Precedence.Relational,
  'instanceof': Precedence.Relational,
  '<<': Precedence.BitwiseSHIFT,
  '>>': Precedence.BitwiseSHIFT,
  '>>>': Precedence.BitwiseSHIFT,
  '+': Precedence.Additive,
  '-': Precedence.Additive,
  '*': Precedence.Multiplicative,
  '%': Precedence.Multiplicative,
  '/': Precedence.Multiplicative,
  '**': Precedence.Exponential
};

function getPrecedence(node) {
  switch (node.type) {
    case 'ArrayExpression':
    case 'FunctionExpression':
    case 'ClassExpression':
    case 'IdentifierExpression':
    case 'AssignmentTargetIdentifier':
    case 'NewTargetExpression':
    case 'Super':
    case 'LiteralBooleanExpression':
    case 'LiteralNullExpression':
    case 'LiteralNumericExpression':
    case 'LiteralInfinityExpression':
    case 'LiteralRegExpExpression':
    case 'LiteralStringExpression':
    case 'ObjectExpression':
    case 'ThisExpression':
    case 'SpreadElement':
    case 'FunctionBody':
      return Precedence.Primary;

    case 'ArrowExpression':
    case 'AssignmentExpression':
    case 'CompoundAssignmentExpression':
    case 'YieldExpression':
    case 'YieldGeneratorExpression':
      return Precedence.Assignment;

    case 'ConditionalExpression':
      return Precedence.Conditional;

    case 'ComputedMemberExpression':
    case 'StaticMemberExpression':
    case 'ComputedMemberAssignmentTarget':
    case 'StaticMemberAssignmentTarget':
      switch (node.object.type) {
        case 'CallExpression':
        case 'ComputedMemberExpression':
        case 'StaticMemberExpression':
        case 'TemplateExpression':
          return getPrecedence(node.object);
        default:
          return Precedence.Member;
      }

    case 'TemplateExpression':
      if (node.tag == null) return Precedence.Member;
      switch (node.tag.type) {
        case 'CallExpression':
        case 'ComputedMemberExpression':
        case 'StaticMemberExpression':
        case 'TemplateExpression':
          return getPrecedence(node.tag);
        default:
          return Precedence.Member;
      }

    case 'BinaryExpression':
      return BinaryPrecedence[node.operator];

    case 'CallExpression':
      return Precedence.Call;
    case 'NewExpression':
      return node.arguments.length === 0 ? Precedence.New : Precedence.Member;
    case 'UpdateExpression':
      return node.isPrefix ? Precedence.Prefix : Precedence.Postfix;
    case 'AwaitExpression':
    case 'UnaryExpression':
      return Precedence.Prefix;
    default:
      throw new Error('unreachable: ' + node.type);
  }
}

function escapeStringLiteral(stringValue) {
  var result = '';
  var nSingle = 0,
      nDouble = 0;
  for (var i = 0, l = stringValue.length; i < l; ++i) {
    var ch = stringValue[i];
    if (ch === '"') {
      ++nDouble;
    } else if (ch === '\'') {
      ++nSingle;
    }
  }
  var delim = nDouble > nSingle ? '\'' : '"';
  result += delim;
  for (var _i = 0; _i < stringValue.length; _i++) {
    var _ch = stringValue.charAt(_i);
    switch (_ch) {
      case delim:
        result += '\\' + delim;
        break;
      case '\n':
        result += '\\n';
        break;
      case '\r':
        result += '\\r';
        break;
      case '\\':
        result += '\\\\';
        break;
      case '\u2028':
        result += '\\u2028';
        break;
      case '\u2029':
        result += '\\u2029';
        break;
      default:
        result += _ch;
        break;
    }
  }
  result += delim;
  return result;
}

var CodeRep = coderep.CodeRep = function () {
  function CodeRep() {
    _classCallCheck$4(this, CodeRep);

    this.containsIn = false;
    this.containsGroup = false;
    // restricted lookaheads: {, function, class, let, let [
    this.startsWithCurly = false;
    this.startsWithFunctionOrClass = false;
    this.startsWithLet = false;
    this.startsWithLetSquareBracket = false;
    this.endsWithMissingElse = false;
  }

  _createClass$4(CodeRep, [{
    key: 'forEach',
    value: function forEach(f) {
      // Call a function on every CodeRep represented by this node. Always calls f on a node and then its children, so if you're careful you can modify a node's children online.
      f(this);
    }
  }]);

  return CodeRep;
}();

coderep.Empty = function (_CodeRep) {
  _inherits$2(Empty, _CodeRep);

  function Empty() {
    _classCallCheck$4(this, Empty);

    return _possibleConstructorReturn$2(this, (Empty.__proto__ || Object.getPrototypeOf(Empty)).call(this));
  }

  _createClass$4(Empty, [{
    key: 'emit',
    value: function emit() {}
  }]);

  return Empty;
}(CodeRep);

var Token = coderep.Token = function (_CodeRep2) {
  _inherits$2(Token, _CodeRep2);

  function Token(token) {
    var isRegExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    _classCallCheck$4(this, Token);

    var _this2 = _possibleConstructorReturn$2(this, (Token.__proto__ || Object.getPrototypeOf(Token)).call(this));

    _this2.token = token;
    _this2.isRegExp = isRegExp;
    return _this2;
  }

  _createClass$4(Token, [{
    key: 'emit',
    value: function emit(ts) {
      ts.put(this.token, this.isRegExp);
    }
  }]);

  return Token;
}(CodeRep);

coderep.RawToken = function (_CodeRep3) {
  _inherits$2(RawToken, _CodeRep3);

  function RawToken(token) {
    _classCallCheck$4(this, RawToken);

    var _this3 = _possibleConstructorReturn$2(this, (RawToken.__proto__ || Object.getPrototypeOf(RawToken)).call(this));

    _this3.token = token;
    return _this3;
  }

  _createClass$4(RawToken, [{
    key: 'emit',
    value: function emit(ts) {
      ts.putRaw(this.token);
    }
  }]);

  return RawToken;
}(CodeRep);

coderep.NumberCodeRep = function (_CodeRep4) {
  _inherits$2(NumberCodeRep, _CodeRep4);

  function NumberCodeRep(number) {
    _classCallCheck$4(this, NumberCodeRep);

    var _this4 = _possibleConstructorReturn$2(this, (NumberCodeRep.__proto__ || Object.getPrototypeOf(NumberCodeRep)).call(this));

    _this4.number = number;
    return _this4;
  }

  _createClass$4(NumberCodeRep, [{
    key: 'emit',
    value: function emit(ts) {
      ts.putNumber(this.number);
    }
  }]);

  return NumberCodeRep;
}(CodeRep);

coderep.Paren = function (_CodeRep5) {
  _inherits$2(Paren, _CodeRep5);

  function Paren(expr) {
    _classCallCheck$4(this, Paren);

    var _this5 = _possibleConstructorReturn$2(this, (Paren.__proto__ || Object.getPrototypeOf(Paren)).call(this));

    _this5.expr = expr;
    return _this5;
  }

  _createClass$4(Paren, [{
    key: 'emit',
    value: function emit(ts) {
      ts.put('(');
      this.expr.emit(ts, false);
      ts.put(')');
    }
  }, {
    key: 'forEach',
    value: function forEach(f) {
      f(this);
      this.expr.forEach(f);
    }
  }]);

  return Paren;
}(CodeRep);

coderep.Bracket = function (_CodeRep6) {
  _inherits$2(Bracket, _CodeRep6);

  function Bracket(expr) {
    _classCallCheck$4(this, Bracket);

    var _this6 = _possibleConstructorReturn$2(this, (Bracket.__proto__ || Object.getPrototypeOf(Bracket)).call(this));

    _this6.expr = expr;
    return _this6;
  }

  _createClass$4(Bracket, [{
    key: 'emit',
    value: function emit(ts) {
      ts.put('[');
      this.expr.emit(ts, false);
      ts.put(']');
    }
  }, {
    key: 'forEach',
    value: function forEach(f) {
      f(this);
      this.expr.forEach(f);
    }
  }]);

  return Bracket;
}(CodeRep);

coderep.Brace = function (_CodeRep7) {
  _inherits$2(Brace, _CodeRep7);

  function Brace(expr) {
    _classCallCheck$4(this, Brace);

    var _this7 = _possibleConstructorReturn$2(this, (Brace.__proto__ || Object.getPrototypeOf(Brace)).call(this));

    _this7.expr = expr;
    return _this7;
  }

  _createClass$4(Brace, [{
    key: 'emit',
    value: function emit(ts) {
      ts.put('{');
      this.expr.emit(ts, false);
      ts.put('}');
    }
  }, {
    key: 'forEach',
    value: function forEach(f) {
      f(this);
      this.expr.forEach(f);
    }
  }]);

  return Brace;
}(CodeRep);

coderep.NoIn = function (_CodeRep8) {
  _inherits$2(NoIn, _CodeRep8);

  function NoIn(expr) {
    _classCallCheck$4(this, NoIn);

    var _this8 = _possibleConstructorReturn$2(this, (NoIn.__proto__ || Object.getPrototypeOf(NoIn)).call(this));

    _this8.expr = expr;
    return _this8;
  }

  _createClass$4(NoIn, [{
    key: 'emit',
    value: function emit(ts) {
      this.expr.emit(ts, true);
    }
  }, {
    key: 'forEach',
    value: function forEach(f) {
      f(this);
      this.expr.forEach(f);
    }
  }]);

  return NoIn;
}(CodeRep);

coderep.ContainsIn = function (_CodeRep9) {
  _inherits$2(ContainsIn, _CodeRep9);

  function ContainsIn(expr) {
    _classCallCheck$4(this, ContainsIn);

    var _this9 = _possibleConstructorReturn$2(this, (ContainsIn.__proto__ || Object.getPrototypeOf(ContainsIn)).call(this));

    _this9.expr = expr;
    return _this9;
  }

  _createClass$4(ContainsIn, [{
    key: 'emit',
    value: function emit(ts, noIn) {
      if (noIn) {
        ts.put('(');
        this.expr.emit(ts, false);
        ts.put(')');
      } else {
        this.expr.emit(ts, false);
      }
    }
  }, {
    key: 'forEach',
    value: function forEach(f) {
      f(this);
      this.expr.forEach(f);
    }
  }]);

  return ContainsIn;
}(CodeRep);

coderep.Seq = function (_CodeRep10) {
  _inherits$2(Seq, _CodeRep10);

  function Seq(children) {
    _classCallCheck$4(this, Seq);

    var _this10 = _possibleConstructorReturn$2(this, (Seq.__proto__ || Object.getPrototypeOf(Seq)).call(this));

    _this10.children = children;
    return _this10;
  }

  _createClass$4(Seq, [{
    key: 'emit',
    value: function emit(ts, noIn) {
      this.children.forEach(function (cr) {
        return cr.emit(ts, noIn);
      });
    }
  }, {
    key: 'forEach',
    value: function forEach(f) {
      f(this);
      this.children.forEach(function (x) {
        return x.forEach(f);
      });
    }
  }]);

  return Seq;
}(CodeRep);

coderep.Semi = function (_Token) {
  _inherits$2(Semi, _Token);

  function Semi() {
    _classCallCheck$4(this, Semi);

    return _possibleConstructorReturn$2(this, (Semi.__proto__ || Object.getPrototypeOf(Semi)).call(this, ';'));
  }

  return Semi;
}(Token);

coderep.CommaSep = function (_CodeRep11) {
  _inherits$2(CommaSep, _CodeRep11);

  function CommaSep(children) {
    _classCallCheck$4(this, CommaSep);

    var _this12 = _possibleConstructorReturn$2(this, (CommaSep.__proto__ || Object.getPrototypeOf(CommaSep)).call(this));

    _this12.children = children;
    return _this12;
  }

  _createClass$4(CommaSep, [{
    key: 'emit',
    value: function emit(ts, noIn) {
      var first = true;
      this.children.forEach(function (cr) {
        if (first) {
          first = false;
        } else {
          ts.put(',');
        }
        cr.emit(ts, noIn);
      });
    }
  }, {
    key: 'forEach',
    value: function forEach(f) {
      f(this);
      this.children.forEach(function (x) {
        return x.forEach(f);
      });
    }
  }]);

  return CommaSep;
}(CodeRep);

coderep.SemiOp = function (_CodeRep12) {
  _inherits$2(SemiOp, _CodeRep12);

  function SemiOp() {
    _classCallCheck$4(this, SemiOp);

    return _possibleConstructorReturn$2(this, (SemiOp.__proto__ || Object.getPrototypeOf(SemiOp)).call(this));
  }

  _createClass$4(SemiOp, [{
    key: 'emit',
    value: function emit(ts) {
      ts.putOptionalSemi();
    }
  }]);

  return SemiOp;
}(CodeRep);

Object.defineProperty(minimalCodegen, "__esModule", {
  value: true
});

var _createClass$3 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _objectAssign$1 = objectAssign;

var _objectAssign2$1 = _interopRequireDefault$2(_objectAssign$1);

var _esutils$1 = utils;

var _coderep$1 = coderep;

function _interopRequireDefault$2(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray$2(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function p(node, precedence, a) {
  return (0, _coderep$1.getPrecedence)(node) < precedence ? paren(a) : a;
}

function t(token) {
  var isRegExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  return new _coderep$1.Token(token, isRegExp);
}

function paren(rep) {
  return new _coderep$1.Paren(rep);
}

function brace(rep) {
  return new _coderep$1.Brace(rep);
}

function bracket(rep) {
  return new _coderep$1.Bracket(rep);
}

function noIn$1(rep) {
  return new _coderep$1.NoIn(rep);
}

function markContainsIn$1(state) {
  return state.containsIn ? new _coderep$1.ContainsIn(state) : state;
}

function seq$1() {
  for (var _len = arguments.length, reps = Array(_len), _key = 0; _key < _len; _key++) {
    reps[_key] = arguments[_key];
  }

  return new _coderep$1.Seq(reps);
}

function semi() {
  return new _coderep$1.Semi();
}

function semiOp() {
  return new _coderep$1.SemiOp();
}

function empty$1() {
  return new _coderep$1.Empty();
}

function commaSep(pieces) {
  return new _coderep$1.CommaSep(pieces);
}

function getAssignmentExpr(state) {
  return state ? state.containsGroup ? paren(state) : state : empty$1();
}

var MinimalCodeGen = function () {
  function MinimalCodeGen() {
    _classCallCheck$3(this, MinimalCodeGen);
  }

  _createClass$3(MinimalCodeGen, [{
    key: 'parenToAvoidBeingDirective',
    value: function parenToAvoidBeingDirective(element, original) {
      if (element && element.type === 'ExpressionStatement' && element.expression.type === 'LiteralStringExpression') {
        return seq$1(paren(original.children[0]), semiOp());
      }
      return original;
    }
  }, {
    key: 'regenerateArrowParams',
    value: function regenerateArrowParams(element, original) {
      if (element.rest == null && element.items.length === 1 && element.items[0].type === 'BindingIdentifier') {
        // FormalParameters unconditionally include parentheses, but they're not necessary here
        return this.reduceBindingIdentifier(element.items[0]);
      }
      return original;
    }
  }, {
    key: 'reduceArrayExpression',
    value: function reduceArrayExpression(node, _ref) {
      var elements = _ref.elements;

      if (elements.length === 0) {
        return bracket(empty$1());
      }

      var content = commaSep(elements.map(getAssignmentExpr));
      if (elements.length > 0 && elements[elements.length - 1] == null) {
        content = seq$1(content, t(','));
      }
      return bracket(content);
    }
  }, {
    key: 'reduceAwaitExpression',
    value: function reduceAwaitExpression(node, _ref2) {
      var expression = _ref2.expression;

      return seq$1(t('await'), p(node.expression, (0, _coderep$1.getPrecedence)(node), expression));
    }
  }, {
    key: 'reduceSpreadElement',
    value: function reduceSpreadElement(node, _ref3) {
      var expression = _ref3.expression;

      return seq$1(t('...'), p(node.expression, _coderep$1.Precedence.Assignment, expression));
    }
  }, {
    key: 'reduceSpreadProperty',
    value: function reduceSpreadProperty(node, _ref4) {
      var expression = _ref4.expression;

      return seq$1(t('...'), getAssignmentExpr(expression));
    }
  }, {
    key: 'reduceAssignmentExpression',
    value: function reduceAssignmentExpression(node, _ref5) {
      var binding = _ref5.binding,
          expression = _ref5.expression;

      var leftCode = binding;
      var rightCode = expression;
      var containsIn = expression.containsIn;
      var startsWithCurly = binding.startsWithCurly;
      var startsWithLetSquareBracket = binding.startsWithLetSquareBracket;
      var startsWithFunctionOrClass = binding.startsWithFunctionOrClass;
      if ((0, _coderep$1.getPrecedence)(node.expression) < (0, _coderep$1.getPrecedence)(node)) {
        rightCode = paren(rightCode);
        containsIn = false;
      }
      return (0, _objectAssign2$1.default)(seq$1(leftCode, t('='), rightCode), { containsIn: containsIn, startsWithCurly: startsWithCurly, startsWithLetSquareBracket: startsWithLetSquareBracket, startsWithFunctionOrClass: startsWithFunctionOrClass });
    }
  }, {
    key: 'reduceAssignmentTargetIdentifier',
    value: function reduceAssignmentTargetIdentifier(node) {
      var a = t(node.name);
      if (node.name === 'let') {
        a.startsWithLet = true;
      }
      return a;
    }
  }, {
    key: 'reduceAssignmentTargetWithDefault',
    value: function reduceAssignmentTargetWithDefault(node, _ref6) {
      var binding = _ref6.binding,
          init = _ref6.init;

      return seq$1(binding, t('='), p(node.init, _coderep$1.Precedence.Assignment, init));
    }
  }, {
    key: 'reduceCompoundAssignmentExpression',
    value: function reduceCompoundAssignmentExpression(node, _ref7) {
      var binding = _ref7.binding,
          expression = _ref7.expression;

      var leftCode = binding;
      var rightCode = expression;
      var containsIn = expression.containsIn;
      var startsWithCurly = binding.startsWithCurly;
      var startsWithLetSquareBracket = binding.startsWithLetSquareBracket;
      var startsWithFunctionOrClass = binding.startsWithFunctionOrClass;
      if ((0, _coderep$1.getPrecedence)(node.expression) < (0, _coderep$1.getPrecedence)(node)) {
        rightCode = paren(rightCode);
        containsIn = false;
      }
      return (0, _objectAssign2$1.default)(seq$1(leftCode, t(node.operator), rightCode), { containsIn: containsIn, startsWithCurly: startsWithCurly, startsWithLetSquareBracket: startsWithLetSquareBracket, startsWithFunctionOrClass: startsWithFunctionOrClass });
    }
  }, {
    key: 'reduceBinaryExpression',
    value: function reduceBinaryExpression(node, _ref8) {
      var left = _ref8.left,
          right = _ref8.right;

      var leftCode = left;
      var startsWithCurly = left.startsWithCurly;
      var startsWithLetSquareBracket = left.startsWithLetSquareBracket;
      var startsWithFunctionOrClass = left.startsWithFunctionOrClass;
      var leftContainsIn = left.containsIn;
      var isRightAssociative = node.operator === '**';
      if ((0, _coderep$1.getPrecedence)(node.left) < (0, _coderep$1.getPrecedence)(node) || isRightAssociative && ((0, _coderep$1.getPrecedence)(node.left) === (0, _coderep$1.getPrecedence)(node) || node.left.type === 'UnaryExpression')) {
        leftCode = paren(leftCode);
        startsWithCurly = false;
        startsWithLetSquareBracket = false;
        startsWithFunctionOrClass = false;
        leftContainsIn = false;
      }
      var rightCode = right;
      var rightContainsIn = right.containsIn;
      if ((0, _coderep$1.getPrecedence)(node.right) < (0, _coderep$1.getPrecedence)(node) || !isRightAssociative && (0, _coderep$1.getPrecedence)(node.right) === (0, _coderep$1.getPrecedence)(node)) {
        rightCode = paren(rightCode);
        rightContainsIn = false;
      }
      return (0, _objectAssign2$1.default)(seq$1(leftCode, t(node.operator), rightCode), {
        containsIn: leftContainsIn || rightContainsIn || node.operator === 'in',
        containsGroup: node.operator === ',',
        startsWithCurly: startsWithCurly,
        startsWithLetSquareBracket: startsWithLetSquareBracket,
        startsWithFunctionOrClass: startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceBindingWithDefault',
    value: function reduceBindingWithDefault(node, _ref9) {
      var binding = _ref9.binding,
          init = _ref9.init;

      return seq$1(binding, t('='), p(node.init, _coderep$1.Precedence.Assignment, init));
    }
  }, {
    key: 'reduceBindingIdentifier',
    value: function reduceBindingIdentifier(node) {
      var a = t(node.name);
      if (node.name === 'let') {
        a.startsWithLet = true;
      }
      return a;
    }
  }, {
    key: 'reduceArrayAssignmentTarget',
    value: function reduceArrayAssignmentTarget(node, _ref10) {
      var elements = _ref10.elements,
          rest = _ref10.rest;

      var content = void 0;
      if (elements.length === 0) {
        content = rest == null ? empty$1() : seq$1(t('...'), rest);
      } else {
        elements = elements.concat(rest == null ? [] : [seq$1(t('...'), rest)]);
        content = commaSep(elements.map(getAssignmentExpr));
        if (elements.length > 0 && elements[elements.length - 1] == null) {
          content = seq$1(content, t(','));
        }
      }
      return bracket(content);
    }
  }, {
    key: 'reduceArrayBinding',
    value: function reduceArrayBinding(node, _ref11) {
      var elements = _ref11.elements,
          rest = _ref11.rest;

      var content = void 0;
      if (elements.length === 0) {
        content = rest == null ? empty$1() : seq$1(t('...'), rest);
      } else {
        elements = elements.concat(rest == null ? [] : [seq$1(t('...'), rest)]);
        content = commaSep(elements.map(getAssignmentExpr));
        if (elements.length > 0 && elements[elements.length - 1] == null) {
          content = seq$1(content, t(','));
        }
      }
      return bracket(content);
    }
  }, {
    key: 'reduceObjectAssignmentTarget',
    value: function reduceObjectAssignmentTarget(node, _ref12) {
      var properties = _ref12.properties,
          rest = _ref12.rest;

      var content = commaSep(properties);
      if (properties.length === 0) {
        content = rest == null ? empty$1() : seq$1(t('...'), rest);
      } else {
        content = rest == null ? content : seq$1(content, t(','), t('...'), rest);
      }
      var state = brace(content);
      state.startsWithCurly = true;
      return state;
    }
  }, {
    key: 'reduceObjectBinding',
    value: function reduceObjectBinding(node, _ref13) {
      var properties = _ref13.properties,
          rest = _ref13.rest;

      var content = commaSep(properties);
      if (properties.length === 0) {
        content = rest == null ? empty$1() : seq$1(t('...'), rest);
      } else {
        content = rest == null ? content : seq$1(content, t(','), t('...'), rest);
      }
      var state = brace(content);
      state.startsWithCurly = true;
      return state;
    }
  }, {
    key: 'reduceAssignmentTargetPropertyIdentifier',
    value: function reduceAssignmentTargetPropertyIdentifier(node, _ref14) {
      var binding = _ref14.binding,
          init = _ref14.init;

      if (node.init == null) return binding;
      return seq$1(binding, t('='), p(node.init, _coderep$1.Precedence.Assignment, init));
    }
  }, {
    key: 'reduceAssignmentTargetPropertyProperty',
    value: function reduceAssignmentTargetPropertyProperty(node, _ref15) {
      var name = _ref15.name,
          binding = _ref15.binding;

      return seq$1(name, t(':'), binding);
    }
  }, {
    key: 'reduceBindingPropertyIdentifier',
    value: function reduceBindingPropertyIdentifier(node, _ref16) {
      var binding = _ref16.binding,
          init = _ref16.init;

      if (node.init == null) return binding;
      return seq$1(binding, t('='), p(node.init, _coderep$1.Precedence.Assignment, init));
    }
  }, {
    key: 'reduceBindingPropertyProperty',
    value: function reduceBindingPropertyProperty(node, _ref17) {
      var name = _ref17.name,
          binding = _ref17.binding;

      return seq$1(name, t(':'), binding);
    }
  }, {
    key: 'reduceBlock',
    value: function reduceBlock(node, _ref18) {
      var statements = _ref18.statements;

      return brace(seq$1.apply(undefined, _toConsumableArray$2(statements)));
    }
  }, {
    key: 'reduceBlockStatement',
    value: function reduceBlockStatement(node, _ref19) {
      var block = _ref19.block;

      return block;
    }
  }, {
    key: 'reduceBreakStatement',
    value: function reduceBreakStatement(node) {
      return seq$1(t('break'), node.label ? t(node.label) : empty$1(), semiOp());
    }
  }, {
    key: 'reduceCallExpression',
    value: function reduceCallExpression(node, _ref20) {
      var callee = _ref20.callee,
          args = _ref20.arguments;

      var parenthizedArgs = args.map(function (a, i) {
        return p(node.arguments[i], _coderep$1.Precedence.Assignment, a);
      });
      return (0, _objectAssign2$1.default)(seq$1(p(node.callee, (0, _coderep$1.getPrecedence)(node), callee), paren(commaSep(parenthizedArgs))), {
        startsWithCurly: callee.startsWithCurly,
        startsWithLet: callee.startsWithLet,
        startsWithLetSquareBracket: callee.startsWithLetSquareBracket,
        startsWithFunctionOrClass: callee.startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceCatchClause',
    value: function reduceCatchClause(node, _ref21) {
      var binding = _ref21.binding,
          body = _ref21.body;

      return seq$1(t('catch'), paren(binding), body);
    }
  }, {
    key: 'reduceClassDeclaration',
    value: function reduceClassDeclaration(node, _ref22) {
      var name = _ref22.name,
          _super = _ref22.super,
          elements = _ref22.elements;

      var state = seq$1(t('class'), node.name.name === '*default*' ? empty$1() : name);
      if (_super != null) {
        state = seq$1(state, t('extends'), p(node.super, _coderep$1.Precedence.New, _super));
      }
      state = seq$1.apply(undefined, [state, t('{')].concat(_toConsumableArray$2(elements), [t('}')]));
      return state;
    }
  }, {
    key: 'reduceClassExpression',
    value: function reduceClassExpression(node, _ref23) {
      var name = _ref23.name,
          _super = _ref23.super,
          elements = _ref23.elements;

      var state = t('class');
      if (name != null) {
        state = seq$1(state, name);
      }
      if (_super != null) {
        state = seq$1(state, t('extends'), p(node.super, _coderep$1.Precedence.New, _super));
      }
      state = seq$1.apply(undefined, [state, t('{')].concat(_toConsumableArray$2(elements), [t('}')]));
      state.startsWithFunctionOrClass = true;
      return state;
    }
  }, {
    key: 'reduceClassElement',
    value: function reduceClassElement(node, _ref24) {
      var method = _ref24.method;

      if (!node.isStatic) return method;
      return seq$1(t('static'), method);
    }
  }, {
    key: 'reduceComputedMemberAssignmentTarget',
    value: function reduceComputedMemberAssignmentTarget(node, _ref25) {
      var object = _ref25.object,
          expression = _ref25.expression;

      var startsWithLetSquareBracket = object.startsWithLetSquareBracket || node.object.type === 'IdentifierExpression' && node.object.name === 'let';
      return (0, _objectAssign2$1.default)(seq$1(p(node.object, (0, _coderep$1.getPrecedence)(node), object), bracket(expression)), {
        startsWithLet: object.startsWithLet,
        startsWithLetSquareBracket: startsWithLetSquareBracket,
        startsWithCurly: object.startsWithCurly,
        startsWithFunctionOrClass: object.startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceComputedMemberExpression',
    value: function reduceComputedMemberExpression(node, _ref26) {
      var object = _ref26.object,
          expression = _ref26.expression;

      var startsWithLetSquareBracket = object.startsWithLetSquareBracket || node.object.type === 'IdentifierExpression' && node.object.name === 'let';
      return (0, _objectAssign2$1.default)(seq$1(p(node.object, (0, _coderep$1.getPrecedence)(node), object), bracket(expression)), {
        startsWithLet: object.startsWithLet,
        startsWithLetSquareBracket: startsWithLetSquareBracket,
        startsWithCurly: object.startsWithCurly,
        startsWithFunctionOrClass: object.startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceComputedPropertyName',
    value: function reduceComputedPropertyName(node, _ref27) {
      var expression = _ref27.expression;

      return bracket(p(node.expression, _coderep$1.Precedence.Assignment, expression));
    }
  }, {
    key: 'reduceConditionalExpression',
    value: function reduceConditionalExpression(node, _ref28) {
      var test = _ref28.test,
          consequent = _ref28.consequent,
          alternate = _ref28.alternate;

      var containsIn = test.containsIn || alternate.containsIn;
      var startsWithCurly = test.startsWithCurly;
      var startsWithLetSquareBracket = test.startsWithLetSquareBracket;
      var startsWithFunctionOrClass = test.startsWithFunctionOrClass;
      return (0, _objectAssign2$1.default)(seq$1(p(node.test, _coderep$1.Precedence.LogicalOR, test), t('?'), p(node.consequent, _coderep$1.Precedence.Assignment, consequent), t(':'), p(node.alternate, _coderep$1.Precedence.Assignment, alternate)), {
        containsIn: containsIn,
        startsWithCurly: startsWithCurly,
        startsWithLetSquareBracket: startsWithLetSquareBracket,
        startsWithFunctionOrClass: startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceContinueStatement',
    value: function reduceContinueStatement(node) {
      return seq$1(t('continue'), node.label ? t(node.label) : empty$1(), semiOp());
    }
  }, {
    key: 'reduceDataProperty',
    value: function reduceDataProperty(node, _ref29) {
      var name = _ref29.name,
          expression = _ref29.expression;

      return seq$1(name, t(':'), getAssignmentExpr(expression));
    }
  }, {
    key: 'reduceDebuggerStatement',
    value: function reduceDebuggerStatement() /* node */{
      return seq$1(t('debugger'), semiOp());
    }
  }, {
    key: 'reduceDoWhileStatement',
    value: function reduceDoWhileStatement(node, _ref30) {
      var body = _ref30.body,
          test = _ref30.test;

      return seq$1(t('do'), body, t('while'), paren(test), semiOp());
    }
  }, {
    key: 'reduceEmptyStatement',
    value: function reduceEmptyStatement() /* node */{
      return semi();
    }
  }, {
    key: 'reduceExpressionStatement',
    value: function reduceExpressionStatement(node, _ref31) {
      var expression = _ref31.expression;

      var needsParens = expression.startsWithCurly || expression.startsWithLetSquareBracket || expression.startsWithFunctionOrClass;
      return seq$1(needsParens ? paren(expression) : expression, semiOp());
    }
  }, {
    key: 'reduceForInStatement',
    value: function reduceForInStatement(node, _ref32) {
      var left = _ref32.left,
          right = _ref32.right,
          body = _ref32.body;

      left = node.left.type === 'VariableDeclaration' ? noIn$1(markContainsIn$1(left)) : left;
      return (0, _objectAssign2$1.default)(seq$1(t('for'), paren(seq$1(left.startsWithLet ? paren(left) : left, t('in'), right)), body), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }, {
    key: 'reduceForOfStatement',
    value: function reduceForOfStatement(node, _ref33) {
      var left = _ref33.left,
          right = _ref33.right,
          body = _ref33.body;

      left = node.left.type === 'VariableDeclaration' ? noIn$1(markContainsIn$1(left)) : left;
      return (0, _objectAssign2$1.default)(seq$1(t('for'), paren(seq$1(left.startsWithLet ? paren(left) : left, t('of'), p(node.right, _coderep$1.Precedence.Assignment, right))), body), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }, {
    key: 'reduceForStatement',
    value: function reduceForStatement(node, _ref34) {
      var init = _ref34.init,
          test = _ref34.test,
          update = _ref34.update,
          body = _ref34.body;

      if (init) {
        if (init.startsWithLetSquareBracket) {
          init = paren(init);
        }
        init = noIn$1(markContainsIn$1(init));
      }
      return (0, _objectAssign2$1.default)(seq$1(t('for'), paren(seq$1(init ? init : empty$1(), semi(), test || empty$1(), semi(), update || empty$1())), body), {
        endsWithMissingElse: body.endsWithMissingElse
      });
    }
  }, {
    key: 'reduceForAwaitStatement',
    value: function reduceForAwaitStatement(node, _ref35) {
      var left = _ref35.left,
          right = _ref35.right,
          body = _ref35.body;

      left = node.left.type === 'VariableDeclaration' ? noIn$1(markContainsIn$1(left)) : left;
      return (0, _objectAssign2$1.default)(seq$1(t('for'), t('await'), paren(seq$1(left.startsWithLet ? paren(left) : left, t('of'), p(node.right, _coderep$1.Precedence.Assignment, right))), body), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }, {
    key: 'reduceFunctionBody',
    value: function reduceFunctionBody(node, _ref36) {
      var directives = _ref36.directives,
          statements = _ref36.statements;

      if (statements.length) {
        statements[0] = this.parenToAvoidBeingDirective(node.statements[0], statements[0]);
      }
      return brace(seq$1.apply(undefined, _toConsumableArray$2(directives).concat(_toConsumableArray$2(statements))));
    }
  }, {
    key: 'reduceFunctionDeclaration',
    value: function reduceFunctionDeclaration(node, _ref37) {
      var name = _ref37.name,
          params = _ref37.params,
          body = _ref37.body;

      return seq$1(node.isAsync ? t('async') : empty$1(), t('function'), node.isGenerator ? t('*') : empty$1(), node.name.name === '*default*' ? empty$1() : name, params, body);
    }
  }, {
    key: 'reduceFunctionExpression',
    value: function reduceFunctionExpression(node, _ref38) {
      var name = _ref38.name,
          params = _ref38.params,
          body = _ref38.body;

      var state = seq$1(node.isAsync ? t('async') : empty$1(), t('function'), node.isGenerator ? t('*') : empty$1(), name ? name : empty$1(), params, body);
      state.startsWithFunctionOrClass = true;
      return state;
    }
  }, {
    key: 'reduceFormalParameters',
    value: function reduceFormalParameters(node, _ref39) {
      var items = _ref39.items,
          rest = _ref39.rest;

      return paren(commaSep(items.concat(rest == null ? [] : [seq$1(t('...'), rest)])));
    }
  }, {
    key: 'reduceArrowExpression',
    value: function reduceArrowExpression(node, _ref40) {
      var params = _ref40.params,
          body = _ref40.body;

      params = this.regenerateArrowParams(node.params, params);
      var containsIn = false;
      if (node.body.type !== 'FunctionBody') {
        if (body.startsWithCurly) {
          body = paren(body);
        } else if (body.containsIn) {
          containsIn = true;
        }
      }
      return (0, _objectAssign2$1.default)(seq$1(node.isAsync ? t('async') : empty$1(), params, t('=>'), p(node.body, _coderep$1.Precedence.Assignment, body)), { containsIn: containsIn });
    }
  }, {
    key: 'reduceGetter',
    value: function reduceGetter(node, _ref41) {
      var name = _ref41.name,
          body = _ref41.body;

      return seq$1(t('get'), name, paren(empty$1()), body);
    }
  }, {
    key: 'reduceIdentifierExpression',
    value: function reduceIdentifierExpression(node) {
      var a = t(node.name);
      if (node.name === 'let') {
        a.startsWithLet = true;
      }
      return a;
    }
  }, {
    key: 'reduceIfStatement',
    value: function reduceIfStatement(node, _ref42) {
      var test = _ref42.test,
          consequent = _ref42.consequent,
          alternate = _ref42.alternate;

      if (alternate && consequent.endsWithMissingElse) {
        consequent = brace(consequent);
      }
      return (0, _objectAssign2$1.default)(seq$1(t('if'), paren(test), consequent, alternate ? seq$1(t('else'), alternate) : empty$1()), { endsWithMissingElse: alternate ? alternate.endsWithMissingElse : true });
    }
  }, {
    key: 'reduceImport',
    value: function reduceImport(node, _ref43) {
      var defaultBinding = _ref43.defaultBinding,
          namedImports = _ref43.namedImports;

      var bindings = [];
      if (defaultBinding != null) {
        bindings.push(defaultBinding);
      }
      if (namedImports.length > 0) {
        bindings.push(brace(commaSep(namedImports)));
      }
      if (bindings.length === 0) {
        return seq$1(t('import'), t((0, _coderep$1.escapeStringLiteral)(node.moduleSpecifier)), semiOp());
      }
      return seq$1(t('import'), commaSep(bindings), t('from'), t((0, _coderep$1.escapeStringLiteral)(node.moduleSpecifier)), semiOp());
    }
  }, {
    key: 'reduceImportNamespace',
    value: function reduceImportNamespace(node, _ref44) {
      var defaultBinding = _ref44.defaultBinding,
          namespaceBinding = _ref44.namespaceBinding;

      return seq$1(t('import'), defaultBinding == null ? empty$1() : seq$1(defaultBinding, t(',')), t('*'), t('as'), namespaceBinding, t('from'), t((0, _coderep$1.escapeStringLiteral)(node.moduleSpecifier)), semiOp());
    }
  }, {
    key: 'reduceImportSpecifier',
    value: function reduceImportSpecifier(node, _ref45) {
      var binding = _ref45.binding;

      if (node.name == null) return binding;
      return seq$1(t(node.name), t('as'), binding);
    }
  }, {
    key: 'reduceExportAllFrom',
    value: function reduceExportAllFrom(node) {
      return seq$1(t('export'), t('*'), t('from'), t((0, _coderep$1.escapeStringLiteral)(node.moduleSpecifier)), semiOp());
    }
  }, {
    key: 'reduceExportFrom',
    value: function reduceExportFrom(node, _ref46) {
      var namedExports = _ref46.namedExports;

      return seq$1(t('export'), brace(commaSep(namedExports)), t('from'), t((0, _coderep$1.escapeStringLiteral)(node.moduleSpecifier)), semiOp());
    }
  }, {
    key: 'reduceExportLocals',
    value: function reduceExportLocals(node, _ref47) {
      var namedExports = _ref47.namedExports;

      return seq$1(t('export'), brace(commaSep(namedExports)), semiOp());
    }
  }, {
    key: 'reduceExport',
    value: function reduceExport(node, _ref48) {
      var declaration = _ref48.declaration;

      switch (node.declaration.type) {
        case 'FunctionDeclaration':
        case 'ClassDeclaration':
          break;
        default:
          declaration = seq$1(declaration, semiOp());
      }
      return seq$1(t('export'), declaration);
    }
  }, {
    key: 'reduceExportDefault',
    value: function reduceExportDefault(node, _ref49) {
      var body = _ref49.body;

      body = body.startsWithFunctionOrClass ? paren(body) : body;
      switch (node.body.type) {
        case 'FunctionDeclaration':
        case 'ClassDeclaration':
          return seq$1(t('export default'), body);
        default:
          return seq$1(t('export default'), p(node.body, _coderep$1.Precedence.Assignment, body), semiOp());
      }
    }
  }, {
    key: 'reduceExportFromSpecifier',
    value: function reduceExportFromSpecifier(node) {
      if (node.exportedName == null) return t(node.name);
      return seq$1(t(node.name), t('as'), t(node.exportedName));
    }
  }, {
    key: 'reduceExportLocalSpecifier',
    value: function reduceExportLocalSpecifier(node, _ref50) {
      var name = _ref50.name;

      if (node.exportedName == null) return name;
      return seq$1(name, t('as'), t(node.exportedName));
    }
  }, {
    key: 'reduceLabeledStatement',
    value: function reduceLabeledStatement(node, _ref51) {
      var body = _ref51.body;

      return (0, _objectAssign2$1.default)(seq$1(t(node.label + ':'), body), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }, {
    key: 'reduceLiteralBooleanExpression',
    value: function reduceLiteralBooleanExpression(node) {
      return t(node.value.toString());
    }
  }, {
    key: 'reduceLiteralNullExpression',
    value: function reduceLiteralNullExpression() /* node */{
      return t('null');
    }
  }, {
    key: 'reduceLiteralInfinityExpression',
    value: function reduceLiteralInfinityExpression() /* node */{
      return t('2e308');
    }
  }, {
    key: 'reduceLiteralNumericExpression',
    value: function reduceLiteralNumericExpression(node) {
      return new _coderep$1.NumberCodeRep(node.value);
    }
  }, {
    key: 'reduceLiteralRegExpExpression',
    value: function reduceLiteralRegExpExpression(node) {
      return t('/' + node.pattern + '/' + (node.global ? 'g' : '') + (node.ignoreCase ? 'i' : '') + (node.multiLine ? 'm' : '') + (node.dotAll ? 's' : '') + (node.unicode ? 'u' : '') + (node.sticky ? 'y' : ''), true);
    }
  }, {
    key: 'reduceLiteralStringExpression',
    value: function reduceLiteralStringExpression(node) {
      return t((0, _coderep$1.escapeStringLiteral)(node.value));
    }
  }, {
    key: 'reduceMethod',
    value: function reduceMethod(node, _ref52) {
      var name = _ref52.name,
          params = _ref52.params,
          body = _ref52.body;

      return seq$1(node.isAsync ? t('async') : empty$1(), node.isGenerator ? t('*') : empty$1(), name, params, body);
    }
  }, {
    key: 'reduceModule',
    value: function reduceModule(node, _ref53) {
      var directives = _ref53.directives,
          items = _ref53.items;

      if (items.length) {
        items[0] = this.parenToAvoidBeingDirective(node.items[0], items[0]);
      }
      return seq$1.apply(undefined, _toConsumableArray$2(directives).concat(_toConsumableArray$2(items)));
    }
  }, {
    key: 'reduceNewExpression',
    value: function reduceNewExpression(node, _ref54) {
      var callee = _ref54.callee,
          args = _ref54.arguments;

      var parenthizedArgs = args.map(function (a, i) {
        return p(node.arguments[i], _coderep$1.Precedence.Assignment, a);
      });
      var calleeRep = (0, _coderep$1.getPrecedence)(node.callee) === _coderep$1.Precedence.Call ? paren(callee) : p(node.callee, (0, _coderep$1.getPrecedence)(node), callee);
      return seq$1(t('new'), calleeRep, args.length === 0 ? empty$1() : paren(commaSep(parenthizedArgs)));
    }
  }, {
    key: 'reduceNewTargetExpression',
    value: function reduceNewTargetExpression() {
      return t('new.target');
    }
  }, {
    key: 'reduceObjectExpression',
    value: function reduceObjectExpression(node, _ref55) {
      var properties = _ref55.properties;

      var state = brace(commaSep(properties));
      state.startsWithCurly = true;
      return state;
    }
  }, {
    key: 'reduceUpdateExpression',
    value: function reduceUpdateExpression(node, _ref56) {
      var operand = _ref56.operand;

      if (node.isPrefix) {
        return this.reduceUnaryExpression.apply(this, arguments);
      }
      return (0, _objectAssign2$1.default)(seq$1(p(node.operand, _coderep$1.Precedence.New, operand), t(node.operator)), {
        startsWithCurly: operand.startsWithCurly,
        startsWithLetSquareBracket: operand.startsWithLetSquareBracket,
        startsWithFunctionOrClass: operand.startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceUnaryExpression',
    value: function reduceUnaryExpression(node, _ref57) {
      var operand = _ref57.operand;

      return seq$1(t(node.operator), p(node.operand, (0, _coderep$1.getPrecedence)(node), operand));
    }
  }, {
    key: 'reduceReturnStatement',
    value: function reduceReturnStatement(node, _ref58) {
      var expression = _ref58.expression;

      return seq$1(t('return'), expression || empty$1(), semiOp());
    }
  }, {
    key: 'reduceScript',
    value: function reduceScript(node, _ref59) {
      var directives = _ref59.directives,
          statements = _ref59.statements;

      if (statements.length) {
        statements[0] = this.parenToAvoidBeingDirective(node.statements[0], statements[0]);
      }
      return seq$1.apply(undefined, _toConsumableArray$2(directives).concat(_toConsumableArray$2(statements)));
    }
  }, {
    key: 'reduceSetter',
    value: function reduceSetter(node, _ref60) {
      var name = _ref60.name,
          param = _ref60.param,
          body = _ref60.body;

      return seq$1(t('set'), name, paren(param), body);
    }
  }, {
    key: 'reduceShorthandProperty',
    value: function reduceShorthandProperty(node, _ref61) {
      var name = _ref61.name;

      return name;
    }
  }, {
    key: 'reduceStaticMemberAssignmentTarget',
    value: function reduceStaticMemberAssignmentTarget(node, _ref62) {
      var object = _ref62.object;

      var state = seq$1(p(node.object, (0, _coderep$1.getPrecedence)(node), object), t('.'), t(node.property));
      state.startsWithLet = object.startsWithLet;
      state.startsWithCurly = object.startsWithCurly;
      state.startsWithLetSquareBracket = object.startsWithLetSquareBracket;
      state.startsWithFunctionOrClass = object.startsWithFunctionOrClass;
      return state;
    }
  }, {
    key: 'reduceStaticMemberExpression',
    value: function reduceStaticMemberExpression(node, _ref63) {
      var object = _ref63.object;

      var state = seq$1(p(node.object, (0, _coderep$1.getPrecedence)(node), object), t('.'), t(node.property));
      state.startsWithLet = object.startsWithLet;
      state.startsWithCurly = object.startsWithCurly;
      state.startsWithLetSquareBracket = object.startsWithLetSquareBracket;
      state.startsWithFunctionOrClass = object.startsWithFunctionOrClass;
      return state;
    }
  }, {
    key: 'reduceStaticPropertyName',
    value: function reduceStaticPropertyName(node) {
      if (_esutils$1.keyword.isIdentifierNameES6(node.value)) {
        return t(node.value);
      }
      var n = parseFloat(node.value);
      if (n >= 0 && n.toString() === node.value) {
        return new _coderep$1.NumberCodeRep(n);
      }
      return t((0, _coderep$1.escapeStringLiteral)(node.value));
    }
  }, {
    key: 'reduceSuper',
    value: function reduceSuper() {
      return t('super');
    }
  }, {
    key: 'reduceSwitchCase',
    value: function reduceSwitchCase(node, _ref64) {
      var test = _ref64.test,
          consequent = _ref64.consequent;

      return seq$1(t('case'), test, t(':'), seq$1.apply(undefined, _toConsumableArray$2(consequent)));
    }
  }, {
    key: 'reduceSwitchDefault',
    value: function reduceSwitchDefault(node, _ref65) {
      var consequent = _ref65.consequent;

      return seq$1(t('default:'), seq$1.apply(undefined, _toConsumableArray$2(consequent)));
    }
  }, {
    key: 'reduceSwitchStatement',
    value: function reduceSwitchStatement(node, _ref66) {
      var discriminant = _ref66.discriminant,
          cases = _ref66.cases;

      return seq$1(t('switch'), paren(discriminant), brace(seq$1.apply(undefined, _toConsumableArray$2(cases))));
    }
  }, {
    key: 'reduceSwitchStatementWithDefault',
    value: function reduceSwitchStatementWithDefault(node, _ref67) {
      var discriminant = _ref67.discriminant,
          preDefaultCases = _ref67.preDefaultCases,
          defaultCase = _ref67.defaultCase,
          postDefaultCases = _ref67.postDefaultCases;

      return seq$1(t('switch'), paren(discriminant), brace(seq$1.apply(undefined, _toConsumableArray$2(preDefaultCases).concat([defaultCase], _toConsumableArray$2(postDefaultCases)))));
    }
  }, {
    key: 'reduceTemplateExpression',
    value: function reduceTemplateExpression(node, _ref68) {
      var tag = _ref68.tag,
          elements = _ref68.elements;

      var state = node.tag == null ? empty$1() : p(node.tag, (0, _coderep$1.getPrecedence)(node), tag);
      state = seq$1(state, t('`'));
      for (var i = 0, l = node.elements.length; i < l; ++i) {
        if (node.elements[i].type === 'TemplateElement') {
          state = seq$1(state, i > 0 ? t('}') : empty$1(), elements[i], i < l - 1 ? t('${') : empty$1());
        } else {
          state = seq$1(state, elements[i]);
        }
      }
      state = seq$1(state, t('`'));
      if (node.tag != null) {
        state.startsWithCurly = tag.startsWithCurly;
        state.startsWithLet = tag.startsWithLet;
        state.startsWithLetSquareBracket = tag.startsWithLetSquareBracket;
        state.startsWithFunctionOrClass = tag.startsWithFunctionOrClass;
      }
      return state;
    }
  }, {
    key: 'reduceTemplateElement',
    value: function reduceTemplateElement(node) {
      return new _coderep$1.RawToken(node.rawValue);
    }
  }, {
    key: 'reduceThisExpression',
    value: function reduceThisExpression() /* node */{
      return t('this');
    }
  }, {
    key: 'reduceThrowStatement',
    value: function reduceThrowStatement(node, _ref69) {
      var expression = _ref69.expression;

      return seq$1(t('throw'), expression, semiOp());
    }
  }, {
    key: 'reduceTryCatchStatement',
    value: function reduceTryCatchStatement(node, _ref70) {
      var body = _ref70.body,
          catchClause = _ref70.catchClause;

      return seq$1(t('try'), body, catchClause);
    }
  }, {
    key: 'reduceTryFinallyStatement',
    value: function reduceTryFinallyStatement(node, _ref71) {
      var body = _ref71.body,
          catchClause = _ref71.catchClause,
          finalizer = _ref71.finalizer;

      return seq$1(t('try'), body, catchClause || empty$1(), t('finally'), finalizer);
    }
  }, {
    key: 'reduceYieldExpression',
    value: function reduceYieldExpression(node, _ref72) {
      var expression = _ref72.expression;

      if (node.expression == null) return t('yield');
      return (0, _objectAssign2$1.default)(seq$1(t('yield'), p(node.expression, (0, _coderep$1.getPrecedence)(node), expression)), { containsIn: expression.containsIn });
    }
  }, {
    key: 'reduceYieldGeneratorExpression',
    value: function reduceYieldGeneratorExpression(node, _ref73) {
      var expression = _ref73.expression;

      return (0, _objectAssign2$1.default)(seq$1(t('yield'), t('*'), p(node.expression, (0, _coderep$1.getPrecedence)(node), expression)), { containsIn: expression.containsIn });
    }
  }, {
    key: 'reduceDirective',
    value: function reduceDirective(node) {
      var delim = node.rawValue.match(/(^|[^\\])(\\\\)*"/) ? '\'' : '"';
      return seq$1(t(delim + node.rawValue + delim), semiOp());
    }
  }, {
    key: 'reduceVariableDeclaration',
    value: function reduceVariableDeclaration(node, _ref74) {
      var declarators = _ref74.declarators;

      return seq$1(t(node.kind), commaSep(declarators));
    }
  }, {
    key: 'reduceVariableDeclarationStatement',
    value: function reduceVariableDeclarationStatement(node, _ref75) {
      var declaration = _ref75.declaration;

      return seq$1(declaration, semiOp());
    }
  }, {
    key: 'reduceVariableDeclarator',
    value: function reduceVariableDeclarator(node, _ref76) {
      var binding = _ref76.binding,
          init = _ref76.init;

      var containsIn = init && init.containsIn && !init.containsGroup;
      if (init) {
        if (init.containsGroup) {
          init = paren(init);
        } else {
          init = markContainsIn$1(init);
        }
      }
      return (0, _objectAssign2$1.default)(init == null ? binding : seq$1(binding, t('='), init), { containsIn: containsIn });
    }
  }, {
    key: 'reduceWhileStatement',
    value: function reduceWhileStatement(node, _ref77) {
      var test = _ref77.test,
          body = _ref77.body;

      return (0, _objectAssign2$1.default)(seq$1(t('while'), paren(test), body), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }, {
    key: 'reduceWithStatement',
    value: function reduceWithStatement(node, _ref78) {
      var object = _ref78.object,
          body = _ref78.body;

      return (0, _objectAssign2$1.default)(seq$1(t('with'), paren(object), body), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }]);

  return MinimalCodeGen;
}();

minimalCodegen.default = MinimalCodeGen;

var formattedCodegen = {};

Object.defineProperty(formattedCodegen, "__esModule", {
  value: true
});
formattedCodegen.FormattedCodeGen = formattedCodegen.ExtensibleCodeGen = formattedCodegen.Sep = undefined;

var _createClass$2 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _objectAssign = objectAssign;

var _objectAssign2 = _interopRequireDefault$1(_objectAssign);

var _esutils = utils;

var _coderep = coderep;

function _interopRequireDefault$1(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray$1(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$1(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var INDENT = '  ';

var Linebreak = function (_CodeRep) {
  _inherits$1(Linebreak, _CodeRep);

  function Linebreak() {
    _classCallCheck$2(this, Linebreak);

    var _this = _possibleConstructorReturn$1(this, (Linebreak.__proto__ || Object.getPrototypeOf(Linebreak)).call(this));

    _this.indentation = 0;
    return _this;
  }

  _createClass$2(Linebreak, [{
    key: 'emit',
    value: function emit(ts) {
      ts.put('\n');
      for (var i = 0; i < this.indentation; ++i) {
        ts.put(INDENT);
      }
    }
  }]);

  return Linebreak;
}(_coderep.CodeRep);

function empty() {
  return new _coderep.Empty();
}

function noIn(rep) {
  return new _coderep.NoIn(rep);
}

function markContainsIn(state) {
  return state.containsIn ? new _coderep.ContainsIn(state) : state;
}

function seq() {
  for (var _len = arguments.length, reps = Array(_len), _key = 0; _key < _len; _key++) {
    reps[_key] = arguments[_key];
  }

  return new _coderep.Seq(reps);
}

function isEmpty(codeRep) {
  return codeRep instanceof _coderep.Empty || codeRep instanceof Linebreak || codeRep instanceof _coderep.Seq && codeRep.children.every(isEmpty);
}

var Sep = {};
var separatorNames = ['ARRAY_EMPTY', 'ARRAY_BEFORE_COMMA', 'ARRAY_AFTER_COMMA', 'SPREAD', 'AWAIT', 'AFTER_FORAWAIT_AWAIT', 'BEFORE_DEFAULT_EQUALS', 'AFTER_DEFAULT_EQUALS', 'REST', 'OBJECT_BEFORE_COMMA', 'OBJECT_AFTER_COMMA', 'BEFORE_PROP', 'AFTER_PROP', 'BEFORE_JUMP_LABEL', 'ARGS_BEFORE_COMMA', 'ARGS_AFTER_COMMA', 'CALL', 'BEFORE_CATCH_BINDING', 'AFTER_CATCH_BINDING', 'BEFORE_CLASS_NAME', 'BEFORE_EXTENDS', 'AFTER_EXTENDS', 'BEFORE_CLASS_DECLARATION_ELEMENTS', 'BEFORE_CLASS_EXPRESSION_ELEMENTS', 'AFTER_STATIC', 'BEFORE_CLASS_ELEMENT', 'AFTER_CLASS_ELEMENT', 'BEFORE_TERNARY_QUESTION', 'AFTER_TERNARY_QUESTION', 'BEFORE_TERNARY_COLON', 'AFTER_TERNARY_COLON', 'COMPUTED_MEMBER_EXPRESSION', 'COMPUTED_MEMBER_ASSIGNMENT_TARGET', 'AFTER_DO', 'BEFORE_DOWHILE_WHILE', 'AFTER_DOWHILE_WHILE', 'AFTER_FORIN_FOR', 'BEFORE_FORIN_IN', 'AFTER_FORIN_FOR', 'BEFORE_FORIN_BODY', 'AFTER_FOROF_FOR', 'BEFORE_FOROF_OF', 'AFTER_FOROF_FOR', 'BEFORE_FOROF_BODY', 'AFTER_FOR_FOR', 'BEFORE_FOR_INIT', 'AFTER_FOR_INIT', 'EMPTY_FOR_INIT', 'BEFORE_FOR_TEST', 'AFTER_FOR_TEST', 'EMPTY_FOR_TEST', 'BEFORE_FOR_UPDATE', 'AFTER_FOR_UPDATE', 'EMPTY_FOR_UPDATE', 'BEFORE_FOR_BODY', 'BEFORE_GENERATOR_STAR', 'AFTER_GENERATOR_STAR', 'BEFORE_FUNCTION_PARAMS', 'BEFORE_FUNCTION_DECLARATION_BODY', 'BEFORE_FUNCTION_EXPRESSION_BODY', 'AFTER_FUNCTION_DIRECTIVES', 'BEFORE_ARROW', 'AFTER_ARROW', 'AFTER_GET', 'BEFORE_GET_PARAMS', 'BEFORE_GET_BODY', 'AFTER_IF', 'AFTER_IF_TEST', 'BEFORE_ELSE', 'AFTER_ELSE', 'PARAMETER_BEFORE_COMMA', 'PARAMETER_AFTER_COMMA', 'NAMED_IMPORT_BEFORE_COMMA', 'NAMED_IMPORT_AFTER_COMMA', 'IMPORT_BEFORE_COMMA', 'IMPORT_AFTER_COMMA', 'BEFORE_IMPORT_BINDINGS', 'BEFORE_IMPORT_MODULE', 'AFTER_IMPORT_BINDINGS', 'AFTER_FROM', 'BEFORE_IMPORT_NAMESPACE', 'BEFORE_IMPORT_STAR', 'AFTER_IMPORT_STAR', 'AFTER_IMPORT_AS', 'AFTER_NAMESPACE_BINDING', 'BEFORE_IMPORT_AS', 'AFTER_IMPORT_AS', 'EXPORTS_BEFORE_COMMA', 'EXPORTS_AFTER_COMMA', 'BEFORE_EXPORT_STAR', 'AFTER_EXPORT_STAR', 'BEFORE_EXPORT_BINDINGS', 'AFTER_EXPORT_FROM_BINDINGS', 'AFTER_EXPORT_LOCAL_BINDINGS', 'AFTER_EXPORT', 'EXPORT_DEFAULT', 'AFTER_EXPORT_DEFAULT', 'BEFORE_EXPORT_AS', 'AFTER_EXPORT_AS', 'BEFORE_LABEL_COLON', 'AFTER_LABEL_COLON', 'AFTER_METHOD_GENERATOR_STAR', 'AFTER_METHOD_ASYNC', 'AFTER_METHOD_NAME', 'BEFORE_METHOD_BODY', 'AFTER_MODULE_DIRECTIVES', 'AFTER_NEW', 'BEFORE_NEW_ARGS', 'EMPTY_NEW_CALL', 'NEW_TARGET_BEFORE_DOT', 'NEW_TARGET_AFTER_DOT', 'RETURN', 'AFTER_SET', 'BEFORE_SET_PARAMS', 'BEFORE_SET_BODY', 'AFTER_SCRIPT_DIRECTIVES', 'BEFORE_STATIC_MEMBER_DOT', 'AFTER_STATIC_MEMBER_DOT', 'BEFORE_STATIC_MEMBER_ASSIGNMENT_TARGET_DOT', 'AFTER_STATIC_MEMBER_ASSIGNMENT_TARGET_DOT', 'BEFORE_CASE_TEST', 'AFTER_CASE_TEST', 'BEFORE_CASE_BODY', 'AFTER_CASE_BODY', 'DEFAULT', 'AFTER_DEFAULT_BODY', 'BEFORE_SWITCH_DISCRIM', 'BEFORE_SWITCH_BODY', 'TEMPLATE_TAG', 'BEFORE_TEMPLATE_EXPRESSION', 'AFTER_TEMPLATE_EXPRESSION', 'THROW', 'AFTER_TRY', 'BEFORE_CATCH', 'BEFORE_FINALLY', 'AFTER_FINALLY', 'VARIABLE_DECLARATION', 'YIELD', 'BEFORE_YIELD_STAR', 'AFTER_YIELD_STAR', 'DECLARATORS_BEFORE_COMMA', 'DECLARATORS_AFTER_COMMA', 'BEFORE_INIT_EQUALS', 'AFTER_INIT_EQUALS', 'AFTER_WHILE', 'BEFORE_WHILE_BODY', 'AFTER_WITH', 'BEFORE_WITH_BODY', 'PAREN_AVOIDING_DIRECTIVE_BEFORE', 'PAREN_AVOIDING_DIRECTIVE_AFTER', 'PRECEDENCE_BEFORE', 'PRECEDENCE_AFTER', 'EXPRESSION_PAREN_BEFORE', 'EXPRESSION_PAREN_AFTER', 'CALL_PAREN_BEFORE', 'CALL_PAREN_AFTER', 'CALL_PAREN_EMPTY', 'CATCH_PAREN_BEFORE', 'CATCH_PAREN_AFTER', 'DO_WHILE_TEST_PAREN_BEFORE', 'DO_WHILE_TEST_PAREN_AFTER', 'EXPRESSION_STATEMENT_PAREN_BEFORE', 'EXPRESSION_STATEMENT_PAREN_AFTER', 'FOR_LET_PAREN_BEFORE', 'FOR_LET_PAREN_AFTER', 'FOR_IN_LET_PAREN_BEFORE', 'FOR_IN_LET_PAREN_AFTER', 'FOR_IN_PAREN_BEFORE', 'FOR_IN_PAREN_AFTER', 'FOR_OF_LET_PAREN_BEFORE', 'FOR_OF_LET_PAREN_AFTER', 'FOR_OF_PAREN_BEFORE', 'FOR_OF_PAREN_AFTER', 'PARAMETERS_PAREN_BEFORE', 'PARAMETERS_PAREN_AFTER', 'PARAMETERS_PAREN_EMPTY', 'ARROW_PARAMETERS_PAREN_BEFORE', 'ARROW_PARAMETERS_PAREN_AFTER', 'ARROW_PARAMETERS_PAREN_EMPTY', 'ARROW_BODY_PAREN_BEFORE', 'ARROW_BODY_PAREN_AFTER', 'BEFORE_ARROW_ASYNC_PARAMS', 'GETTER_PARAMS', 'IF_PAREN_BEFORE', 'IF_PAREN_AFTER', 'EXPORT_PAREN_BEFORE', 'EXPORT_PAREN_AFTER', 'NEW_CALLEE_PAREN_BEFORE', 'NEW_CALLEE_PAREN_AFTER', 'NEW_PAREN_BEFORE', 'NEW_PAREN_AFTER', 'NEW_PAREN_EMPTY', 'SETTER_PARAM_BEFORE', 'SETTER_PARAM_AFTER', 'SWITCH_DISCRIM_PAREN_BEFORE', 'SWITCH_DISCRIM_PAREN_AFTER', 'WHILE_TEST_PAREN_BEFORE', 'WHILE_TEST_PAREN_AFTER', 'WITH_PAREN_BEFORE', 'WITH_PAREN_AFTER', 'OBJECT_BRACE_INITIAL', 'OBJECT_BRACE_FINAL', 'OBJECT_EMPTY', 'BLOCK_BRACE_INITIAL', 'BLOCK_BRACE_FINAL', 'BLOCK_EMPTY', 'CLASS_BRACE_INITIAL', 'CLASS_BRACE_FINAL', 'CLASS_EMPTY', 'CLASS_EXPRESSION_BRACE_INITIAL', 'CLASS_EXPRESSION_BRACE_FINAL', 'CLASS_EXPRESSION_BRACE_EMPTY', 'FUNCTION_BRACE_INITIAL', 'FUNCTION_BRACE_FINAL', 'FUNCTION_EMPTY', 'FUNCTION_EXPRESSION_BRACE_INITIAL', 'FUNCTION_EXPRESSION_BRACE_FINAL', 'FUNCTION_EXPRESSION_EMPTY', 'ARROW_BRACE_INITIAL', 'ARROW_BRACE_FINAL', 'ARROW_BRACE_EMPTY', 'GET_BRACE_INTIAL', 'GET_BRACE_FINAL', 'GET_BRACE_EMPTY', 'MISSING_ELSE_INTIIAL', 'MISSING_ELSE_FINAL', 'MISSING_ELSE_EMPTY', 'IMPORT_BRACE_INTIAL', 'IMPORT_BRACE_FINAL', 'IMPORT_BRACE_EMPTY', 'EXPORT_BRACE_INITIAL', 'EXPORT_BRACE_FINAL', 'EXPORT_BRACE_EMPTY', 'METHOD_BRACE_INTIAL', 'METHOD_BRACE_FINAL', 'METHOD_BRACE_EMPTY', 'SET_BRACE_INTIIAL', 'SET_BRACE_FINAL', 'SET_BRACE_EMPTY', 'SWITCH_BRACE_INTIAL', 'SWITCH_BRACE_FINAL', 'SWITCH_BRACE_EMPTY', 'ARRAY_INITIAL', 'ARRAY_FINAL', 'COMPUTED_MEMBER_BRACKET_INTIAL', 'COMPUTED_MEMBER_BRACKET_FINAL', 'COMPUTED_MEMBER_ASSIGNMENT_TARGET_BRACKET_INTIAL', 'COMPUTED_MEMBER_ASSIGNMENT_TARGET_BRACKET_FINAL', 'COMPUTED_PROPERTY_BRACKET_INTIAL', 'COMPUTED_PROPERTY_BRACKET_FINAL'];
for (var i = 0; i < separatorNames.length; ++i) {
  Sep[separatorNames[i]] = { type: separatorNames[i] };
}

Sep.BEFORE_ASSIGN_OP = function (op) {
  return {
    type: 'BEFORE_ASSIGN_OP',
    op: op
  };
};

Sep.AFTER_ASSIGN_OP = function (op) {
  return {
    type: 'AFTER_ASSIGN_OP',
    op: op
  };
};

Sep.BEFORE_BINOP = function (op) {
  return {
    type: 'BEFORE_BINOP',
    op: op
  };
};

Sep.AFTER_BINOP = function (op) {
  return {
    type: 'AFTER_BINOP',
    op: op
  };
};

Sep.BEFORE_POSTFIX = function (op) {
  return {
    type: 'BEFORE_POSTFIX',
    op: op
  };
};

Sep.UNARY = function (op) {
  return {
    type: 'UNARY',
    op: op
  };
};

Sep.AFTER_STATEMENT = function (node) {
  return {
    type: 'AFTER_STATEMENT',
    node: node
  };
};

Sep.BEFORE_FUNCTION_NAME = function (node) {
  return {
    type: 'BEFORE_FUNCTION_NAME',
    node: node
  };
};
formattedCodegen.Sep = Sep;

var ExtensibleCodeGen = formattedCodegen.ExtensibleCodeGen = function () {
  function ExtensibleCodeGen() {
    _classCallCheck$2(this, ExtensibleCodeGen);
  }

  _createClass$2(ExtensibleCodeGen, [{
    key: 'parenToAvoidBeingDirective',
    value: function parenToAvoidBeingDirective(element, original) {
      if (element && element.type === 'ExpressionStatement' && element.expression.type === 'LiteralStringExpression') {
        return seq(this.paren(original.children[0], Sep.PAREN_AVOIDING_DIRECTIVE_BEFORE, Sep.PAREN_AVOIDING_DIRECTIVE_AFTER), this.semiOp());
      }
      return original;
    }
  }, {
    key: 't',
    value: function t(token) {
      var isRegExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      return new _coderep.Token(token, isRegExp);
    }
  }, {
    key: 'p',
    value: function p(node, precedence, a) {
      return (0, _coderep.getPrecedence)(node) < precedence ? this.paren(a, Sep.PRECEDENCE_BEFORE, Sep.PRECEDENCE_AFTER) : a;
    }
  }, {
    key: 'getAssignmentExpr',
    value: function getAssignmentExpr(state) {
      return state ? state.containsGroup ? this.paren(state, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER) : state : empty();
    }
  }, {
    key: 'paren',
    value: function paren(rep, first, last, emptySep) {
      if (isEmpty(rep)) {
        return new _coderep.Paren(this.sep(emptySep));
      }
      return new _coderep.Paren(seq(first ? this.sep(first) : empty(), rep, last ? this.sep(last) : empty()));
    }
  }, {
    key: 'brace',
    value: function brace(rep, node, first, last, emptySep) {
      if (isEmpty(rep)) {
        return new _coderep.Brace(this.sep(emptySep));
      }
      return new _coderep.Brace(seq(this.sep(first), rep, this.sep(last)));
    }
  }, {
    key: 'bracket',
    value: function bracket(rep, first, last, emptySep) {
      if (isEmpty(rep)) {
        return new _coderep.Bracket(this.sep(emptySep));
      }
      return new _coderep.Bracket(seq(this.sep(first), rep, this.sep(last)));
    }
  }, {
    key: 'commaSep',
    value: function commaSep(pieces, before, after) {
      var _this2 = this;

      var first = true;
      pieces = pieces.map(function (p) {
        if (first) {
          first = false;
          return p;
        }
        return seq(_this2.sep(before), _this2.t(','), _this2.sep(after), p);
      });
      return seq.apply(undefined, _toConsumableArray$1(pieces));
    }
  }, {
    key: 'semiOp',
    value: function semiOp() {
      return new _coderep.SemiOp();
    }
  }, {
    key: 'sep',
    value: function sep() /* kind */{
      return empty();
    }
  }, {
    key: 'reduceArrayExpression',
    value: function reduceArrayExpression(node, _ref) {
      var _this3 = this;

      var elements = _ref.elements;

      if (elements.length === 0) {
        return this.bracket(empty(), null, null, Sep.ARRAY_EMPTY);
      }

      var content = this.commaSep(elements.map(function (e) {
        return _this3.getAssignmentExpr(e);
      }), Sep.ARRAY_BEFORE_COMMA, Sep.ARRAY_AFTER_COMMA);
      if (elements.length > 0 && elements[elements.length - 1] == null) {
        content = seq(content, this.sep(Sep.ARRAY_BEFORE_COMMA), this.t(','), this.sep(Sep.ARRAY_AFTER_COMMA));
      }
      return this.bracket(content, Sep.ARRAY_INITIAL, Sep.ARRAY_FINAL);
    }
  }, {
    key: 'reduceAwaitExpression',
    value: function reduceAwaitExpression(node, _ref2) {
      var expression = _ref2.expression;

      return seq(this.t('await'), this.sep(Sep.AWAIT), this.p(node.expression, (0, _coderep.getPrecedence)(node), expression));
    }
  }, {
    key: 'reduceSpreadElement',
    value: function reduceSpreadElement(node, _ref3) {
      var expression = _ref3.expression;

      return seq(this.t('...'), this.sep(Sep.SPREAD), this.p(node.expression, _coderep.Precedence.Assignment, expression));
    }
  }, {
    key: 'reduceSpreadProperty',
    value: function reduceSpreadProperty(node, _ref4) {
      var expression = _ref4.expression;

      return seq(this.t('...'), this.sep(Sep.SPREAD), this.getAssignmentExpr(expression));
    }
  }, {
    key: 'reduceAssignmentExpression',
    value: function reduceAssignmentExpression(node, _ref5) {
      var binding = _ref5.binding,
          expression = _ref5.expression;

      var leftCode = binding;
      var rightCode = expression;
      var containsIn = expression.containsIn;
      var startsWithCurly = binding.startsWithCurly;
      var startsWithLetSquareBracket = binding.startsWithLetSquareBracket;
      var startsWithFunctionOrClass = binding.startsWithFunctionOrClass;
      if ((0, _coderep.getPrecedence)(node.expression) < (0, _coderep.getPrecedence)(node)) {
        rightCode = this.paren(rightCode, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER);
        containsIn = false;
      }
      return (0, _objectAssign2.default)(seq(leftCode, this.sep(Sep.BEFORE_ASSIGN_OP('=')), this.t('='), this.sep(Sep.AFTER_ASSIGN_OP('=')), rightCode), { containsIn: containsIn, startsWithCurly: startsWithCurly, startsWithLetSquareBracket: startsWithLetSquareBracket, startsWithFunctionOrClass: startsWithFunctionOrClass });
    }
  }, {
    key: 'reduceAssignmentTargetIdentifier',
    value: function reduceAssignmentTargetIdentifier(node) {
      var a = this.t(node.name);
      if (node.name === 'let') {
        a.startsWithLet = true;
      }
      return a;
    }
  }, {
    key: 'reduceAssignmentTargetWithDefault',
    value: function reduceAssignmentTargetWithDefault(node, _ref6) {
      var binding = _ref6.binding,
          init = _ref6.init;

      return seq(binding, this.sep(Sep.BEFORE_DEFAULT_EQUALS), this.t('='), this.sep(Sep.AFTER_DEFAULT_EQUALS), this.p(node.init, _coderep.Precedence.Assignment, init));
    }
  }, {
    key: 'reduceCompoundAssignmentExpression',
    value: function reduceCompoundAssignmentExpression(node, _ref7) {
      var binding = _ref7.binding,
          expression = _ref7.expression;

      var leftCode = binding;
      var rightCode = expression;
      var containsIn = expression.containsIn;
      var startsWithCurly = binding.startsWithCurly;
      var startsWithLetSquareBracket = binding.startsWithLetSquareBracket;
      var startsWithFunctionOrClass = binding.startsWithFunctionOrClass;
      if ((0, _coderep.getPrecedence)(node.expression) < (0, _coderep.getPrecedence)(node)) {
        rightCode = this.paren(rightCode, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER);
        containsIn = false;
      }
      return (0, _objectAssign2.default)(seq(leftCode, this.sep(Sep.BEFORE_ASSIGN_OP(node.operator)), this.t(node.operator), this.sep(Sep.AFTER_ASSIGN_OP(node.operator)), rightCode), { containsIn: containsIn, startsWithCurly: startsWithCurly, startsWithLetSquareBracket: startsWithLetSquareBracket, startsWithFunctionOrClass: startsWithFunctionOrClass });
    }
  }, {
    key: 'reduceBinaryExpression',
    value: function reduceBinaryExpression(node, _ref8) {
      var left = _ref8.left,
          right = _ref8.right;

      var leftCode = left;
      var startsWithCurly = left.startsWithCurly;
      var startsWithLetSquareBracket = left.startsWithLetSquareBracket;
      var startsWithFunctionOrClass = left.startsWithFunctionOrClass;
      var leftContainsIn = left.containsIn;
      var isRightAssociative = node.operator === '**';
      if ((0, _coderep.getPrecedence)(node.left) < (0, _coderep.getPrecedence)(node) || isRightAssociative && ((0, _coderep.getPrecedence)(node.left) === (0, _coderep.getPrecedence)(node) || node.left.type === 'UnaryExpression')) {
        leftCode = this.paren(leftCode, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER);
        startsWithCurly = false;
        startsWithLetSquareBracket = false;
        startsWithFunctionOrClass = false;
        leftContainsIn = false;
      }
      var rightCode = right;
      var rightContainsIn = right.containsIn;
      if ((0, _coderep.getPrecedence)(node.right) < (0, _coderep.getPrecedence)(node) || !isRightAssociative && (0, _coderep.getPrecedence)(node.right) === (0, _coderep.getPrecedence)(node)) {
        rightCode = this.paren(rightCode, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER);
        rightContainsIn = false;
      }
      return (0, _objectAssign2.default)(seq(leftCode, this.sep(Sep.BEFORE_BINOP(node.operator)), this.t(node.operator), this.sep(Sep.AFTER_BINOP(node.operator)), rightCode), {
        containsIn: leftContainsIn || rightContainsIn || node.operator === 'in',
        containsGroup: node.operator === ',',
        startsWithCurly: startsWithCurly,
        startsWithLetSquareBracket: startsWithLetSquareBracket,
        startsWithFunctionOrClass: startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceBindingWithDefault',
    value: function reduceBindingWithDefault(node, _ref9) {
      var binding = _ref9.binding,
          init = _ref9.init;

      return seq(binding, this.sep(Sep.BEFORE_DEFAULT_EQUALS), this.t('='), this.sep(Sep.AFTER_DEFAULT_EQUALS), this.p(node.init, _coderep.Precedence.Assignment, init));
    }
  }, {
    key: 'reduceBindingIdentifier',
    value: function reduceBindingIdentifier(node) {
      var a = this.t(node.name);
      if (node.name === 'let') {
        a.startsWithLet = true;
      }
      return a;
    }
  }, {
    key: 'reduceArrayAssignmentTarget',
    value: function reduceArrayAssignmentTarget(node, _ref10) {
      var _this4 = this;

      var elements = _ref10.elements,
          rest = _ref10.rest;

      var content = void 0;
      if (elements.length === 0) {
        content = rest == null ? empty() : seq(this.t('...'), this.sep(Sep.REST), rest);
      } else {
        elements = elements.concat(rest == null ? [] : [seq(this.t('...'), this.sep(Sep.REST), rest)]);
        content = this.commaSep(elements.map(function (e) {
          return _this4.getAssignmentExpr(e);
        }), Sep.ARRAY_BEFORE_COMMA, Sep.ARRAY_AFTER_COMMA);
        if (elements.length > 0 && elements[elements.length - 1] == null) {
          content = seq(content, this.sep(Sep.ARRAY_BEFORE_COMMA), this.t(','), this.sep(Sep.ARRAY_AFTER_COMMA));
        }
      }
      return this.bracket(content, Sep.ARRAY_INITIAL, Sep.ARRAY_FINAL, Sep.ARRAY_EMPTY);
    }
  }, {
    key: 'reduceArrayBinding',
    value: function reduceArrayBinding(node, _ref11) {
      var _this5 = this;

      var elements = _ref11.elements,
          rest = _ref11.rest;

      var content = void 0;
      if (elements.length === 0) {
        content = rest == null ? empty() : seq(this.t('...'), this.sep(Sep.REST), rest);
      } else {
        elements = elements.concat(rest == null ? [] : [seq(this.t('...'), this.sep(Sep.REST), rest)]);
        content = this.commaSep(elements.map(function (e) {
          return _this5.getAssignmentExpr(e);
        }), Sep.ARRAY_BEFORE_COMMA, Sep.ARRAY_AFTER_COMMA);
        if (elements.length > 0 && elements[elements.length - 1] == null) {
          content = seq(content, this.sep(Sep.ARRAY_BEFORE_COMMA), this.t(','), this.sep(Sep.ARRAY_AFTER_COMMA));
        }
      }
      return this.bracket(content, Sep.ARRAY_INITIAL, Sep.ARRAY_FINAL, Sep.ARRAY_EMPTY);
    }
  }, {
    key: 'reduceObjectAssignmentTarget',
    value: function reduceObjectAssignmentTarget(node, _ref12) {
      var properties = _ref12.properties,
          rest = _ref12.rest;

      var content = void 0;
      if (properties.length === 0) {
        content = rest == null ? empty() : seq(this.t('...'), this.sep(Sep.REST), rest);
      } else {
        content = this.commaSep(properties, Sep.OBJECT_BEFORE_COMMA, Sep.OBJECT_AFTER_COMMA);
        content = rest == null ? content : this.commaSep([content, seq(this.t('...'), this.sep(Sep.REST), rest)], Sep.OBJECT_BEFORE_COMMA, Sep.OBJECT_AFTER_COMMA);
      }
      var state = this.brace(content, node, Sep.OBJECT_BRACE_INITIAL, Sep.OBJECT_BRACE_FINAL, Sep.OBJECT_EMPTY);
      state.startsWithCurly = true;
      return state;
    }
  }, {
    key: 'reduceObjectBinding',
    value: function reduceObjectBinding(node, _ref13) {
      var properties = _ref13.properties,
          rest = _ref13.rest;

      var content = void 0;
      if (properties.length === 0) {
        content = rest == null ? empty() : seq(this.t('...'), this.sep(Sep.REST), rest);
      } else {
        content = this.commaSep(properties, Sep.OBJECT_BEFORE_COMMA, Sep.OBJECT_AFTER_COMMA);
        content = rest == null ? content : this.commaSep([content, seq(this.t('...'), this.sep(Sep.REST), rest)], Sep.OBJECT_BEFORE_COMMA, Sep.OBJECT_AFTER_COMMA);
      }
      var state = this.brace(content, node, Sep.OBJECT_BRACE_INITIAL, Sep.OBJECT_BRACE_FINAL, Sep.OBJECT_EMPTY);
      state.startsWithCurly = true;
      return state;
    }
  }, {
    key: 'reduceAssignmentTargetPropertyIdentifier',
    value: function reduceAssignmentTargetPropertyIdentifier(node, _ref14) {
      var binding = _ref14.binding,
          init = _ref14.init;

      if (node.init == null) return binding;
      return seq(binding, this.sep(Sep.BEFORE_DEFAULT_EQUALS), this.t('='), this.sep(Sep.AFTER_DEFAULT_EQUALS), this.p(node.init, _coderep.Precedence.Assignment, init));
    }
  }, {
    key: 'reduceAssignmentTargetPropertyProperty',
    value: function reduceAssignmentTargetPropertyProperty(node, _ref15) {
      var name = _ref15.name,
          binding = _ref15.binding;

      return seq(name, this.sep(Sep.BEFORE_PROP), this.t(':'), this.sep(Sep.AFTER_PROP), binding);
    }
  }, {
    key: 'reduceBindingPropertyIdentifier',
    value: function reduceBindingPropertyIdentifier(node, _ref16) {
      var binding = _ref16.binding,
          init = _ref16.init;

      if (node.init == null) return binding;
      return seq(binding, this.sep(Sep.BEFORE_DEFAULT_EQUALS), this.t('='), this.sep(Sep.AFTER_DEFAULT_EQUALS), this.p(node.init, _coderep.Precedence.Assignment, init));
    }
  }, {
    key: 'reduceBindingPropertyProperty',
    value: function reduceBindingPropertyProperty(node, _ref17) {
      var name = _ref17.name,
          binding = _ref17.binding;

      return seq(name, this.sep(Sep.BEFORE_PROP), this.t(':'), this.sep(Sep.AFTER_PROP), binding);
    }
  }, {
    key: 'reduceBlock',
    value: function reduceBlock(node, _ref18) {
      var statements = _ref18.statements;

      return this.brace(seq.apply(undefined, _toConsumableArray$1(statements)), node, Sep.BLOCK_BRACE_INITIAL, Sep.BLOCK_BRACE_FINAL, Sep.BLOCK_EMPTY);
    }
  }, {
    key: 'reduceBlockStatement',
    value: function reduceBlockStatement(node, _ref19) {
      var block = _ref19.block;

      return seq(block, this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceBreakStatement',
    value: function reduceBreakStatement(node) {
      return seq(this.t('break'), node.label ? seq(this.sep(Sep.BEFORE_JUMP_LABEL), this.t(node.label)) : empty(), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceCallExpression',
    value: function reduceCallExpression(node, _ref20) {
      var _this6 = this;

      var callee = _ref20.callee,
          args = _ref20.arguments;

      var parenthizedArgs = args.map(function (a, i) {
        return _this6.p(node.arguments[i], _coderep.Precedence.Assignment, a);
      });
      return (0, _objectAssign2.default)(seq(this.p(node.callee, (0, _coderep.getPrecedence)(node), callee), this.sep(Sep.CALL), this.paren(this.commaSep(parenthizedArgs, Sep.ARGS_BEFORE_COMMA, Sep.ARGS_AFTER_COMMA), Sep.CALL_PAREN_BEFORE, Sep.CALL_PAREN_AFTER, Sep.CALL_PAREN_EMPTY)), {
        startsWithCurly: callee.startsWithCurly,
        startsWithLet: callee.startsWithLet,
        startsWithLetSquareBracket: callee.startsWithLetSquareBracket,
        startsWithFunctionOrClass: callee.startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceCatchClause',
    value: function reduceCatchClause(node, _ref21) {
      var binding = _ref21.binding,
          body = _ref21.body;

      return seq(this.t('catch'), this.sep(Sep.BEFORE_CATCH_BINDING), this.paren(binding, Sep.CATCH_PAREN_BEFORE, Sep.CATCH_PAREN_AFTER), this.sep(Sep.AFTER_CATCH_BINDING), body);
    }
  }, {
    key: 'reduceClassDeclaration',
    value: function reduceClassDeclaration(node, _ref22) {
      var name = _ref22.name,
          _super = _ref22.super,
          elements = _ref22.elements;

      var state = seq(this.t('class'), node.name.name === '*default*' ? empty() : seq(this.sep(Sep.BEFORE_CLASS_NAME), name));
      if (_super != null) {
        state = seq(state, this.sep(Sep.BEFORE_EXTENDS), this.t('extends'), this.sep(Sep.AFTER_EXTENDS), this.p(node.super, _coderep.Precedence.New, _super));
      }
      state = seq(state, this.sep(Sep.BEFORE_CLASS_DECLARATION_ELEMENTS), this.brace(seq.apply(undefined, _toConsumableArray$1(elements)), node, Sep.CLASS_BRACE_INITIAL, Sep.CLASS_BRACE_FINAL, Sep.CLASS_EMPTY), this.sep(Sep.AFTER_STATEMENT(node)));
      return state;
    }
  }, {
    key: 'reduceClassExpression',
    value: function reduceClassExpression(node, _ref23) {
      var name = _ref23.name,
          _super = _ref23.super,
          elements = _ref23.elements;

      var state = this.t('class');
      if (name != null) {
        state = seq(state, this.sep(Sep.BEFORE_CLASS_NAME), name);
      }
      if (_super != null) {
        state = seq(state, this.sep(Sep.BEFORE_EXTENDS), this.t('extends'), this.sep(Sep.AFTER_EXTENDS), this.p(node.super, _coderep.Precedence.New, _super));
      }
      state = seq(state, this.sep(Sep.BEFORE_CLASS_EXPRESSION_ELEMENTS), this.brace(seq.apply(undefined, _toConsumableArray$1(elements)), node, Sep.CLASS_EXPRESSION_BRACE_INITIAL, Sep.CLASS_EXPRESSION_BRACE_FINAL, Sep.CLASS_EXPRESSION_BRACE_EMPTY));
      state.startsWithFunctionOrClass = true;
      return state;
    }
  }, {
    key: 'reduceClassElement',
    value: function reduceClassElement(node, _ref24) {
      var method = _ref24.method;

      method = seq(this.sep(Sep.BEFORE_CLASS_ELEMENT), method, this.sep(Sep.AFTER_CLASS_ELEMENT));
      if (!node.isStatic) return method;
      return seq(this.t('static'), this.sep(Sep.AFTER_STATIC), method);
    }
  }, {
    key: 'reduceComputedMemberAssignmentTarget',
    value: function reduceComputedMemberAssignmentTarget(node, _ref25) {
      var object = _ref25.object,
          expression = _ref25.expression;

      var startsWithLetSquareBracket = object.startsWithLetSquareBracket || node.object.type === 'IdentifierExpression' && node.object.name === 'let';
      return (0, _objectAssign2.default)(seq(this.p(node.object, (0, _coderep.getPrecedence)(node), object), this.sep(Sep.COMPUTED_MEMBER_ASSIGNMENT_TARGET), this.bracket(expression, Sep.COMPUTED_MEMBER_ASSIGNMENT_TARGET_BRACKET_INTIAL, Sep.COMPUTED_MEMBER_ASSIGNMENT_TARGET_BRACKET_FINAL)), {
        startsWithLet: object.startsWithLet,
        startsWithLetSquareBracket: startsWithLetSquareBracket,
        startsWithCurly: object.startsWithCurly,
        startsWithFunctionOrClass: object.startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceComputedMemberExpression',
    value: function reduceComputedMemberExpression(node, _ref26) {
      var object = _ref26.object,
          expression = _ref26.expression;

      var startsWithLetSquareBracket = object.startsWithLetSquareBracket || node.object.type === 'IdentifierExpression' && node.object.name === 'let';
      return (0, _objectAssign2.default)(seq(this.p(node.object, (0, _coderep.getPrecedence)(node), object), this.sep(Sep.COMPUTED_MEMBER_EXPRESSION), this.bracket(expression, Sep.COMPUTED_MEMBER_BRACKET_INTIAL, Sep.COMPUTED_MEMBER_BRACKET_FINAL)), {
        startsWithLet: object.startsWithLet,
        startsWithLetSquareBracket: startsWithLetSquareBracket,
        startsWithCurly: object.startsWithCurly,
        startsWithFunctionOrClass: object.startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceComputedPropertyName',
    value: function reduceComputedPropertyName(node, _ref27) {
      var expression = _ref27.expression;

      return this.bracket(this.p(node.expression, _coderep.Precedence.Assignment, expression), Sep.COMPUTED_PROPERTY_BRACKET_INTIAL, Sep.COMPUTED_PROPERTY_BRACKET_FINAL);
    }
  }, {
    key: 'reduceConditionalExpression',
    value: function reduceConditionalExpression(node, _ref28) {
      var test = _ref28.test,
          consequent = _ref28.consequent,
          alternate = _ref28.alternate;

      var containsIn = test.containsIn || alternate.containsIn;
      var startsWithCurly = test.startsWithCurly;
      var startsWithLetSquareBracket = test.startsWithLetSquareBracket;
      var startsWithFunctionOrClass = test.startsWithFunctionOrClass;
      return (0, _objectAssign2.default)(seq(this.p(node.test, _coderep.Precedence.LogicalOR, test), this.sep(Sep.BEFORE_TERNARY_QUESTION), this.t('?'), this.sep(Sep.AFTER_TERNARY_QUESTION), this.p(node.consequent, _coderep.Precedence.Assignment, consequent), this.sep(Sep.BEFORE_TERNARY_COLON), this.t(':'), this.sep(Sep.AFTER_TERNARY_COLON), this.p(node.alternate, _coderep.Precedence.Assignment, alternate)), {
        containsIn: containsIn,
        startsWithCurly: startsWithCurly,
        startsWithLetSquareBracket: startsWithLetSquareBracket,
        startsWithFunctionOrClass: startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceContinueStatement',
    value: function reduceContinueStatement(node) {
      return seq(this.t('continue'), node.label ? seq(this.sep(Sep.BEFORE_JUMP_LABEL), this.t(node.label)) : empty(), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceDataProperty',
    value: function reduceDataProperty(node, _ref29) {
      var name = _ref29.name,
          expression = _ref29.expression;

      return seq(name, this.sep(Sep.BEFORE_PROP), this.t(':'), this.sep(Sep.AFTER_PROP), this.getAssignmentExpr(expression));
    }
  }, {
    key: 'reduceDebuggerStatement',
    value: function reduceDebuggerStatement(node) {
      return seq(this.t('debugger'), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceDoWhileStatement',
    value: function reduceDoWhileStatement(node, _ref30) {
      var body = _ref30.body,
          test = _ref30.test;

      return seq(this.t('do'), this.sep(Sep.AFTER_DO), body, this.sep(Sep.BEFORE_DOWHILE_WHILE), this.t('while'), this.sep(Sep.AFTER_DOWHILE_WHILE), this.paren(test, Sep.DO_WHILE_TEST_PAREN_BEFORE, Sep.DO_WHILE_TEST_PAREN_AFTER), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceEmptyStatement',
    value: function reduceEmptyStatement(node) {
      return seq(this.t(';'), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceExpressionStatement',
    value: function reduceExpressionStatement(node, _ref31) {
      var expression = _ref31.expression;

      var needsParens = expression.startsWithCurly || expression.startsWithLetSquareBracket || expression.startsWithFunctionOrClass;
      return seq(needsParens ? this.paren(expression, Sep.EXPRESSION_STATEMENT_PAREN_BEFORE, Sep.EXPRESSION_STATEMENT_PAREN_AFTER) : expression, this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceForInStatement',
    value: function reduceForInStatement(node, _ref32) {
      var left = _ref32.left,
          right = _ref32.right,
          body = _ref32.body;

      left = node.left.type === 'VariableDeclaration' ? noIn(markContainsIn(left)) : left;
      return (0, _objectAssign2.default)(seq(this.t('for'), this.sep(Sep.AFTER_FORIN_FOR), this.paren(seq(left.startsWithLet ? this.paren(left, Sep.FOR_IN_LET_PAREN_BEFORE, Sep.FOR_IN_LET_PAREN_AFTER) : left, this.sep(Sep.BEFORE_FORIN_IN), this.t('in'), this.sep(Sep.AFTER_FORIN_FOR), right), Sep.FOR_IN_PAREN_BEFORE, Sep.FOR_IN_PAREN_AFTER), this.sep(Sep.BEFORE_FORIN_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }, {
    key: 'reduceForOfStatement',
    value: function reduceForOfStatement(node, _ref33) {
      var left = _ref33.left,
          right = _ref33.right,
          body = _ref33.body;

      left = node.left.type === 'VariableDeclaration' ? noIn(markContainsIn(left)) : left;
      return (0, _objectAssign2.default)(seq(this.t('for'), this.sep(Sep.AFTER_FOROF_FOR), this.paren(seq(left.startsWithLet ? this.paren(left, Sep.FOR_OF_LET_PAREN_BEFORE, Sep.FOR_OF_LET_PAREN_AFTER) : left, this.sep(Sep.BEFORE_FOROF_OF), this.t('of'), this.sep(Sep.AFTER_FOROF_FOR), this.p(node.right, _coderep.Precedence.Assignment, right)), Sep.FOR_OF_PAREN_BEFORE, Sep.FOR_OF_PAREN_AFTER), this.sep(Sep.BEFORE_FOROF_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }, {
    key: 'reduceForStatement',
    value: function reduceForStatement(node, _ref34) {
      var init = _ref34.init,
          test = _ref34.test,
          update = _ref34.update,
          body = _ref34.body;

      if (init) {
        if (init.startsWithLetSquareBracket) {
          init = this.paren(init, Sep.FOR_LET_PAREN_BEFORE, Sep.FOR_LET_PAREN_AFTER);
        }
        init = noIn(markContainsIn(init));
      }
      return (0, _objectAssign2.default)(seq(this.t('for'), this.sep(Sep.AFTER_FOR_FOR), this.paren(seq(init ? seq(this.sep(Sep.BEFORE_FOR_INIT), init, this.sep(Sep.AFTER_FOR_INIT)) : this.sep(Sep.EMPTY_FOR_INIT), this.t(';'), test ? seq(this.sep(Sep.BEFORE_FOR_TEST), test, this.sep(Sep.AFTER_FOR_TEST)) : this.sep(Sep.EMPTY_FOR_TEST), this.t(';'), update ? seq(this.sep(Sep.BEFORE_FOR_UPDATE), update, this.sep(Sep.AFTER_FOR_UPDATE)) : this.sep(Sep.EMPTY_FOR_UPDATE))), this.sep(Sep.BEFORE_FOR_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))), {
        endsWithMissingElse: body.endsWithMissingElse
      });
    }
  }, {
    key: 'reduceForAwaitStatement',
    value: function reduceForAwaitStatement(node, _ref35) {
      var left = _ref35.left,
          right = _ref35.right,
          body = _ref35.body;

      left = node.left.type === 'VariableDeclaration' ? noIn(markContainsIn(left)) : left;
      return (0, _objectAssign2.default)(seq(this.t('for'), this.sep(Sep.AFTER_FOROF_FOR), this.t('await'), this.sep(Sep.AFTER_FORAWAIT_AWAIT), this.paren(seq(left.startsWithLet ? this.paren(left, Sep.FOR_OF_LET_PAREN_BEFORE, Sep.FOR_OF_LET_PAREN_AFTER) : left, this.sep(Sep.BEFORE_FOROF_OF), this.t('of'), this.sep(Sep.AFTER_FOROF_FOR), this.p(node.right, _coderep.Precedence.Assignment, right)), Sep.FOR_OF_PAREN_BEFORE, Sep.FOR_OF_PAREN_AFTER), this.sep(Sep.BEFORE_FOROF_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }, {
    key: 'reduceFunctionBody',
    value: function reduceFunctionBody(node, _ref36) {
      var directives = _ref36.directives,
          statements = _ref36.statements;

      if (statements.length) {
        statements[0] = this.parenToAvoidBeingDirective(node.statements[0], statements[0]);
      }
      return seq.apply(undefined, _toConsumableArray$1(directives).concat([directives.length ? this.sep(Sep.AFTER_FUNCTION_DIRECTIVES) : empty()], _toConsumableArray$1(statements)));
    }
  }, {
    key: 'reduceFunctionDeclaration',
    value: function reduceFunctionDeclaration(node, _ref37) {
      var name = _ref37.name,
          params = _ref37.params,
          body = _ref37.body;

      return seq(node.isAsync ? this.t('async') : empty(), this.t('function'), node.isGenerator ? seq(this.sep(Sep.BEFORE_GENERATOR_STAR), this.t('*'), this.sep(Sep.AFTER_GENERATOR_STAR)) : empty(), this.sep(Sep.BEFORE_FUNCTION_NAME(node)), node.name.name === '*default*' ? empty() : name, this.sep(Sep.BEFORE_FUNCTION_PARAMS), this.paren(params, Sep.PARAMETERS_PAREN_BEFORE, Sep.PARAMETERS_PAREN_AFTER, Sep.PARAMETERS_PAREN_EMPTY), this.sep(Sep.BEFORE_FUNCTION_DECLARATION_BODY), this.brace(body, node, Sep.FUNCTION_BRACE_INITIAL, Sep.FUNCTION_BRACE_FINAL, Sep.FUNCTION_EMPTY), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceFunctionExpression',
    value: function reduceFunctionExpression(node, _ref38) {
      var name = _ref38.name,
          params = _ref38.params,
          body = _ref38.body;

      var state = seq(node.isAsync ? this.t('async') : empty(), this.t('function'), node.isGenerator ? seq(this.sep(Sep.BEFORE_GENERATOR_STAR), this.t('*'), this.sep(Sep.AFTER_GENERATOR_STAR)) : empty(), this.sep(Sep.BEFORE_FUNCTION_NAME(node)), name ? name : empty(), this.sep(Sep.BEFORE_FUNCTION_PARAMS), this.paren(params, Sep.PARAMETERS_PAREN_BEFORE, Sep.PARAMETERS_PAREN_AFTER, Sep.PARAMETERS_PAREN_EMPTY), this.sep(Sep.BEFORE_FUNCTION_EXPRESSION_BODY), this.brace(body, node, Sep.FUNCTION_EXPRESSION_BRACE_INITIAL, Sep.FUNCTION_EXPRESSION_BRACE_FINAL, Sep.FUNCTION_EXPRESSION_EMPTY));
      state.startsWithFunctionOrClass = true;
      return state;
    }
  }, {
    key: 'reduceFormalParameters',
    value: function reduceFormalParameters(node, _ref39) {
      var items = _ref39.items,
          rest = _ref39.rest;

      return this.commaSep(items.concat(rest == null ? [] : [seq(this.t('...'), this.sep(Sep.REST), rest)]), Sep.PARAMETER_BEFORE_COMMA, Sep.PARAMETER_AFTER_COMMA);
    }
  }, {
    key: 'reduceArrowExpression',
    value: function reduceArrowExpression(node, _ref40) {
      var params = _ref40.params,
          body = _ref40.body;

      if (node.params.rest != null || node.params.items.length !== 1 || node.params.items[0].type !== 'BindingIdentifier') {
        params = this.paren(params, Sep.ARROW_PARAMETERS_PAREN_BEFORE, Sep.ARROW_PARAMETERS_PAREN_AFTER, Sep.ARROW_PARAMETERS_PAREN_EMPTY);
      }
      var containsIn = false;
      if (node.body.type === 'FunctionBody') {
        body = this.brace(body, node, Sep.ARROW_BRACE_INITIAL, Sep.ARROW_BRACE_FINAL, Sep.ARROW_BRACE_EMPTY);
      } else if (body.startsWithCurly) {
        body = this.paren(body, Sep.ARROW_BODY_PAREN_BEFORE, Sep.ARROW_BODY_PAREN_AFTER);
      } else if (body.containsIn) {
        containsIn = true;
      }
      return (0, _objectAssign2.default)(seq(node.isAsync ? seq(this.t('async'), this.sep(Sep.BEFORE_ARROW_ASYNC_PARAMS)) : empty(), params, this.sep(Sep.BEFORE_ARROW), this.t('=>'), this.sep(Sep.AFTER_ARROW), this.p(node.body, _coderep.Precedence.Assignment, body)), { containsIn: containsIn });
    }
  }, {
    key: 'reduceGetter',
    value: function reduceGetter(node, _ref41) {
      var name = _ref41.name,
          body = _ref41.body;

      return seq(this.t('get'), this.sep(Sep.AFTER_GET), name, this.sep(Sep.BEFORE_GET_PARAMS), this.paren(empty(), null, null, Sep.GETTER_PARAMS), this.sep(Sep.BEFORE_GET_BODY), this.brace(body, node, Sep.GET_BRACE_INTIAL, Sep.GET_BRACE_FINAL, Sep.GET_BRACE_EMPTY));
    }
  }, {
    key: 'reduceIdentifierExpression',
    value: function reduceIdentifierExpression(node) {
      var a = this.t(node.name);
      if (node.name === 'let') {
        a.startsWithLet = true;
      }
      return a;
    }
  }, {
    key: 'reduceIfStatement',
    value: function reduceIfStatement(node, _ref42) {
      var test = _ref42.test,
          consequent = _ref42.consequent,
          alternate = _ref42.alternate;

      if (alternate && consequent.endsWithMissingElse) {
        consequent = this.brace(consequent, node, Sep.MISSING_ELSE_INTIIAL, Sep.MISSING_ELSE_FINAL, Sep.MISSING_ELSE_EMPTY);
      }
      return (0, _objectAssign2.default)(seq(this.t('if'), this.sep(Sep.AFTER_IF), this.paren(test, Sep.IF_PAREN_BEFORE, Sep.IF_PAREN_AFTER), this.sep(Sep.AFTER_IF_TEST), consequent, alternate ? seq(this.sep(Sep.BEFORE_ELSE), this.t('else'), this.sep(Sep.AFTER_ELSE), alternate) : empty(), this.sep(Sep.AFTER_STATEMENT(node))), { endsWithMissingElse: alternate ? alternate.endsWithMissingElse : true });
    }
  }, {
    key: 'reduceImport',
    value: function reduceImport(node, _ref43) {
      var defaultBinding = _ref43.defaultBinding,
          namedImports = _ref43.namedImports;

      var bindings = [];
      if (defaultBinding != null) {
        bindings.push(defaultBinding);
      }
      if (namedImports.length > 0) {
        bindings.push(this.brace(this.commaSep(namedImports, Sep.NAMED_IMPORT_BEFORE_COMMA, Sep.NAMED_IMPORT_AFTER_COMMA), node, Sep.IMPORT_BRACE_INTIAL, Sep.IMPORT_BRACE_FINAL, Sep.IMPORT_BRACE_EMPTY));
      }
      if (bindings.length === 0) {
        return seq(this.t('import'), this.sep(Sep.BEFORE_IMPORT_MODULE), this.t((0, _coderep.escapeStringLiteral)(node.moduleSpecifier)), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
      }
      return seq(this.t('import'), this.sep(Sep.BEFORE_IMPORT_BINDINGS), this.commaSep(bindings, Sep.IMPORT_BEFORE_COMMA, Sep.IMPORT_AFTER_COMMA), this.sep(Sep.AFTER_IMPORT_BINDINGS), this.t('from'), this.sep(Sep.AFTER_FROM), this.t((0, _coderep.escapeStringLiteral)(node.moduleSpecifier)), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceImportNamespace',
    value: function reduceImportNamespace(node, _ref44) {
      var defaultBinding = _ref44.defaultBinding,
          namespaceBinding = _ref44.namespaceBinding;

      return seq(this.t('import'), this.sep(Sep.BEFORE_IMPORT_NAMESPACE), defaultBinding == null ? empty() : seq(defaultBinding, this.sep(Sep.IMPORT_BEFORE_COMMA), this.t(','), this.sep(Sep.IMPORT_AFTER_COMMA)), this.sep(Sep.BEFORE_IMPORT_STAR), this.t('*'), this.sep(Sep.AFTER_IMPORT_STAR), this.t('as'), this.sep(Sep.AFTER_IMPORT_AS), namespaceBinding, this.sep(Sep.AFTER_NAMESPACE_BINDING), this.t('from'), this.sep(Sep.AFTER_FROM), this.t((0, _coderep.escapeStringLiteral)(node.moduleSpecifier)), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceImportSpecifier',
    value: function reduceImportSpecifier(node, _ref45) {
      var binding = _ref45.binding;

      if (node.name == null) return binding;
      return seq(this.t(node.name), this.sep(Sep.BEFORE_IMPORT_AS), this.t('as'), this.sep(Sep.AFTER_IMPORT_AS), binding);
    }
  }, {
    key: 'reduceExportAllFrom',
    value: function reduceExportAllFrom(node) {
      return seq(this.t('export'), this.sep(Sep.BEFORE_EXPORT_STAR), this.t('*'), this.sep(Sep.AFTER_EXPORT_STAR), this.t('from'), this.sep(Sep.AFTER_FROM), this.t((0, _coderep.escapeStringLiteral)(node.moduleSpecifier)), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceExportFrom',
    value: function reduceExportFrom(node, _ref46) {
      var namedExports = _ref46.namedExports;

      return seq(this.t('export'), this.sep(Sep.BEFORE_EXPORT_BINDINGS), this.brace(this.commaSep(namedExports, Sep.EXPORTS_BEFORE_COMMA, Sep.EXPORTS_AFTER_COMMA), node, Sep.EXPORT_BRACE_INITIAL, Sep.EXPORT_BRACE_FINAL, Sep.EXPORT_BRACE_EMPTY), this.sep(Sep.AFTER_EXPORT_FROM_BINDINGS), this.t('from'), this.sep(Sep.AFTER_FROM), this.t((0, _coderep.escapeStringLiteral)(node.moduleSpecifier)), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceExportLocals',
    value: function reduceExportLocals(node, _ref47) {
      var namedExports = _ref47.namedExports;

      return seq(this.t('export'), this.sep(Sep.BEFORE_EXPORT_BINDINGS), this.brace(this.commaSep(namedExports, Sep.EXPORTS_BEFORE_COMMA, Sep.EXPORTS_AFTER_COMMA), node, Sep.EXPORT_BRACE_INITIAL, Sep.EXPORT_BRACE_FINAL, Sep.EXPORT_BRACE_EMPTY), this.sep(Sep.AFTER_EXPORT_LOCAL_BINDINGS), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceExport',
    value: function reduceExport(node, _ref48) {
      var declaration = _ref48.declaration;

      switch (node.declaration.type) {
        case 'FunctionDeclaration':
        case 'ClassDeclaration':
          break;
        default:
          declaration = seq(declaration, this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
      }
      return seq(this.t('export'), this.sep(Sep.AFTER_EXPORT), declaration);
    }
  }, {
    key: 'reduceExportDefault',
    value: function reduceExportDefault(node, _ref49) {
      var body = _ref49.body;

      body = body.startsWithFunctionOrClass ? this.paren(body, Sep.EXPORT_PAREN_BEFORE, Sep.EXPORT_PAREN_AFTER) : body;
      switch (node.body.type) {
        case 'FunctionDeclaration':
        case 'ClassDeclaration':
          return seq(this.t('export'), this.sep(Sep.EXPORT_DEFAULT), this.t('default'), this.sep(Sep.AFTER_EXPORT_DEFAULT), body);
        default:
          return seq(this.t('export'), this.sep(Sep.EXPORT_DEFAULT), this.t('default'), this.sep(Sep.AFTER_EXPORT_DEFAULT), this.p(node.body, _coderep.Precedence.Assignment, body), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
      }
    }
  }, {
    key: 'reduceExportFromSpecifier',
    value: function reduceExportFromSpecifier(node) {
      if (node.exportedName == null) return this.t(node.name);
      return seq(this.t(node.name), this.sep(Sep.BEFORE_EXPORT_AS), this.t('as'), this.sep(Sep.AFTER_EXPORT_AS), this.t(node.exportedName));
    }
  }, {
    key: 'reduceExportLocalSpecifier',
    value: function reduceExportLocalSpecifier(node, _ref50) {
      var name = _ref50.name;

      if (node.exportedName == null) return name;
      return seq(name, this.sep(Sep.BEFORE_EXPORT_AS), this.t('as'), this.sep(Sep.AFTER_EXPORT_AS), this.t(node.exportedName));
    }
  }, {
    key: 'reduceLabeledStatement',
    value: function reduceLabeledStatement(node, _ref51) {
      var body = _ref51.body;

      return (0, _objectAssign2.default)(seq(this.t(node.label), this.sep(Sep.BEFORE_LABEL_COLON), this.t(':'), this.sep(Sep.AFTER_LABEL_COLON), body), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }, {
    key: 'reduceLiteralBooleanExpression',
    value: function reduceLiteralBooleanExpression(node) {
      return this.t(node.value.toString());
    }
  }, {
    key: 'reduceLiteralNullExpression',
    value: function reduceLiteralNullExpression() /* node */{
      return this.t('null');
    }
  }, {
    key: 'reduceLiteralInfinityExpression',
    value: function reduceLiteralInfinityExpression() /* node */{
      return this.t('2e308');
    }
  }, {
    key: 'reduceLiteralNumericExpression',
    value: function reduceLiteralNumericExpression(node) {
      return new _coderep.NumberCodeRep(node.value);
    }
  }, {
    key: 'reduceLiteralRegExpExpression',
    value: function reduceLiteralRegExpExpression(node) {
      return this.t('/' + node.pattern + '/' + (node.global ? 'g' : '') + (node.ignoreCase ? 'i' : '') + (node.multiLine ? 'm' : '') + (node.dotAll ? 's' : '') + (node.unicode ? 'u' : '') + (node.sticky ? 'y' : ''), true);
    }
  }, {
    key: 'reduceLiteralStringExpression',
    value: function reduceLiteralStringExpression(node) {
      return this.t((0, _coderep.escapeStringLiteral)(node.value));
    }
  }, {
    key: 'reduceMethod',
    value: function reduceMethod(node, _ref52) {
      var name = _ref52.name,
          params = _ref52.params,
          body = _ref52.body;

      return seq(node.isAsync ? seq(this.t('async'), this.sep(Sep.AFTER_METHOD_ASYNC)) : empty(), node.isGenerator ? seq(this.t('*'), this.sep(Sep.AFTER_METHOD_GENERATOR_STAR)) : empty(), name, this.sep(Sep.AFTER_METHOD_NAME), this.paren(params, Sep.PARAMETERS_PAREN_BEFORE, Sep.PARAMETERS_PAREN_AFTER, Sep.PARAMETERS_PAREN_EMPTY), this.sep(Sep.BEFORE_METHOD_BODY), this.brace(body, node, Sep.METHOD_BRACE_INTIAL, Sep.METHOD_BRACE_FINAL, Sep.METHOD_BRACE_EMPTY));
    }
  }, {
    key: 'reduceModule',
    value: function reduceModule(node, _ref53) {
      var directives = _ref53.directives,
          items = _ref53.items;

      if (items.length) {
        items[0] = this.parenToAvoidBeingDirective(node.items[0], items[0]);
      }
      return seq.apply(undefined, _toConsumableArray$1(directives).concat([directives.length ? this.sep(Sep.AFTER_MODULE_DIRECTIVES) : empty()], _toConsumableArray$1(items)));
    }
  }, {
    key: 'reduceNewExpression',
    value: function reduceNewExpression(node, _ref54) {
      var _this7 = this;

      var callee = _ref54.callee,
          args = _ref54.arguments;

      var parenthizedArgs = args.map(function (a, i) {
        return _this7.p(node.arguments[i], _coderep.Precedence.Assignment, a);
      });
      var calleeRep = (0, _coderep.getPrecedence)(node.callee) === _coderep.Precedence.Call ? this.paren(callee, Sep.NEW_CALLEE_PAREN_BEFORE, Sep.NEW_CALLEE_PAREN_AFTER) : this.p(node.callee, (0, _coderep.getPrecedence)(node), callee);
      return seq(this.t('new'), this.sep(Sep.AFTER_NEW), calleeRep, args.length === 0 ? this.sep(Sep.EMPTY_NEW_CALL) : seq(this.sep(Sep.BEFORE_NEW_ARGS), this.paren(this.commaSep(parenthizedArgs, Sep.ARGS_BEFORE_COMMA, Sep.ARGS_AFTER_COMMA), Sep.NEW_PAREN_BEFORE, Sep.NEW_PAREN_AFTER, Sep.NEW_PAREN_EMPTY)));
    }
  }, {
    key: 'reduceNewTargetExpression',
    value: function reduceNewTargetExpression() {
      return seq(this.t('new'), this.sep(Sep.NEW_TARGET_BEFORE_DOT), this.t('.'), this.sep(Sep.NEW_TARGET_AFTER_DOT), this.t('target'));
    }
  }, {
    key: 'reduceObjectExpression',
    value: function reduceObjectExpression(node, _ref55) {
      var properties = _ref55.properties;

      var state = this.brace(this.commaSep(properties, Sep.OBJECT_BEFORE_COMMA, Sep.OBJECT_AFTER_COMMA), node, Sep.OBJECT_BRACE_INITIAL, Sep.OBJECT_BRACE_FINAL, Sep.OBJECT_EMPTY);
      state.startsWithCurly = true;
      return state;
    }
  }, {
    key: 'reduceUpdateExpression',
    value: function reduceUpdateExpression(node, _ref56) {
      var operand = _ref56.operand;

      if (node.isPrefix) {
        return this.reduceUnaryExpression.apply(this, arguments);
      }
      return (0, _objectAssign2.default)(seq(this.p(node.operand, _coderep.Precedence.New, operand), this.sep(Sep.BEFORE_POSTFIX(node.operator)), this.t(node.operator)), {
        startsWithCurly: operand.startsWithCurly,
        startsWithLetSquareBracket: operand.startsWithLetSquareBracket,
        startsWithFunctionOrClass: operand.startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceUnaryExpression',
    value: function reduceUnaryExpression(node, _ref57) {
      var operand = _ref57.operand;

      return seq(this.t(node.operator), this.sep(Sep.UNARY(node.operator)), this.p(node.operand, (0, _coderep.getPrecedence)(node), operand));
    }
  }, {
    key: 'reduceReturnStatement',
    value: function reduceReturnStatement(node, _ref58) {
      var expression = _ref58.expression;

      return seq(this.t('return'), expression ? seq(this.sep(Sep.RETURN), expression) : empty(), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceScript',
    value: function reduceScript(node, _ref59) {
      var directives = _ref59.directives,
          statements = _ref59.statements;

      if (statements.length) {
        statements[0] = this.parenToAvoidBeingDirective(node.statements[0], statements[0]);
      }
      return seq.apply(undefined, _toConsumableArray$1(directives).concat([directives.length ? this.sep(Sep.AFTER_SCRIPT_DIRECTIVES) : empty()], _toConsumableArray$1(statements)));
    }
  }, {
    key: 'reduceSetter',
    value: function reduceSetter(node, _ref60) {
      var name = _ref60.name,
          param = _ref60.param,
          body = _ref60.body;

      return seq(this.t('set'), this.sep(Sep.AFTER_SET), name, this.sep(Sep.BEFORE_SET_PARAMS), this.paren(param, Sep.SETTER_PARAM_BEFORE, Sep.SETTER_PARAM_AFTER), this.sep(Sep.BEFORE_SET_BODY), this.brace(body, node, Sep.SET_BRACE_INTIIAL, Sep.SET_BRACE_FINAL, Sep.SET_BRACE_EMPTY));
    }
  }, {
    key: 'reduceShorthandProperty',
    value: function reduceShorthandProperty(node, _ref61) {
      var name = _ref61.name;

      return name;
    }
  }, {
    key: 'reduceStaticMemberAssignmentTarget',
    value: function reduceStaticMemberAssignmentTarget(node, _ref62) {
      var object = _ref62.object;

      var state = seq(this.p(node.object, (0, _coderep.getPrecedence)(node), object), this.sep(Sep.BEFORE_STATIC_MEMBER_ASSIGNMENT_TARGET_DOT), this.t('.'), this.sep(Sep.AFTER_STATIC_MEMBER_ASSIGNMENT_TARGET_DOT), this.t(node.property));
      state.startsWithLet = object.startsWithLet;
      state.startsWithCurly = object.startsWithCurly;
      state.startsWithLetSquareBracket = object.startsWithLetSquareBracket;
      state.startsWithFunctionOrClass = object.startsWithFunctionOrClass;
      return state;
    }
  }, {
    key: 'reduceStaticMemberExpression',
    value: function reduceStaticMemberExpression(node, _ref63) {
      var object = _ref63.object;

      var state = seq(this.p(node.object, (0, _coderep.getPrecedence)(node), object), this.sep(Sep.BEFORE_STATIC_MEMBER_DOT), this.t('.'), this.sep(Sep.AFTER_STATIC_MEMBER_DOT), this.t(node.property));
      state.startsWithLet = object.startsWithLet;
      state.startsWithCurly = object.startsWithCurly;
      state.startsWithLetSquareBracket = object.startsWithLetSquareBracket;
      state.startsWithFunctionOrClass = object.startsWithFunctionOrClass;
      return state;
    }
  }, {
    key: 'reduceStaticPropertyName',
    value: function reduceStaticPropertyName(node) {
      if (_esutils.keyword.isIdentifierNameES6(node.value)) {
        return this.t(node.value);
      }
      var n = parseFloat(node.value);
      if (n >= 0 && n.toString() === node.value) {
        return new _coderep.NumberCodeRep(n);
      }
      return this.t((0, _coderep.escapeStringLiteral)(node.value));
    }
  }, {
    key: 'reduceSuper',
    value: function reduceSuper() {
      return this.t('super');
    }
  }, {
    key: 'reduceSwitchCase',
    value: function reduceSwitchCase(node, _ref64) {
      var test = _ref64.test,
          consequent = _ref64.consequent;

      return seq(this.t('case'), this.sep(Sep.BEFORE_CASE_TEST), test, this.sep(Sep.AFTER_CASE_TEST), this.t(':'), this.sep(Sep.BEFORE_CASE_BODY), seq.apply(undefined, _toConsumableArray$1(consequent)), this.sep(Sep.AFTER_CASE_BODY));
    }
  }, {
    key: 'reduceSwitchDefault',
    value: function reduceSwitchDefault(node, _ref65) {
      var consequent = _ref65.consequent;

      return seq(this.t('default'), this.sep(Sep.DEFAULT), this.t(':'), this.sep(Sep.BEFORE_CASE_BODY), seq.apply(undefined, _toConsumableArray$1(consequent)), this.sep(Sep.AFTER_DEFAULT_BODY));
    }
  }, {
    key: 'reduceSwitchStatement',
    value: function reduceSwitchStatement(node, _ref66) {
      var discriminant = _ref66.discriminant,
          cases = _ref66.cases;

      return seq(this.t('switch'), this.sep(Sep.BEFORE_SWITCH_DISCRIM), this.paren(discriminant, Sep.SWITCH_DISCRIM_PAREN_BEFORE, Sep.SWITCH_DISCRIM_PAREN_AFTER), this.sep(Sep.BEFORE_SWITCH_BODY), this.brace(seq.apply(undefined, _toConsumableArray$1(cases)), node, Sep.SWITCH_BRACE_INTIAL, Sep.SWITCH_BRACE_FINAL, Sep.SWITCH_BRACE_EMPTY), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceSwitchStatementWithDefault',
    value: function reduceSwitchStatementWithDefault(node, _ref67) {
      var discriminant = _ref67.discriminant,
          preDefaultCases = _ref67.preDefaultCases,
          defaultCase = _ref67.defaultCase,
          postDefaultCases = _ref67.postDefaultCases;

      return seq(this.t('switch'), this.sep(Sep.BEFORE_SWITCH_DISCRIM), this.paren(discriminant, Sep.SWITCH_DISCRIM_PAREN_BEFORE, Sep.SWITCH_DISCRIM_PAREN_AFTER), this.sep(Sep.BEFORE_SWITCH_BODY), this.brace(seq.apply(undefined, _toConsumableArray$1(preDefaultCases).concat([defaultCase], _toConsumableArray$1(postDefaultCases))), node, Sep.SWITCH_BRACE_INTIAL, Sep.SWITCH_BRACE_FINAL, Sep.SWITCH_BRACE_EMPTY), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceTemplateExpression',
    value: function reduceTemplateExpression(node, _ref68) {
      var tag = _ref68.tag,
          elements = _ref68.elements;

      var state = node.tag == null ? empty() : seq(this.p(node.tag, (0, _coderep.getPrecedence)(node), tag), this.sep(Sep.TEMPLATE_TAG));
      state = seq(state, this.t('`'));
      for (var _i = 0, l = node.elements.length; _i < l; ++_i) {
        if (node.elements[_i].type === 'TemplateElement') {
          var d = '';
          if (_i > 0) d += '}';
          d += node.elements[_i].rawValue;
          if (_i < l - 1) d += '${';
          state = seq(state, this.t(d));
        } else {
          state = seq(state, this.sep(Sep.BEFORE_TEMPLATE_EXPRESSION), elements[_i], this.sep(Sep.AFTER_TEMPLATE_EXPRESSION));
        }
      }
      state = seq(state, this.t('`'));
      if (node.tag != null) {
        state.startsWithCurly = tag.startsWithCurly;
        state.startsWithLet = tag.startsWithLet;
        state.startsWithLetSquareBracket = tag.startsWithLetSquareBracket;
        state.startsWithFunctionOrClass = tag.startsWithFunctionOrClass;
      }
      return state;
    }
  }, {
    key: 'reduceTemplateElement',
    value: function reduceTemplateElement(node) {
      return this.t(node.rawValue);
    }
  }, {
    key: 'reduceThisExpression',
    value: function reduceThisExpression() /* node */{
      return this.t('this');
    }
  }, {
    key: 'reduceThrowStatement',
    value: function reduceThrowStatement(node, _ref69) {
      var expression = _ref69.expression;

      return seq(this.t('throw'), this.sep(Sep.THROW), expression, this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceTryCatchStatement',
    value: function reduceTryCatchStatement(node, _ref70) {
      var body = _ref70.body,
          catchClause = _ref70.catchClause;

      return seq(this.t('try'), this.sep(Sep.AFTER_TRY), body, this.sep(Sep.BEFORE_CATCH), catchClause, this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceTryFinallyStatement',
    value: function reduceTryFinallyStatement(node, _ref71) {
      var body = _ref71.body,
          catchClause = _ref71.catchClause,
          finalizer = _ref71.finalizer;

      return seq(this.t('try'), this.sep(Sep.AFTER_TRY), body, catchClause ? seq(this.sep(Sep.BEFORE_CATCH), catchClause) : empty(), this.sep(Sep.BEFORE_FINALLY), this.t('finally'), this.sep(Sep.AFTER_FINALLY), finalizer, this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceYieldExpression',
    value: function reduceYieldExpression(node, _ref72) {
      var expression = _ref72.expression;

      if (node.expression == null) return this.t('yield');
      return (0, _objectAssign2.default)(seq(this.t('yield'), this.sep(Sep.YIELD), this.p(node.expression, (0, _coderep.getPrecedence)(node), expression)), { containsIn: expression.containsIn });
    }
  }, {
    key: 'reduceYieldGeneratorExpression',
    value: function reduceYieldGeneratorExpression(node, _ref73) {
      var expression = _ref73.expression;

      return (0, _objectAssign2.default)(seq(this.t('yield'), this.sep(Sep.BEFORE_YIELD_STAR), this.t('*'), this.sep(Sep.AFTER_YIELD_STAR), this.p(node.expression, (0, _coderep.getPrecedence)(node), expression)), { containsIn: expression.containsIn });
    }
  }, {
    key: 'reduceDirective',
    value: function reduceDirective(node) {
      var delim = node.rawValue.match(/(^|[^\\])(\\\\)*"/) ? '\'' : '"';
      return seq(this.t(delim + node.rawValue + delim), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceVariableDeclaration',
    value: function reduceVariableDeclaration(node, _ref74) {
      var declarators = _ref74.declarators;

      return seq(this.t(node.kind), this.sep(Sep.VARIABLE_DECLARATION), this.commaSep(declarators, Sep.DECLARATORS_BEFORE_COMMA, Sep.DECLARATORS_AFTER_COMMA));
    }
  }, {
    key: 'reduceVariableDeclarationStatement',
    value: function reduceVariableDeclarationStatement(node, _ref75) {
      var declaration = _ref75.declaration;

      return seq(declaration, this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceVariableDeclarator',
    value: function reduceVariableDeclarator(node, _ref76) {
      var binding = _ref76.binding,
          init = _ref76.init;

      var containsIn = init && init.containsIn && !init.containsGroup;
      if (init) {
        if (init.containsGroup) {
          init = this.paren(init, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER);
        } else {
          init = markContainsIn(init);
        }
      }
      return (0, _objectAssign2.default)(init == null ? binding : seq(binding, this.sep(Sep.BEFORE_INIT_EQUALS), this.t('='), this.sep(Sep.AFTER_INIT_EQUALS), init), { containsIn: containsIn });
    }
  }, {
    key: 'reduceWhileStatement',
    value: function reduceWhileStatement(node, _ref77) {
      var test = _ref77.test,
          body = _ref77.body;

      return (0, _objectAssign2.default)(seq(this.t('while'), this.sep(Sep.AFTER_WHILE), this.paren(test, Sep.WHILE_TEST_PAREN_BEFORE, Sep.WHILE_TEST_PAREN_AFTER), this.sep(Sep.BEFORE_WHILE_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }, {
    key: 'reduceWithStatement',
    value: function reduceWithStatement(node, _ref78) {
      var object = _ref78.object,
          body = _ref78.body;

      return (0, _objectAssign2.default)(seq(this.t('with'), this.sep(Sep.AFTER_WITH), this.paren(object, Sep.WITH_PAREN_BEFORE, Sep.WITH_PAREN_AFTER), this.sep(Sep.BEFORE_WITH_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }]);

  return ExtensibleCodeGen;
}();

function withoutTrailingLinebreak(state) {
  if (state && state instanceof _coderep.Seq) {
    var lastChild = state.children[state.children.length - 1];
    /* istanbul ignore next */
    while (lastChild instanceof _coderep.Empty) {
      state.children.pop();
      lastChild = state.children[state.children.length - 1];
    }
    /* istanbul ignore else */
    if (lastChild instanceof _coderep.Seq) {
      withoutTrailingLinebreak(lastChild);
    } else if (lastChild instanceof Linebreak) {
      state.children.pop();
    }
  }
  return state;
}

function indent(rep, includingFinal) {
  var finalLinebreak = void 0;
  function indentNode(node) {
    if (node instanceof Linebreak) {
      finalLinebreak = node;
      ++node.indentation;
    }
  }
  rep.forEach(indentNode);
  if (!includingFinal) {
    --finalLinebreak.indentation;
  }
  return rep;
}

formattedCodegen.FormattedCodeGen = function (_ExtensibleCodeGen) {
  _inherits$1(FormattedCodeGen, _ExtensibleCodeGen);

  function FormattedCodeGen() {
    _classCallCheck$2(this, FormattedCodeGen);

    return _possibleConstructorReturn$1(this, (FormattedCodeGen.__proto__ || Object.getPrototypeOf(FormattedCodeGen)).apply(this, arguments));
  }

  _createClass$2(FormattedCodeGen, [{
    key: 'parenToAvoidBeingDirective',
    value: function parenToAvoidBeingDirective(element, original) {
      if (element && element.type === 'ExpressionStatement' && element.expression.type === 'LiteralStringExpression') {
        return seq(this.paren(original.children[0], Sep.PAREN_AVOIDING_DIRECTIVE_BEFORE, Sep.PAREN_AVOIDING_DIRECTIVE_AFTER), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(element)));
      }
      return original;
    }
  }, {
    key: 'brace',
    value: function brace(rep, node) {
      if (isEmpty(rep)) {
        return this.t('{}');
      }

      switch (node.type) {
        case 'ObjectAssignmentTarget':
        case 'ObjectBinding':
        case 'Import':
        case 'ExportFrom':
        case 'ExportLocals':
        case 'ObjectExpression':
          return new _coderep.Brace(rep);
      }

      rep = seq(new Linebreak(), rep);
      indent(rep, false);
      return new _coderep.Brace(rep);
    }
  }, {
    key: 'reduceDoWhileStatement',
    value: function reduceDoWhileStatement(node, _ref79) {
      var body = _ref79.body,
          test = _ref79.test;

      return seq(this.t('do'), this.sep(Sep.AFTER_DO), withoutTrailingLinebreak(body), this.sep(Sep.BEFORE_DOWHILE_WHILE), this.t('while'), this.sep(Sep.AFTER_DOWHILE_WHILE), this.paren(test, Sep.DO_WHILE_TEST_PAREN_BEFORE, Sep.DO_WHILE_TEST_PAREN_AFTER), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));
    }
  }, {
    key: 'reduceIfStatement',
    value: function reduceIfStatement(node, _ref80) {
      var test = _ref80.test,
          consequent = _ref80.consequent,
          alternate = _ref80.alternate;

      if (alternate && consequent.endsWithMissingElse) {
        consequent = this.brace(consequent, node);
      }
      return (0, _objectAssign2.default)(seq(this.t('if'), this.sep(Sep.AFTER_IF), this.paren(test, Sep.IF_PAREN_BEFORE, Sep.IF_PAREN_AFTER), this.sep(Sep.AFTER_IF_TEST), withoutTrailingLinebreak(consequent), alternate ? seq(this.sep(Sep.BEFORE_ELSE), this.t('else'), this.sep(Sep.AFTER_ELSE), withoutTrailingLinebreak(alternate)) : empty(), this.sep(Sep.AFTER_STATEMENT(node))), { endsWithMissingElse: alternate ? alternate.endsWithMissingElse : true });
    }
  }, {
    key: 'reduceSwitchCase',
    value: function reduceSwitchCase(node, _ref81) {
      var test = _ref81.test,
          consequent = _ref81.consequent;

      consequent = indent(withoutTrailingLinebreak(seq.apply(undefined, [this.sep(Sep.BEFORE_CASE_BODY)].concat(_toConsumableArray$1(consequent)))), true);
      return seq(this.t('case'), this.sep(Sep.BEFORE_CASE_TEST), test, this.sep(Sep.AFTER_CASE_TEST), this.t(':'), consequent, this.sep(Sep.AFTER_CASE_BODY));
    }
  }, {
    key: 'reduceSwitchDefault',
    value: function reduceSwitchDefault(node, _ref82) {
      var consequent = _ref82.consequent;

      consequent = indent(withoutTrailingLinebreak(seq.apply(undefined, [this.sep(Sep.BEFORE_CASE_BODY)].concat(_toConsumableArray$1(consequent)))), true);
      return seq(this.t('default'), this.sep(Sep.DEFAULT), this.t(':'), consequent, this.sep(Sep.AFTER_DEFAULT_BODY));
    }
  }, {
    key: 'sep',
    value: function sep(separator) {
      switch (separator.type) {
        case 'AWAIT':
        case 'AFTER_FORAWAIT_AWAIT':
        case 'ARRAY_AFTER_COMMA':
        case 'OBJECT_AFTER_COMMA':
        case 'ARGS_AFTER_COMMA':
        case 'PARAMETER_AFTER_COMMA':
        case 'DECLARATORS_AFTER_COMMA':
        case 'NAMED_IMPORT_AFTER_COMMA':
        case 'IMPORT_AFTER_COMMA':
        case 'BEFORE_DEFAULT_EQUALS':
        case 'AFTER_DEFAULT_EQUALS':
        case 'AFTER_PROP':
        case 'BEFORE_JUMP_LABEL':
        case 'BEFORE_CATCH_BINDING':
        case 'AFTER_CATCH_BINDING':
        case 'BEFORE_CLASS_NAME':
        case 'BEFORE_EXTENDS':
        case 'AFTER_EXTENDS':
        case 'BEFORE_CLASS_DECLARATION_ELEMENTS':
        case 'BEFORE_CLASS_EXPRESSION_ELEMENTS':
        case 'AFTER_STATIC':
        case 'BEFORE_TERNARY_QUESTION':
        case 'AFTER_TERNARY_QUESTION':
        case 'BEFORE_TERNARY_COLON':
        case 'AFTER_TERNARY_COLON':
        case 'AFTER_DO':
        case 'BEFORE_DOWHILE_WHILE':
        case 'AFTER_DOWHILE_WHILE':
        case 'AFTER_FORIN_FOR':
        case 'BEFORE_FORIN_IN':
        case 'BEFORE_FORIN_BODY':
        case 'BEFORE_FOROF_OF':
        case 'AFTER_FOROF_FOR':
        case 'BEFORE_FOROF_BODY':
        case 'AFTER_FOR_FOR':
        case 'BEFORE_FOR_TEST':
        case 'BEFORE_FOR_UPDATE':
        case 'BEFORE_FOR_BODY':
        case 'BEFORE_FUNCTION_DECLARATION_BODY':
        case 'BEFORE_FUNCTION_EXPRESSION_BODY':
        case 'BEFORE_ARROW':
        case 'AFTER_ARROW':
        case 'BEFORE_ARROW_ASYNC_PARAMS':
        case 'AFTER_GET':
        case 'BEFORE_GET_BODY':
        case 'AFTER_IF':
        case 'AFTER_IF_TEST':
        case 'BEFORE_ELSE':
        case 'AFTER_ELSE':
        case 'BEFORE_IMPORT_BINDINGS':
        case 'BEFORE_IMPORT_MODULE':
        case 'AFTER_IMPORT_BINDINGS':
        case 'AFTER_FROM':
        case 'BEFORE_IMPORT_NAMESPACE':
        case 'BEFORE_IMPORT_STAR':
        case 'AFTER_IMPORT_STAR':
        case 'AFTER_NAMESPACE_BINDING':
        case 'BEFORE_IMPORT_AS':
        case 'AFTER_IMPORT_AS':
        case 'EXPORTS_AFTER_COMMA':
        case 'BEFORE_EXPORT_STAR':
        case 'AFTER_EXPORT_STAR':
        case 'BEFORE_EXPORT_BINDINGS':
        case 'AFTER_EXPORT_FROM_BINDINGS':
        case 'AFTER_EXPORT':
        case 'AFTER_EXPORT_DEFAULT':
        case 'BEFORE_EXPORT_AS':
        case 'AFTER_EXPORT_AS':
        case 'AFTER_LABEL_COLON':
        case 'AFTER_METHOD_ASYNC':
        case 'BEFORE_METHOD_BODY':
        case 'AFTER_NEW':
        case 'RETURN':
        case 'AFTER_SET':
        case 'BEFORE_SET_BODY':
        case 'BEFORE_SET_PARAMS':
        case 'BEFORE_CASE_TEST':
        case 'BEFORE_SWITCH_DISCRIM':
        case 'BEFORE_SWITCH_BODY':
        case 'THROW':
        case 'AFTER_TRY':
        case 'BEFORE_CATCH':
        case 'BEFORE_FINALLY':
        case 'AFTER_FINALLY':
        case 'VARIABLE_DECLARATION':
        case 'YIELD':
        case 'AFTER_YIELD_STAR':
        case 'BEFORE_INIT_EQUALS':
        case 'AFTER_INIT_EQUALS':
        case 'AFTER_WHILE':
        case 'BEFORE_WHILE_BODY':
        case 'AFTER_WITH':
        case 'BEFORE_WITH_BODY':
        case 'BEFORE_FUNCTION_NAME':
        case 'AFTER_BINOP':
        case 'BEFORE_ASSIGN_OP':
        case 'AFTER_ASSIGN_OP':
          return this.t(' ');
        case 'AFTER_STATEMENT':
          switch (separator.node.type) {
            case 'ForInStatement':
            case 'ForOfStatement':
            case 'ForStatement':
            case 'WhileStatement':
            case 'WithStatement':
              return empty(); // because those already end with an AFTER_STATEMENT
            default:
              return new Linebreak();
          }
        case 'AFTER_CLASS_ELEMENT':
        case 'BEFORE_CASE_BODY':
        case 'AFTER_CASE_BODY':
        case 'AFTER_DEFAULT_BODY':
          return new Linebreak();
        case 'BEFORE_BINOP':
          return separator.op === ',' ? empty() : this.t(' ');
        case 'UNARY':
          return separator.op === 'delete' || separator.op === 'void' || separator.op === 'typeof' ? this.t(' ') : empty();
        default:
          return empty();
      }
    }
  }]);

  return FormattedCodeGen;
}(ExtensibleCodeGen);

var withLocation = {};

var tokenStream = {};

var unicode = {};

Object.defineProperty(unicode, "__esModule", {
  value: true
});
// Generated by scripts/generate-unicode-data.js

unicode.whitespaceArray = [5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279];
unicode.whitespaceBool = [false, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

unicode.idStartLargeRegex = /^[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]$/;
unicode.idStartBool = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false];

unicode.idContinueLargeRegex = /^[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]$/;
unicode.idContinueBool = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false];

Object.defineProperty(tokenStream, "__esModule", {
  value: true
});
tokenStream.TokenStream = undefined;

var _createClass$1 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright 2014 Shape Security, Inc.

icensed under the Apache License, Version 2.0 (the "License")
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


tokenStream.needsDoubleDot = needsDoubleDot;

var _unicode = unicode;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function isIdentifierPartES6(char) {
  var charCode = char.charCodeAt(0);
  if (charCode < 128) {
    return _unicode.idContinueBool[charCode];
  }
  return _unicode.idContinueLargeRegex.test(char);
}

function needsDoubleDot(fragment) {
  return fragment.indexOf('.') < 0 && fragment.indexOf('e') < 0 && fragment.indexOf('x') < 0;
}

function renderNumber(n) {
  var s = void 0;
  if (n >= 1e3 && n % 10 === 0) {
    s = n.toString(10);
    if (/[eE]/.test(s)) {
      return s.replace(/[eE]\+/, 'e');
    }
    return n.toString(10).replace(/0{3,}$/, function (match) {
      return 'e' + match.length;
    });
  } else if (n % 1 === 0) {
    if (n > 1e15 && n < 1e20) {
      return '0x' + n.toString(16).toUpperCase();
    }
    return n.toString(10).replace(/[eE]\+/, 'e');
  }
  return n.toString(10).replace(/^0\./, '.').replace(/[eE]\+/, 'e');
}

tokenStream.TokenStream = function () {
  function TokenStream() {
    _classCallCheck$1(this, TokenStream);

    this.result = '';
    this.lastNumber = null;
    this.lastCodePoint = null;
    this.lastTokenStr = '';
    this.optionalSemi = false;
    this.previousWasRegExp = false;
    this.partialHtmlComment = false;
  }

  _createClass$1(TokenStream, [{
    key: 'putNumber',
    value: function putNumber(number) {
      var tokenStr = renderNumber(number);
      this.put(tokenStr);
      this.lastNumber = tokenStr;
    }
  }, {
    key: 'putOptionalSemi',
    value: function putOptionalSemi() {
      this.optionalSemi = true;
    }
  }, {
    key: 'putRaw',
    value: function putRaw(tokenStr) {
      this.result += tokenStr;
      this.lastTokenStr = tokenStr;
    }
  }, {
    key: 'put',
    value: function put(tokenStr, isRegExp) {
      if (this.optionalSemi) {
        this.optionalSemi = false;
        if (tokenStr !== '}') {
          this.result += ';';
          this.lastCodePoint = ';';
          this.previousWasRegExp = false;
        }
      }
      if (this.lastNumber !== null && tokenStr.length === 1) {
        if (tokenStr === '.') {
          this.result += needsDoubleDot(this.lastNumber) ? '..' : '.';
          this.lastNumber = null;
          this.lastCodePoint = '.';
          return;
        }
      }
      var tokenStrCodePointCount = [].concat(_toConsumableArray(tokenStr)).length; // slow, no unicode length?
      if (tokenStrCodePointCount > 0) {
        this.lastNumber = null;
        var rightCodePoint = String.fromCodePoint(tokenStr.codePointAt(0));
        var lastCodePoint = this.lastCodePoint;
        this.lastCodePoint = String.fromCodePoint(tokenStr.codePointAt(tokenStrCodePointCount - 1));
        var previousWasRegExp = this.previousWasRegExp;
        this.previousWasRegExp = isRegExp;

        if (lastCodePoint && ((lastCodePoint === '+' || lastCodePoint === '-') && lastCodePoint === rightCodePoint || isIdentifierPartES6(lastCodePoint) && isIdentifierPartES6(rightCodePoint) || lastCodePoint === '/' && rightCodePoint === '/' || previousWasRegExp && rightCodePoint === 'i' || this.partialHtmlComment && tokenStr.startsWith('--'))) {
          this.result += ' ';
        }
      }

      this.partialHtmlComment = this.lastTokenStr.endsWith('<') && tokenStr === '!';

      this.result += tokenStr;
      this.lastTokenStr = tokenStr;
    }
  }]);

  return TokenStream;
}();

Object.defineProperty(withLocation, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

withLocation.default = codeGenWithLocation;

var _shiftReducer = dist$5;

var _tokenStream = tokenStream;

var _minimalCodegen = minimalCodegen;

var _minimalCodegen2 = _interopRequireDefault(_minimalCodegen);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function mightHaveSemi(type) {
  return (/(Import)|(Export)|(Statement)|(Directive)|(SwitchCase)|(SwitchDefault)/.test(type)
  );
}

var TokenStreamWithLocation = function (_TokenStream) {
  _inherits(TokenStreamWithLocation, _TokenStream);

  function TokenStreamWithLocation() {
    _classCallCheck(this, TokenStreamWithLocation);

    var _this = _possibleConstructorReturn(this, (TokenStreamWithLocation.__proto__ || Object.getPrototypeOf(TokenStreamWithLocation)).call(this));

    _this.line = 1;
    _this.column = 0;
    _this.startingNodes = [];
    _this.finishingStatements = [];
    _this.lastNumberNode = null;
    _this.locations = new WeakMap();
    return _this;
  }

  _createClass(TokenStreamWithLocation, [{
    key: 'putRaw',
    value: function putRaw(tokenStr) {
      var previousLength = this.result.length;
      _get(TokenStreamWithLocation.prototype.__proto__ || Object.getPrototypeOf(TokenStreamWithLocation.prototype), 'putRaw', this).call(this, tokenStr);
      this.startNodes(tokenStr, previousLength);
    }
  }, {
    key: 'put',
    value: function put(tokenStr, isRegExp) {
      if (this.optionalSemi && tokenStr !== '}') {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.finishingStatements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var obj = _step.value;

            ++obj.end.column;
            ++obj.end.offset;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
      this.finishingStatements = [];

      if (this.lastNumber !== null && tokenStr === '.' && (0, _tokenStream.needsDoubleDot)(this.lastNumber)) {
        var loc = this.locations.get(this.lastNumberNode).end;
        ++loc.column;
        ++loc.offset;
      }
      this.lastNumberNode = null;

      var previousLength = this.result.length;
      _get(TokenStreamWithLocation.prototype.__proto__ || Object.getPrototypeOf(TokenStreamWithLocation.prototype), 'put', this).call(this, tokenStr, isRegExp);
      this.startNodes(tokenStr, previousLength);
    }
  }, {
    key: 'startNodes',
    value: function startNodes(tokenStr, previousLength) {
      var linebreakRegex = /\r\n?|[\n\u2028\u2029]/g;
      var matched = false;
      var match = void 0;
      var startLine = this.line;
      var startColumn = this.column;
      while (match = linebreakRegex.exec(tokenStr)) {
        ++this.line;
        this.column = tokenStr.length - match.index - match[0].length;
        matched = true;
      }

      if (!matched) {
        this.column += this.result.length - previousLength;
        startColumn = this.column - tokenStr.length; // i.e., skip past any additional characters which were necessitated by, but not part of, this part
      }
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.startingNodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var node = _step2.value;

          this.locations.set(node, {
            start: {
              line: startLine,
              column: startColumn,
              offset: this.result.length - tokenStr.length
            },
            end: null
          });
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      this.startingNodes = [];
    }
  }, {
    key: 'startEmit',
    value: function startEmit(node) {
      this.startingNodes.push(node);
    }
  }, {
    key: 'finishEmit',
    value: function finishEmit(node) {
      this.locations.get(node).end = {
        line: this.line,
        column: this.column,
        offset: this.result.length
      };
      if (mightHaveSemi(node.type)) {
        this.finishingStatements.push(this.locations.get(node));
      }
    }
  }]);

  return TokenStreamWithLocation;
}(_tokenStream.TokenStream);

function addLocation(rep, node) {
  var originalEmit = rep.emit.bind(rep);
  if (node.type === 'Script' || node.type === 'Module') {
    // These are handled specially: they include beginning and trailing whitespace.
    rep.emit = function (ts) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      ts.locations.set(node, {
        start: {
          line: 1,
          column: 0,
          offset: 0
        },
        end: null
      });
      originalEmit.apply(undefined, [ts].concat(args));
      ts.locations.get(node).end = {
        line: ts.line,
        column: ts.column,
        offset: ts.result.length
      };
    };
  } else if (node.type === 'LiteralNumericExpression') {
    rep.emit = function (ts) {
      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      ts.startEmit(node);
      originalEmit.apply(undefined, [ts].concat(args));
      ts.finishEmit(node);
      ts.lastNumberNode = node;
    };
  } else {
    rep.emit = function (ts) {
      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      ts.startEmit(node);
      originalEmit.apply(undefined, [ts].concat(args));
      ts.finishEmit(node);
    };
  }
  return rep;
}

function addLocationToReducer(reducer) {
  var wrapped = (0, _shiftReducer.adapt)(addLocation, reducer);

  var originalRegenerate = wrapped.regenerateArrowParams.bind(wrapped);
  wrapped.regenerateArrowParams = function (element, original) {
    var out = originalRegenerate(element, original);
    if (out !== original) {
      addLocation(out, element);
    }
    return out;
  };

  var originalDirective = wrapped.parenToAvoidBeingDirective.bind(wrapped);
  wrapped.parenToAvoidBeingDirective = function (element, original) {
    var out = originalDirective(element, original);
    if (out !== original) {
      addLocation(out, element);
    }
    return out;
  };

  return wrapped;
}

function codeGenWithLocation(program) {
  var generator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _minimalCodegen2.default();

  var ts = new TokenStreamWithLocation();
  var rep = (0, _shiftReducer.reduce)(addLocationToReducer(generator), program);
  rep.emit(ts);
  return { source: ts.result, locations: ts.locations };
}

(function (exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.codeGenWithLocation = exports.SemiOp = exports.CommaSep = exports.Semi = exports.Seq = exports.ContainsIn = exports.NoIn = exports.Brace = exports.Bracket = exports.Paren = exports.NumberCodeRep = exports.Token = exports.Empty = exports.CodeRep = exports.escapeStringLiteral = exports.getPrecedence = exports.Precedence = exports.Sep = exports.FormattedCodeGen = exports.ExtensibleCodeGen = exports.MinimalCodeGen = undefined;
exports.default = codeGen;

var _minimalCodegen = minimalCodegen;

Object.defineProperty(exports, 'MinimalCodeGen', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_minimalCodegen).default;
  }
});

var _formattedCodegen = formattedCodegen;

Object.defineProperty(exports, 'ExtensibleCodeGen', {
  enumerable: true,
  get: function get() {
    return _formattedCodegen.ExtensibleCodeGen;
  }
});
Object.defineProperty(exports, 'FormattedCodeGen', {
  enumerable: true,
  get: function get() {
    return _formattedCodegen.FormattedCodeGen;
  }
});
Object.defineProperty(exports, 'Sep', {
  enumerable: true,
  get: function get() {
    return _formattedCodegen.Sep;
  }
});

var _coderep = coderep;

Object.defineProperty(exports, 'Precedence', {
  enumerable: true,
  get: function get() {
    return _coderep.Precedence;
  }
});
Object.defineProperty(exports, 'getPrecedence', {
  enumerable: true,
  get: function get() {
    return _coderep.getPrecedence;
  }
});
Object.defineProperty(exports, 'escapeStringLiteral', {
  enumerable: true,
  get: function get() {
    return _coderep.escapeStringLiteral;
  }
});
Object.defineProperty(exports, 'CodeRep', {
  enumerable: true,
  get: function get() {
    return _coderep.CodeRep;
  }
});
Object.defineProperty(exports, 'Empty', {
  enumerable: true,
  get: function get() {
    return _coderep.Empty;
  }
});
Object.defineProperty(exports, 'Token', {
  enumerable: true,
  get: function get() {
    return _coderep.Token;
  }
});
Object.defineProperty(exports, 'NumberCodeRep', {
  enumerable: true,
  get: function get() {
    return _coderep.NumberCodeRep;
  }
});
Object.defineProperty(exports, 'Paren', {
  enumerable: true,
  get: function get() {
    return _coderep.Paren;
  }
});
Object.defineProperty(exports, 'Bracket', {
  enumerable: true,
  get: function get() {
    return _coderep.Bracket;
  }
});
Object.defineProperty(exports, 'Brace', {
  enumerable: true,
  get: function get() {
    return _coderep.Brace;
  }
});
Object.defineProperty(exports, 'NoIn', {
  enumerable: true,
  get: function get() {
    return _coderep.NoIn;
  }
});
Object.defineProperty(exports, 'ContainsIn', {
  enumerable: true,
  get: function get() {
    return _coderep.ContainsIn;
  }
});
Object.defineProperty(exports, 'Seq', {
  enumerable: true,
  get: function get() {
    return _coderep.Seq;
  }
});
Object.defineProperty(exports, 'Semi', {
  enumerable: true,
  get: function get() {
    return _coderep.Semi;
  }
});
Object.defineProperty(exports, 'CommaSep', {
  enumerable: true,
  get: function get() {
    return _coderep.CommaSep;
  }
});
Object.defineProperty(exports, 'SemiOp', {
  enumerable: true,
  get: function get() {
    return _coderep.SemiOp;
  }
});

var _withLocation = withLocation;

Object.defineProperty(exports, 'codeGenWithLocation', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_withLocation).default;
  }
});

var _shiftReducer = dist$5;

var _shiftReducer2 = _interopRequireDefault(_shiftReducer);

var _tokenStream = tokenStream;

var _minimalCodegen2 = _interopRequireDefault(_minimalCodegen);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function codeGen(script) {
  var generator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _minimalCodegen2.default();

  var ts = new _tokenStream.TokenStream();
  var rep = (0, _shiftReducer2.default)(generator, script);
  rep.emit(ts);
  return ts.result;
}
}(dist));

var codegen = /*@__PURE__*/getDefaultExportFromCjs(dist);

const rIf = (n, s, r, tr) => (n === null ? null : r(n, s, tr));
const rMapIf = (es, s, r, tr) => es.map(e => rIf(e, s, r, tr));
const rMap = (es, s, r, tr) => es.map(e => r(e, s, tr));
const transformChildren = (node, stack, r, tr) => {
    const newStack = stack.concat(node);
    switch (node.type) {
        case 'ArrayAssignmentTarget':
            return {
                ...node,
                elements: rMapIf(node.elements, newStack, r, tr),
                rest: rIf(node.rest, newStack, r, tr),
            };
        case 'ArrayBinding':
            return {
                ...node,
                elements: rMapIf(node.elements, newStack, r, tr),
                rest: rIf(node.rest, newStack, r, tr),
            };
        case 'ArrayExpression':
            return {
                ...node,
                elements: rMapIf(node.elements, newStack, r, tr),
            };
        case 'ArrowExpression':
            return {
                ...node,
                params: r(node.params, newStack, tr),
                body: r(node.body, newStack, tr),
            };
        case 'AssignmentExpression':
            return {
                ...node,
                binding: r(node.binding, newStack, tr),
                expression: r(node.expression, newStack, tr),
            };
        case 'CompoundAssignmentExpression':
            return {
                ...node,
                binding: r(node.binding, newStack, tr),
                expression: r(node.expression, newStack, tr),
            };
        case 'AssignmentTargetPropertyIdentifier':
            return {
                ...node,
                binding: r(node.binding, newStack, tr),
                init: rIf(node.init, newStack, r, tr),
            };
        case 'BindingPropertyIdentifier':
            return {
                ...node,
                binding: r(node.binding, newStack, tr),
                init: rIf(node.init, newStack, r, tr),
            };
        case 'VariableDeclarator':
            return {
                ...node,
                binding: r(node.binding, newStack, tr),
                init: rIf(node.init, newStack, r, tr),
            };
        case 'AssignmentTargetWithDefault':
            return {
                ...node,
                binding: r(node.binding, newStack, tr),
                init: r(node.init, newStack, tr),
            };
        case 'BindingWithDefault':
            return {
                ...node,
                binding: r(node.binding, newStack, tr),
                init: r(node.init, newStack, tr),
            };
        case 'AssignmentTargetPropertyProperty':
            return {
                ...node,
                name: r(node.name, newStack, tr),
                binding: r(node.binding, newStack, tr),
            };
        case 'BindingPropertyProperty':
            return {
                ...node,
                name: r(node.name, newStack, tr),
                binding: r(node.binding, newStack, tr),
            };
        case 'AwaitExpression':
            return {
                ...node,
                expression: r(node.expression, newStack, tr),
            };
        case 'ComputedPropertyName':
            return {
                ...node,
                expression: r(node.expression, newStack, tr),
            };
        case 'ExpressionStatement':
            return {
                ...node,
                expression: r(node.expression, newStack, tr),
            };
        case 'SpreadElement':
            return {
                ...node,
                expression: r(node.expression, newStack, tr),
            };
        case 'SpreadProperty':
            return {
                ...node,
                expression: r(node.expression, newStack, tr),
            };
        case 'ThrowStatement':
            return {
                ...node,
                expression: r(node.expression, newStack, tr),
            };
        case 'YieldGeneratorExpression':
            return {
                ...node,
                expression: r(node.expression, newStack, tr),
            };
        case 'ReturnStatement':
            return {
                ...node,
                expression: rIf(node.expression, newStack, r, tr),
            };
        case 'YieldExpression':
            return {
                ...node,
                expression: rIf(node.expression, newStack, r, tr),
            };
        case 'BinaryExpression':
            return {
                ...node,
                left: r(node.left, newStack, tr),
                right: r(node.right, newStack, tr),
            };
        case 'Block':
            return {
                ...node,
                statements: rMap(node.statements, newStack, r, tr),
            };
        case 'BlockStatement':
            return {
                ...node,
                block: r(node.block, newStack, tr),
            };
        case 'CallExpression':
            return {
                ...node,
                callee: r(node.callee, newStack, tr),
                arguments: rMap(node.arguments, newStack, r, tr),
            };
        case 'NewExpression':
            return {
                ...node,
                callee: r(node.callee, newStack, tr),
                arguments: rMap(node.arguments, newStack, r, tr),
            };
        case 'CatchClause':
            return {
                ...node,
                binding: r(node.binding, newStack, tr),
                body: r(node.body, newStack, tr),
            };
        case 'ClassDeclaration':
            return {
                ...node,
                name: r(node.name, newStack, tr),
                super: rIf(node.super, newStack, r, tr),
                elements: rMap(node.elements, newStack, r, tr),
            };
        case 'ClassExpression':
            return {
                ...node,
                name: rIf(node.name, newStack, r, tr),
                super: rIf(node.super, newStack, r, tr),
                elements: rMap(node.elements, newStack, r, tr),
            };
        case 'ClassElement':
            return {
                ...node,
                method: r(node.method, newStack, tr),
            };
        case 'ComputedMemberAssignmentTarget':
            return {
                ...node,
                object: r(node.object, newStack, tr),
                expression: r(node.expression, newStack, tr),
            };
        case 'ComputedMemberExpression':
            return {
                ...node,
                object: r(node.object, newStack, tr),
                expression: r(node.expression, newStack, tr),
            };
        case 'ConditionalExpression':
            return {
                ...node,
                test: r(node.test, newStack, tr),
                consequent: r(node.consequent, newStack, tr),
                alternate: r(node.alternate, newStack, tr),
            };
        case 'IfStatement':
            return {
                ...node,
                test: r(node.test, newStack, tr),
                consequent: r(node.consequent, newStack, tr),
                alternate: rIf(node.alternate, newStack, r, tr),
            };
        case 'DataProperty':
            return {
                ...node,
                name: r(node.name, newStack, tr),
                expression: r(node.expression, newStack, tr),
            };
        case 'DoWhileStatement':
            return {
                ...node,
                body: r(node.body, newStack, tr),
                test: r(node.test, newStack, tr),
            };
        case 'Export':
            return {
                ...node,
                declaration: r(node.declaration, newStack, tr),
            };
        case 'ExportDefault':
            return {
                ...node,
                body: r(node.body, newStack, tr),
            };
        case 'LabeledStatement':
            return {
                ...node,
                body: r(node.body, newStack, tr),
            };
        case 'ExportFrom':
            return {
                ...node,
                namedExports: rMap(node.namedExports, newStack, r, tr),
            };
        case 'ExportLocals':
            return {
                ...node,
                namedExports: rMap(node.namedExports, newStack, r, tr),
            };
        case 'ExportLocalSpecifier':
            return {
                ...node,
                name: r(node.name, newStack, tr),
            };
        case 'ShorthandProperty':
            return {
                ...node,
                name: r(node.name, newStack, tr),
            };
        case 'ForAwaitStatement':
            return {
                ...node,
                left: r(node.left, newStack, tr),
                right: r(node.right, newStack, tr),
                body: r(node.body, newStack, tr),
            };
        case 'ForInStatement':
            return {
                ...node,
                left: r(node.left, newStack, tr),
                right: r(node.right, newStack, tr),
                body: r(node.body, newStack, tr),
            };
        case 'ForOfStatement':
            return {
                ...node,
                left: r(node.left, newStack, tr),
                right: r(node.right, newStack, tr),
                body: r(node.body, newStack, tr),
            };
        case 'ForStatement':
            return {
                ...node,
                init: rIf(node.init, newStack, r, tr),
                test: rIf(node.test, newStack, r, tr),
                update: rIf(node.update, newStack, r, tr),
                body: r(node.body, newStack, tr),
            };
        case 'FormalParameters':
            return {
                ...node,
                items: rMap(node.items, newStack, r, tr),
                rest: rIf(node.rest, newStack, r, tr),
            };
        case 'FunctionBody':
            return {
                ...node,
                directives: rMap(node.directives, newStack, r, tr),
                statements: rMap(node.statements, newStack, r, tr),
            };
        case 'Script':
            return {
                ...node,
                directives: rMap(node.directives, newStack, r, tr),
                statements: rMap(node.statements, newStack, r, tr),
            };
        case 'FunctionDeclaration':
            return {
                ...node,
                name: r(node.name, newStack, tr),
                params: r(node.params, newStack, tr),
                body: r(node.body, newStack, tr),
            };
        case 'Method':
            return {
                ...node,
                name: r(node.name, newStack, tr),
                params: r(node.params, newStack, tr),
                body: r(node.body, newStack, tr),
            };
        case 'FunctionExpression':
            return {
                ...node,
                name: rIf(node.name, newStack, r, tr),
                params: r(node.params, newStack, tr),
                body: r(node.body, newStack, tr),
            };
        case 'Getter':
            return {
                ...node,
                name: r(node.name, newStack, tr),
                body: r(node.body, newStack, tr),
            };
        case 'Import':
            return {
                ...node,
                defaultBinding: rIf(node.defaultBinding, newStack, r, tr),
                namedImports: rMap(node.namedImports, newStack, r, tr),
            };
        case 'ImportNamespace':
            return {
                ...node,
                defaultBinding: rIf(node.defaultBinding, newStack, r, tr),
                namespaceBinding: r(node.namespaceBinding, newStack, tr),
            };
        case 'ImportSpecifier':
            return {
                ...node,
                binding: r(node.binding, newStack, tr),
            };
        case 'Module':
            return {
                ...node,
                directives: rMap(node.directives, newStack, r, tr),
                items: rMap(node.items, newStack, r, tr),
            };
        case 'ObjectAssignmentTarget':
            return {
                ...node,
                properties: rMap(node.properties, newStack, r, tr),
                rest: rIf(node.rest, newStack, r, tr),
            };
        case 'ObjectBinding':
            return {
                ...node,
                properties: rMap(node.properties, newStack, r, tr),
                rest: rIf(node.rest, newStack, r, tr),
            };
        case 'ObjectExpression':
            return {
                ...node,
                properties: rMap(node.properties, newStack, r, tr),
            };
        case 'Setter':
            return {
                ...node,
                name: r(node.name, newStack, tr),
                param: r(node.param, newStack, tr),
                body: r(node.body, newStack, tr),
            };
        case 'StaticMemberAssignmentTarget':
            return {
                ...node,
                object: r(node.object, newStack, tr),
            };
        case 'StaticMemberExpression':
            return {
                ...node,
                object: r(node.object, newStack, tr),
            };
        case 'SwitchCase':
            return {
                ...node,
                test: r(node.test, newStack, tr),
                consequent: rMap(node.consequent, newStack, r, tr),
            };
        case 'SwitchDefault':
            return {
                ...node,
                consequent: rMap(node.consequent, newStack, r, tr),
            };
        case 'SwitchStatement':
            return {
                ...node,
                discriminant: r(node.discriminant, newStack, tr),
                cases: rMap(node.cases, newStack, r, tr),
            };
        case 'SwitchStatementWithDefault':
            return {
                ...node,
                discriminant: r(node.discriminant, newStack, tr),
                preDefaultCases: rMap(node.preDefaultCases, newStack, r, tr),
                defaultCase: r(node.defaultCase, newStack, tr),
                postDefaultCases: rMap(node.postDefaultCases, newStack, r, tr),
            };
        case 'TemplateExpression':
            return {
                ...node,
                tag: rIf(node.tag, newStack, r, tr),
                elements: rMap(node.elements, newStack, r, tr),
            };
        case 'TryCatchStatement':
            return {
                ...node,
                body: r(node.body, newStack, tr),
                catchClause: r(node.catchClause, newStack, tr),
            };
        case 'TryFinallyStatement':
            return {
                ...node,
                body: r(node.body, newStack, tr),
                catchClause: rIf(node.catchClause, newStack, r, tr),
                finalizer: r(node.finalizer, newStack, tr),
            };
        case 'UnaryExpression':
            return {
                ...node,
                operand: r(node.operand, newStack, tr),
            };
        case 'UpdateExpression':
            return {
                ...node,
                operand: r(node.operand, newStack, tr),
            };
        case 'VariableDeclaration':
            return {
                ...node,
                declarators: rMap(node.declarators, newStack, r, tr),
            };
        case 'VariableDeclarationStatement':
            return {
                ...node,
                declaration: r(node.declaration, newStack, tr),
            };
        case 'WhileStatement':
            return {
                ...node,
                test: r(node.test, newStack, tr),
                body: r(node.body, newStack, tr),
            };
        case 'WithStatement':
            return {
                ...node,
                object: r(node.object, newStack, tr),
                body: r(node.body, newStack, tr),
            };
        default:
            return node;
        // case 'AssignmentTargetIdentifier':
        // case 'BindingIdentifier':
        // case 'BreakStatement':
        // case 'ContinueStatement':
        // case 'DebuggerStatement':
        // case 'Directive':
        // case 'EmptyStatement':
        // case 'ExportAllFrom':
        // case 'ExportFromSpecifier':
        // case 'IdentifierExpression':
        // case 'LiteralBooleanExpression':
        // case 'LiteralInfinityExpression':
        // case 'LiteralNullExpression':
        // case 'LiteralNumericExpression':
        // case 'LiteralRegExpExpression':
        // case 'LiteralStringExpression':
        // case 'NewTargetExpression':
        // case 'StaticPropertyName':
        // case 'Super':
        // case 'TemplateElement':
        // case 'ThisExpression':
    }
};

const transformRecursive = (node, stack, tr) => tr(transformChildren(node, stack.concat(node), transformRecursive, tr), stack);
const transform = (parent, tr) => transformRecursive(parent, [], tr);

const COMPOUND_TO_BINARY = {
    '+=': '+',
    '-=': '-',
    '*=': '*',
    '/=': '/',
    '%=': '%',
    '**=': '**',
    '<<=': '<<',
    '>>=': '>>',
    '>>>=': '>>>',
    '|=': '|',
    '^=': '^',
    '&=': '&',
};
const unpackAssignmentIdentifier = (binding) => {
    switch (binding.type) {
        case 'AssignmentTargetIdentifier':
            return new IdentifierExpression_1({ name: binding.name });
        case 'ComputedMemberAssignmentTarget':
            return new ComputedMemberExpression_1({
                object: binding.object,
                expression: binding.expression,
            });
        case 'StaticMemberAssignmentTarget':
            return new StaticMemberExpression_1({
                object: binding.object,
                property: binding.property,
            });
        default:
            return new IdentifierExpression_1({ name: '__never' });
    }
};
const unpackCompoundExpression = (compound) => new BinaryExpression_1({
    left: unpackAssignmentIdentifier(compound.binding),
    operator: COMPOUND_TO_BINARY[compound.operator],
    right: compound.expression,
});

const RECORD_FUNCTION = '__record';
const RECORD_STORE = '__record_store';
const checkWriteNode = (n, variables) => {
    const hit = variables.find(v => v.writes.includes(n));
    if (hit !== undefined) {
        hit.recorded.push(n);
    }
    return hit;
};
const valueRecordExpression = (index, name, value, recordValue) => new CallExpression_1({
    callee: new IdentifierExpression_1({ name: RECORD_FUNCTION }),
    arguments: recordValue !== undefined
        ? [
            new LiteralNumericExpression_1({ value: index }),
            new LiteralStringExpression_1({ value: name }),
            value,
            recordValue,
        ]
        : [
            new LiteralNumericExpression_1({ value: index }),
            new LiteralStringExpression_1({ value: name }),
            value,
        ],
});
const transformToRecorded = (root, global) => {
    const variables = getVariables(global, VariableDeclarations).map((v, i) => ({
        ...v,
        index: i,
        writes: v.references
            .filter(r => r.accessibility.isWrite)
            .map(({ node }) => node),
        recorded: [],
    }));
    const tree = transform(root, (node) => {
        switch (node.type) {
            case 'VariableDeclarator':
                if (node.binding.type === 'BindingIdentifier' &&
                    node.init &&
                    !isFunctionExpression(node.init)) {
                    const v = checkWriteNode(node.binding, variables);
                    if (v !== undefined) {
                        return new VariableDeclarator_1({
                            binding: node.binding,
                            init: valueRecordExpression(v.index, v.name, node.init),
                        });
                    }
                }
                return node;
            case 'AssignmentExpression':
                if (node.binding.type === 'AssignmentTargetIdentifier' &&
                    !isFunctionExpression(node.expression)) {
                    const v = checkWriteNode(node.binding, variables);
                    if (v !== undefined) {
                        return new AssignmentExpression_1({
                            binding: node.binding,
                            expression: valueRecordExpression(v.index, v.name, node.expression),
                        });
                    }
                }
                return node;
            case 'CompoundAssignmentExpression':
                if (node.binding.type === 'AssignmentTargetIdentifier') {
                    const v = checkWriteNode(node.binding, variables);
                    if (v !== undefined) {
                        return new AssignmentExpression_1({
                            binding: node.binding,
                            expression: valueRecordExpression(v.index, v.name, unpackCompoundExpression(node)),
                        });
                    }
                }
                return node;
            case 'UpdateExpression':
                if (node.operand.type === 'AssignmentTargetIdentifier') {
                    const v = checkWriteNode(node.operand, variables);
                    if (v !== undefined) {
                        if (node.isPrefix) {
                            return valueRecordExpression(v.index, v.name, node);
                        }
                        return valueRecordExpression(v.index, v.name, unpackAssignmentIdentifier(node.operand), new UpdateExpression_1({
                            isPrefix: true,
                            operator: node.operator,
                            operand: node.operand,
                        }));
                    }
                }
                return node;
            default:
                return node;
        }
    });
    return {
        tree,
        script: codegen(tree, new dist.FormattedCodeGen()),
        variables: variables.filter(({ writes, recorded }) => recorded.length > 0 && recorded.length === writes.length),
    };
};
const evaluateRecorded = (script, functionName, functionArguments) => {
    const argstr = functionArguments?.map(simpleToProgram).join(', ');
    // eslint-disable-next-line no-new-func
    return new Function(`
    ${RECORD_STORE} = {};
    ${RECORD_FUNCTION} = (index, name, value, rec) => {
      const key = index + '_' + name;
      ${RECORD_STORE}[key] = (${RECORD_STORE}[key] || []).concat(rec !== undefined ? rec : value);
      return value;
    };
    ${script};
    ${functionName ? `${functionName}(${argstr})` : ''}
    return ${RECORD_STORE};
  `)();
};
const recordVariableHistory = (root, global, functionName, functionArguments) => {
    const { script, variables } = transformToRecorded(root, global);
    const history = evaluateRecorded(script, functionName, functionArguments);
    return { arguments: functionArguments, variables, history };
};

const questionToText = (qlc, showTypes) => showTypes ? `${qlc.question} [${qlc.type}]` : `${qlc.question}`;
const optionToText = (opt, showInfo, showTypes) => [`* ${opt.answer}`]
    .concat(showTypes ? `[${opt.type}]` : [])
    .concat(showInfo ? `_<small>${opt.info}</small>_` : [])
    .join(' ');
const qlcToText = (qlc, showInfo, showTypes) => [questionToText(qlc, showTypes)]
    .concat(qlc.options.map(o => optionToText(o, showInfo, showTypes)))
    .join('\n');
const qlcsToText = (qlcs, showInfo, showTypes) => qlcs.map(qlc => qlcToText(qlc, showInfo, showTypes)).join('\n\n');

const createProgramModel = (source, input, getFunctions, recordEvaluation) => {
    const { tree, locations, comments } = dist$8.parseScriptWithLocation(source);
    const scope = analyze(tree);
    return {
        tree,
        locations,
        comments,
        scope,
        input,
        functions: getFunctions
            ? getFunctionsWithVariables(scope, tree)
            : undefined,
        recorded: recordEvaluation
            ? recordVariableHistory(tree, scope, input?.functionName, pickOne(input?.arguments || []))
            : undefined,
    };
};
const selectByType = (elements, select) => (select ? elements.filter(({ type }) => select.includes(type)) : elements);
const isFunctions = (templates) => templates.find(t => t.wantsFunctions) !== undefined;
const isEvaluated = (templates) => templates.find(t => t.wantsRecordedEvaluation) !== undefined;
const prepare = (source, select, input) => {
    const templates = selectByType(questions, select);
    const data = createProgramModel(source, input, isFunctions(templates), isEvaluated(templates));
    return templates
        .flatMap(({ type, prepare: prepareTemplate }) => prepareTemplate(data).map(generate => ({
        type,
        generate,
    })))
        .map(({ type, generate }, pos) => ({ type, pos, generate }));
};
const allUsedTypes = (requests) => {
    if (requests.find(req => req.types === undefined)) {
        return undefined;
    }
    return [...new Set(requests.flatMap(req => req.types || []))];
};
const generate = (source, requests, input) => {
    const r = requests || [{ count: 1 }];
    let prepared = prepare(source, allUsedTypes(r), input);
    const out = [];
    r.forEach(({ count, fill, types, uniqueTypes }) => {
        let targetCount = fill ? count - out.length : count;
        while (targetCount > 0 && prepared.length > 0) {
            const sample = selectByType(prepared, types);
            const picked = pickOne(sample);
            if (picked) {
                out.push({ type: picked.type, pos: picked.pos, ...picked.generate() });
                if (uniqueTypes) {
                    prepared = prepared.filter(({ type }) => type !== picked.type);
                }
                else {
                    prepared = prepared.filter(({ pos }) => pos !== picked.pos);
                }
            }
            targetCount -= 1;
        }
    });
    return out.sort((a, b) => a.pos - b.pos);
};

export { createProgramModel, evaluateRecorded, generate, prepare, qlcToText, qlcsToText, transformToRecorded };
