self.webpackChunk([45],{58:function(e,n,a){"use strict";a.r(n),n.default='/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved. \nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \n \nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \nMERCHANTABLITY OR NON-INFRINGEMENT. \n \nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib="true"/>\n\n\ninterface ReadonlyArray<T> {\n\n    /**\n     * Calls a defined callback function on each element of an array. Then, flattens the result into\n     * a new array.\n     * This is identical to a map followed by flat with depth 1.\n     *\n     * @param callback A function that accepts up to three arguments. The flatMap method calls the\n     * callback function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callback function. If\n     * thisArg is omitted, undefined is used as the this value.\n     */\n    flatMap<U, This = undefined> (\n        callback: (this: This, value: T, index: number, array: T[]) => U|ReadonlyArray<U>,\n        thisArg?: This\n    ): U[]\n\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<U>(this:\n        ReadonlyArray<U[][][][]> |\n\n        ReadonlyArray<ReadonlyArray<U[][][]>> |\n        ReadonlyArray<ReadonlyArray<U[][]>[]> |\n        ReadonlyArray<ReadonlyArray<U[]>[][]> |\n        ReadonlyArray<ReadonlyArray<U>[][][]> |\n\n        ReadonlyArray<ReadonlyArray<ReadonlyArray<U[][]>>> |\n        ReadonlyArray<ReadonlyArray<ReadonlyArray<U>[][]>> |\n        ReadonlyArray<ReadonlyArray<ReadonlyArray<U>>[][]> |\n        ReadonlyArray<ReadonlyArray<ReadonlyArray<U>[]>[]> |\n        ReadonlyArray<ReadonlyArray<ReadonlyArray<U[]>>[]> |\n        ReadonlyArray<ReadonlyArray<ReadonlyArray<U[]>[]>> |\n\n        ReadonlyArray<ReadonlyArray<ReadonlyArray<ReadonlyArray<U[]>>>> |\n        ReadonlyArray<ReadonlyArray<ReadonlyArray<ReadonlyArray<U>[]>>> |\n        ReadonlyArray<ReadonlyArray<ReadonlyArray<ReadonlyArray<U>>[]>> |\n        ReadonlyArray<ReadonlyArray<ReadonlyArray<ReadonlyArray<U>>>[]> |\n\n        ReadonlyArray<ReadonlyArray<ReadonlyArray<ReadonlyArray<ReadonlyArray<U>>>>>,\n        depth: 4): U[];\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<U>(this:\n        ReadonlyArray<U[][][]> |\n\n        ReadonlyArray<ReadonlyArray<U>[][]> |\n        ReadonlyArray<ReadonlyArray<U[]>[]> |\n        ReadonlyArray<ReadonlyArray<U[][]>> |\n\n        ReadonlyArray<ReadonlyArray<ReadonlyArray<U[]>>> |\n        ReadonlyArray<ReadonlyArray<ReadonlyArray<U>[]>> |\n        ReadonlyArray<ReadonlyArray<ReadonlyArray<U>>[]> |\n\n        ReadonlyArray<ReadonlyArray<ReadonlyArray<ReadonlyArray<U>>>>,\n        depth: 3): U[];\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<U>(this:\n        ReadonlyArray<U[][]> |\n\n        ReadonlyArray<ReadonlyArray<U[]>> |\n        ReadonlyArray<ReadonlyArray<U>[]> |\n\n        ReadonlyArray<ReadonlyArray<ReadonlyArray<U>>>,\n        depth: 2): U[];\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<U>(this:\n        ReadonlyArray<U[]> |\n        ReadonlyArray<ReadonlyArray<U>>,\n        depth?: 1\n    ): U[];\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<U>(this:\n        ReadonlyArray<U>,\n        depth: 0\n    ): U[];\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth. If no depth is provided, flat method defaults to the depth of 1.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<U>(depth?: number): any[];\n  }\n\ninterface Array<T> {\n\n    /**\n     * Calls a defined callback function on each element of an array. Then, flattens the result into\n     * a new array.\n     * This is identical to a map followed by flat with depth 1.\n     *\n     * @param callback A function that accepts up to three arguments. The flatMap method calls the\n     * callback function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callback function. If\n     * thisArg is omitted, undefined is used as the this value.\n     */\n    flatMap<U, This = undefined> (\n        callback: (this: This, value: T, index: number, array: T[]) => U|ReadonlyArray<U>,\n        thisArg?: This\n    ): U[]\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<U>(this: U[][][][][][][][], depth: 7): U[];\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<U>(this: U[][][][][][][], depth: 6): U[];\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<U>(this: U[][][][][][], depth: 5): U[];\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<U>(this: U[][][][][], depth: 4): U[];\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<U>(this: U[][][][], depth: 3): U[];\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<U>(this: U[][][], depth: 2): U[];\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<U>(this: U[][], depth?: 1): U[];\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<U>(this: U[], depth: 0): U[];\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth. If no depth is provided, flat method defaults to the depth of 1.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<U>(depth?: number): any[];\n}\n'}});