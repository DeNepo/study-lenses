self.webpackChunk([25],{38:function(e,n,r){"use strict";r.r(n),n.default='/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib="true"/>\r\n\n\n/// <reference lib="es2015.symbol" />\r\n/// <reference lib="es2015.iterable" />\r\n\r\ninterface SymbolConstructor {\r\n    /**\r\n     * A method that returns the default async iterator for an object. Called by the semantics of\r\n     * the for-await-of statement.\r\n     */\r\n    readonly asyncIterator: symbol;\r\n}\r\n\r\ninterface AsyncIterator<T, TReturn = any, TNext = undefined> {\r\n    // NOTE: \'next\' is defined using a tuple to ensure we report the correct assignability errors in all places.\r\n    next(...args: [] | [TNext]): Promise<IteratorResult<T, TReturn>>;\r\n    return?(value?: TReturn | PromiseLike<TReturn>): Promise<IteratorResult<T, TReturn>>;\r\n    throw?(e?: any): Promise<IteratorResult<T, TReturn>>;\r\n}\r\n\r\ninterface AsyncIterable<T> {\r\n    [Symbol.asyncIterator](): AsyncIterator<T>;\r\n}\r\n\r\ninterface AsyncIterableIterator<T> extends AsyncIterator<T> {\r\n    [Symbol.asyncIterator](): AsyncIterableIterator<T>;\r\n}'}});