!function(e){var n={};function t(o){if(n[o])return n[o].exports;var s=n[o]={i:o,l:!1,exports:{}};return e[o].call(s.exports,s,s.exports,t),s.l=!0,s.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var s in e)t.d(o,s,function(n){return e[n]}.bind(null,s));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";t.r(n);const o=self,s=[];let r={};class a{add(){}}class i{constructor(e){this.children=[],this.attributes={},this.style={},this.classList=new a,this.type=e}appendChild(e){this.children.push(e)}setAttribute(e,n){this.attributes[e]=n}addEventListener(){}scrollIntoView(){}}let l=0;class c{constructor(){this._id=""+l++}clearRect(){}strokeRect(){}setLineDash(){}putImageData(e){r[this._id]=e}getImageData(){return r[this._id]}}class d extends i{constructor(){super("canvas"),this._context=new c}getContext(){return this._context}}const _={head:new class extends i{constructor(){super("head")}appendChild(e){if(super.appendChild(e),"script"===e.type)try{o.importScripts(e.src),e.onload()}catch(n){e.onerror()}}},createTextNode:e=>e,createElement:e=>{let n;switch(e){case"canvas":n=new d;break;default:n=new i(e)}return s.push(n),n},getElementById:e=>s.find(n=>n.id===e)};const u=self;Object.assign(u,{document:_,window:self}),u.importScripts("https://pyodide-cdn2.iodide.io/v0.15.0/full/pyodide.js");function p(e){switch(e.type){case"init":return u.languagePluginLoader.then(()=>({}));case"run":return u.languagePluginLoader.then(()=>{const{code:n,requestId:t}=e,o=u.pyodide;return u.__variables__?(s.length=0,r={},o.runPython("\nimport js\n\njs_vars__ = js.self.__variables__\nglobal_keys__ = list(globals().keys())\n\nfor key__ in global_keys__:\n  if (key__ != \"js\") and (key__ not in js_vars__) and (not key__.endswith('__')):\n    del globals()[key__]\n")):u.__variables__=u.pyodide.runPython("list(globals().keys())"),u.__source__=n,u.__log__=(e,n,...s)=>{const r=s.map((e,n)=>function(e){try{if("matplotlib.pyplot"===e.__name__)return!0}catch(e){return!1}}(e)?function(e){e.gcf().canvas.show();const n=e.gcf().canvas.get_element("canvas");return{marker:"__rnwp_transferable_image__",buffer:n.getContext().getImageData().data,width:n.attributes.width||0,height:n.attributes.height||0}}(e):"function"==typeof e?o.globals.repr(e):e);u.postMessage({type:"log",payload:{line:e,col:n,logs:r,requestId:t}})},function(e){const n=(()=>{try{return e.runPython('\nimport ast\nimport js\nimport sys\n\ndef find_imports(code):\n  mod = ast.parse(code)\n  imports = set()\n  for node in ast.walk(mod):\n    if isinstance(node, ast.Import):\n      for name in node.names:\n        name = name.name\n        imports.add(name.split(".")[0])\n    elif isinstance(node, ast.ImportFrom):\n      name = node.module\n      imports.add(name.split(".")[0])\n  return list(imports.difference(sys.builtin_module_names))\n\nfind_imports(js.globalThis.__source__)\n')}catch(e){return[]}})().map(n=>e._module.packages.import_name_to_package_name[n]).filter(n=>n&&!(n in e.loadedPackages));return e.loadPackage(n)}(o).then(()=>{try{o.runPython('\nimport ast\nimport js\n\n__log__ = js.self.__log__\n\nclass LogEnhancer(ast.NodeTransformer):\n  def visit_Call(self, node: ast.Call):\n    if type(node.func).__name__ == "Name" and node.func.id == "print":\n      node.func.id = "__log__"\n\n      line = ast.Num(node.lineno)\n      line.lineno = node.lineno\n      line.col_offset = node.col_offset\n      node.args.insert(0, line)\n\n      col = ast.Num(node.col_offset)\n      col.lineno = node.lineno\n      col.col_offset = node.col_offset\n      node.args.insert(1, col)\n        \n    return node\n\ntree = ast.parse(js.self.__source__)\noptimizer = LogEnhancer()\ntree = optimizer.visit(tree)\n\ncode = compile(tree, "<unknown>", "exec")\nexec(code)\n')}catch(e){const n=function(e){const n=e.message,t=n.match(f);if(!t)return;const o=t[1],s=n.split("\n");return`${s[s.length-2]} (${o})\n\n${s.slice(0,-2).join("\n")}`}(e);n&&u.postMessage({type:"error",payload:{requestId:t,message:n}})}return{}})})}}const f=/File "<unknown>", line (\d+)/;onmessage=e=>{const{id:n,payload:t}=e.data;p(t).then(e=>{u.postMessage({id:n,payload:e})})}}]);