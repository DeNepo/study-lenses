self.webpackChunk([8],{21:function(r,e,n){"use strict";n.r(e),e.default="/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib=\"true\"/>\r\n\n\n/// <reference lib=\"es2015.symbol\" />\r\n\r\ninterface SymbolConstructor {\r\n    /**\r\n     * A method that returns the default iterator for an object. Called by the semantics of the\r\n     * for-of statement.\r\n     */\r\n    readonly iterator: symbol;\r\n}\r\n\r\ninterface IteratorYieldResult<TYield> {\r\n    done?: false;\r\n    value: TYield;\r\n}\r\n\r\ninterface IteratorReturnResult<TReturn> {\r\n    done: true;\r\n    value: TReturn;\r\n}\r\n\r\ntype IteratorResult<T, TReturn = any> = IteratorYieldResult<T> | IteratorReturnResult<TReturn>;\r\n\r\ninterface Iterator<T, TReturn = any, TNext = undefined> {\r\n    // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.\r\n    next(...args: [] | [TNext]): IteratorResult<T, TReturn>;\r\n    return?(value?: TReturn): IteratorResult<T, TReturn>;\r\n    throw?(e?: any): IteratorResult<T, TReturn>;\r\n}\r\n\r\ninterface Iterable<T> {\r\n    [Symbol.iterator](): Iterator<T>;\r\n}\r\n\r\ninterface IterableIterator<T> extends Iterator<T> {\r\n    [Symbol.iterator](): IterableIterator<T>;\r\n}\r\n\r\ninterface Array<T> {\r\n    /** Iterator */\r\n    [Symbol.iterator](): IterableIterator<T>;\r\n\r\n    /**\r\n     * Returns an iterable of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, T]>;\r\n\r\n    /**\r\n     * Returns an iterable of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n\r\n    /**\r\n     * Returns an iterable of values in the array\r\n     */\r\n    values(): IterableIterator<T>;\r\n}\r\n\r\ninterface ArrayConstructor {\r\n    /**\r\n     * Creates an array from an iterable object.\r\n     * @param iterable An iterable object to convert to an array.\r\n     */\r\n    from<T>(iterable: Iterable<T> | ArrayLike<T>): T[];\r\n\r\n    /**\r\n     * Creates an array from an iterable object.\r\n     * @param iterable An iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from<T, U>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];\r\n}\r\n\r\ninterface ReadonlyArray<T> {\r\n    /** Iterator of values in the array. */\r\n    [Symbol.iterator](): IterableIterator<T>;\r\n\r\n    /**\r\n     * Returns an iterable of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, T]>;\r\n\r\n    /**\r\n     * Returns an iterable of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n\r\n    /**\r\n     * Returns an iterable of values in the array\r\n     */\r\n    values(): IterableIterator<T>;\r\n}\r\n\r\ninterface IArguments {\r\n    /** Iterator */\r\n    [Symbol.iterator](): IterableIterator<any>;\r\n}\r\n\r\ninterface Map<K, V> {\r\n    /** Returns an iterable of entries in the map. */\r\n    [Symbol.iterator](): IterableIterator<[K, V]>;\r\n\r\n    /**\r\n     * Returns an iterable of key, value pairs for every entry in the map.\r\n     */\r\n    entries(): IterableIterator<[K, V]>;\r\n\r\n    /**\r\n     * Returns an iterable of keys in the map\r\n     */\r\n    keys(): IterableIterator<K>;\r\n\r\n    /**\r\n     * Returns an iterable of values in the map\r\n     */\r\n    values(): IterableIterator<V>;\r\n}\r\n\r\ninterface ReadonlyMap<K, V> {\r\n    /** Returns an iterable of entries in the map. */\r\n    [Symbol.iterator](): IterableIterator<[K, V]>;\r\n\r\n    /**\r\n     * Returns an iterable of key, value pairs for every entry in the map.\r\n     */\r\n    entries(): IterableIterator<[K, V]>;\r\n\r\n    /**\r\n     * Returns an iterable of keys in the map\r\n     */\r\n    keys(): IterableIterator<K>;\r\n\r\n    /**\r\n     * Returns an iterable of values in the map\r\n     */\r\n    values(): IterableIterator<V>;\r\n}\r\n\r\ninterface MapConstructor {\r\n    new <K, V>(iterable: Iterable<readonly [K, V]>): Map<K, V>;\r\n}\r\n\r\ninterface WeakMap<K extends object, V> { }\r\n\r\ninterface WeakMapConstructor {\r\n    new <K extends object, V>(iterable: Iterable<[K, V]>): WeakMap<K, V>;\r\n}\r\n\r\ninterface Set<T> {\r\n    /** Iterates over values in the set. */\r\n    [Symbol.iterator](): IterableIterator<T>;\r\n    /**\r\n     * Returns an iterable of [v,v] pairs for every value `v` in the set.\r\n     */\r\n    entries(): IterableIterator<[T, T]>;\r\n    /**\r\n     * Despite its name, returns an iterable of the values in the set,\r\n     */\r\n    keys(): IterableIterator<T>;\r\n\r\n    /**\r\n     * Returns an iterable of values in the set.\r\n     */\r\n    values(): IterableIterator<T>;\r\n}\r\n\r\ninterface ReadonlySet<T> {\r\n    /** Iterates over values in the set. */\r\n    [Symbol.iterator](): IterableIterator<T>;\r\n\r\n    /**\r\n     * Returns an iterable of [v,v] pairs for every value `v` in the set.\r\n     */\r\n    entries(): IterableIterator<[T, T]>;\r\n\r\n    /**\r\n     * Despite its name, returns an iterable of the values in the set,\r\n     */\r\n    keys(): IterableIterator<T>;\r\n\r\n    /**\r\n     * Returns an iterable of values in the set.\r\n     */\r\n    values(): IterableIterator<T>;\r\n}\r\n\r\ninterface SetConstructor {\r\n    new <T>(iterable?: Iterable<T> | null): Set<T>;\r\n}\r\n\r\ninterface WeakSet<T extends object> { }\r\n\r\ninterface WeakSetConstructor {\r\n    new <T extends object = object>(iterable: Iterable<T>): WeakSet<T>;\r\n}\r\n\r\ninterface Promise<T> { }\r\n\r\ninterface PromiseConstructor {\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An iterable of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T>(values: Iterable<T | PromiseLike<T>>): Promise<T[]>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n     * or rejected.\r\n     * @param values An iterable of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    race<T>(values: Iterable<T>): Promise<T extends PromiseLike<infer U> ? U : T>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n     * or rejected.\r\n     * @param values An iterable of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    race<T>(values: Iterable<T | PromiseLike<T>>): Promise<T>;\r\n}\r\n\r\ndeclare namespace Reflect {\r\n    function enumerate(target: object): IterableIterator<any>;\r\n}\r\n\r\ninterface String {\r\n    /** Iterator */\r\n    [Symbol.iterator](): IterableIterator<string>;\r\n}\r\n\r\ninterface Int8Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Int8ArrayConstructor {\r\n    new (elements: Iterable<number>): Int8Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int8Array;\r\n}\r\n\r\ninterface Uint8Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Uint8ArrayConstructor {\r\n    new (elements: Iterable<number>): Uint8Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;\r\n}\r\n\r\ninterface Uint8ClampedArray {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Uint8ClampedArrayConstructor {\r\n    new (elements: Iterable<number>): Uint8ClampedArray;\r\n\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8ClampedArray;\r\n}\r\n\r\ninterface Int16Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Int16ArrayConstructor {\r\n    new (elements: Iterable<number>): Int16Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int16Array;\r\n}\r\n\r\ninterface Uint16Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Uint16ArrayConstructor {\r\n    new (elements: Iterable<number>): Uint16Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint16Array;\r\n}\r\n\r\ninterface Int32Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Int32ArrayConstructor {\r\n    new (elements: Iterable<number>): Int32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int32Array;\r\n}\r\n\r\ninterface Uint32Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Uint32ArrayConstructor {\r\n    new (elements: Iterable<number>): Uint32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint32Array;\r\n}\r\n\r\ninterface Float32Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Float32ArrayConstructor {\r\n    new (elements: Iterable<number>): Float32Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float32Array;\r\n}\r\n\r\ninterface Float64Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /**\r\n     * Returns an array of key, value pairs for every entry in the array\r\n     */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /**\r\n     * Returns an list of keys in the array\r\n     */\r\n    keys(): IterableIterator<number>;\r\n    /**\r\n     * Returns an list of values in the array\r\n     */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Float64ArrayConstructor {\r\n    new (elements: Iterable<number>): Float64Array;\r\n\r\n    /**\r\n     * Creates an array from an array-like or iterable object.\r\n     * @param arrayLike An array-like or iterable object to convert to an array.\r\n     * @param mapfn A mapping function to call on every element of the array.\r\n     * @param thisArg Value of 'this' used to invoke the mapfn.\r\n     */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float64Array;\r\n}\r\n"}});