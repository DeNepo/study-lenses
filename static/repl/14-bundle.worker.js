self.webpackChunk([14],{27:function(e,r,n){"use strict";n.r(r),r.default='/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib="true"/>\r\n\n\ninterface Array<T> {\r\n    /**\r\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\r\n     * @param searchElement The element to search for.\r\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\r\n     */\r\n    includes(searchElement: T, fromIndex?: number): boolean;\r\n}\r\n\r\ninterface ReadonlyArray<T> {\r\n    /**\r\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\r\n     * @param searchElement The element to search for.\r\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\r\n     */\r\n    includes(searchElement: T, fromIndex?: number): boolean;\r\n}\r\n\r\ninterface Int8Array {\r\n    /**\r\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\r\n     * @param searchElement The element to search for.\r\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\r\n     */\r\n    includes(searchElement: number, fromIndex?: number): boolean;\r\n}\r\n\r\ninterface Uint8Array {\r\n    /**\r\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\r\n     * @param searchElement The element to search for.\r\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\r\n     */\r\n    includes(searchElement: number, fromIndex?: number): boolean;\r\n}\r\n\r\ninterface Uint8ClampedArray {\r\n    /**\r\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\r\n     * @param searchElement The element to search for.\r\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\r\n     */\r\n    includes(searchElement: number, fromIndex?: number): boolean;\r\n}\r\n\r\ninterface Int16Array {\r\n    /**\r\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\r\n     * @param searchElement The element to search for.\r\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\r\n     */\r\n    includes(searchElement: number, fromIndex?: number): boolean;\r\n}\r\n\r\ninterface Uint16Array {\r\n    /**\r\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\r\n     * @param searchElement The element to search for.\r\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\r\n     */\r\n    includes(searchElement: number, fromIndex?: number): boolean;\r\n}\r\n\r\ninterface Int32Array {\r\n    /**\r\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\r\n     * @param searchElement The element to search for.\r\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\r\n     */\r\n    includes(searchElement: number, fromIndex?: number): boolean;\r\n}\r\n\r\ninterface Uint32Array {\r\n    /**\r\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\r\n     * @param searchElement The element to search for.\r\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\r\n     */\r\n    includes(searchElement: number, fromIndex?: number): boolean;\r\n}\r\n\r\ninterface Float32Array {\r\n    /**\r\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\r\n     * @param searchElement The element to search for.\r\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\r\n     */\r\n    includes(searchElement: number, fromIndex?: number): boolean;\r\n}\r\n\r\ninterface Float64Array {\r\n    /**\r\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\r\n     * @param searchElement The element to search for.\r\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\r\n     */\r\n    includes(searchElement: number, fromIndex?: number): boolean;\r\n}'}});