self.webpackChunk([31],{44:function(e,n,r){"use strict";r.r(n),n.default='/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib="true"/>\r\n\n\ntype FlatArray<Arr, Depth extends number> = {\r\n    "done": Arr,\r\n    "recur": Arr extends ReadonlyArray<infer InnerArr>\r\n        ? FlatArray<InnerArr, [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][Depth]>\r\n        : Arr\r\n}[Depth extends -1 ? "done" : "recur"];\r\n\r\ninterface ReadonlyArray<T> {\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array. Then, flattens the result into\r\n     * a new array.\r\n     * This is identical to a map followed by flat with depth 1.\r\n     *\r\n     * @param callback A function that accepts up to three arguments. The flatMap method calls the\r\n     * callback function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callback function. If\r\n     * thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    flatMap<U, This = undefined> (\r\n        callback: (this: This, value: T, index: number, array: T[]) => U | ReadonlyArray<U>,\r\n        thisArg?: This\r\n    ): U[]\r\n\r\n\r\n    /**\r\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\r\n     * specified depth.\r\n     *\r\n     * @param depth The maximum recursion depth\r\n     */\r\n    flat<A, D extends number = 1>(\r\n        this: A,\r\n        depth?: D\r\n    ): FlatArray<A, D>[]\r\n  }\r\n\r\ninterface Array<T> {\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of an array. Then, flattens the result into\r\n     * a new array.\r\n     * This is identical to a map followed by flat with depth 1.\r\n     *\r\n     * @param callback A function that accepts up to three arguments. The flatMap method calls the\r\n     * callback function one time for each element in the array.\r\n     * @param thisArg An object to which the this keyword can refer in the callback function. If\r\n     * thisArg is omitted, undefined is used as the this value.\r\n     */\r\n    flatMap<U, This = undefined> (\r\n        callback: (this: This, value: T, index: number, array: T[]) => U | ReadonlyArray<U>,\r\n        thisArg?: This\r\n    ): U[]\r\n\r\n    /**\r\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\r\n     * specified depth.\r\n     *\r\n     * @param depth The maximum recursion depth\r\n     */\r\n    flat<A, D extends number = 1>(\r\n        this: A,\r\n        depth?: D\r\n    ): FlatArray<A, D>[]\r\n}\r\n'}});